// Code generated from db_rustparser.g4 by ANTLR 4.7.2. DO NOT EDIT.

package parser // db_rustparser

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

import "OLC2-PROYECTO2/COMPILADOR/INTERFACES"
import "OLC2-PROYECTO2/COMPILADOR/AST/EXPRESIONES/PRIMITIVO"
import "OLC2-PROYECTO2/COMPILADOR/AST/EXPRESIONES/VARIABLES"
import "OLC2-PROYECTO2/COMPILADOR/AST/EXPRESIONES/CASTEOS"
import "OLC2-PROYECTO2/COMPILADOR/AST/EXPRESIONES/NATIVAS"
import "OLC2-PROYECTO2/COMPILADOR/AST/EXPRESIONES/ARITMETICA"
import "OLC2-PROYECTO2/COMPILADOR/AST/EXPRESIONES/LOGICA"
import "OLC2-PROYECTO2/COMPILADOR/AST/EXPRESIONES/RELACIONAL"
import "OLC2-PROYECTO2/COMPILADOR/AST/EXPRESIONES/INICIANDO_VECT"
import "OLC2-PROYECTO2/COMPILADOR/AST/EXPRESIONES/INICIANDO_ARRE"
import "OLC2-PROYECTO2/COMPILADOR/AST/EXPRESIONES/ACCESO_ARRE"
import "OLC2-PROYECTO2/COMPILADOR/AST/EXPRESIONES/ACCESO_VECT"
import "OLC2-PROYECTO2/COMPILADOR/AST/EXPRESIONES/ACCESO_STRUCT"
import "OLC2-PROYECTO2/COMPILADOR/AST/EXPRESIONES/NATIVAS_VECT"
import "OLC2-PROYECTO2/COMPILADOR/AST/INSTRUCCIONES/IMPRESION"
import "OLC2-PROYECTO2/COMPILADOR/AST/INSTRUCCIONES/S_CONDICIONAL"
import "OLC2-PROYECTO2/COMPILADOR/AST/INSTRUCCIONES/S_MATCH"
import "OLC2-PROYECTO2/COMPILADOR/AST/INSTRUCCIONES/C_LOOP"
import "OLC2-PROYECTO2/COMPILADOR/AST/INSTRUCCIONES/C_WHILE"
import "OLC2-PROYECTO2/COMPILADOR/AST/INSTRUCCIONES/C_FORIN"
import "OLC2-PROYECTO2/COMPILADOR/AST/INSTRUCCIONES/DECLARACIONES"
import "OLC2-PROYECTO2/COMPILADOR/AST/INSTRUCCIONES/DECLARACIONVAR"
import "OLC2-PROYECTO2/COMPILADOR/AST/INSTRUCCIONES/DECLARACIONVECT"
import "OLC2-PROYECTO2/COMPILADOR/AST/INSTRUCCIONES/FUN_NAT_VECT"
import "OLC2-PROYECTO2/COMPILADOR/AST/INSTRUCCIONES/DECLARACIONARRE"
import "OLC2-PROYECTO2/COMPILADOR/AST/INSTRUCCIONES/S_TRANSFERENCIA"
import "OLC2-PROYECTO2/COMPILADOR/AST/INSTRUCCIONES/ASIGNACIONES"
import "OLC2-PROYECTO2/COMPILADOR/AST/INSTRUCCIONES/FUNCIONES/PARAMETROS"
import "OLC2-PROYECTO2/COMPILADOR/AST/INSTRUCCIONES/FUNCIONES/TIPOS"
import "OLC2-PROYECTO2/COMPILADOR/AST/INSTRUCCIONES/FUNCIONES"
import "OLC2-PROYECTO2/COMPILADOR/AST/INSTRUCCIONES/STRUCTS"
import "OLC2-PROYECTO2/COMPILADOR/AST/INSTRUCCIONES/MODULO"
import "OLC2-PROYECTO2/COMPILADOR/SIMBOLOS"
import arrayList "github.com/colegno/arraylist"

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 83, 1096,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 3, 2, 3, 2, 3, 2, 3, 3, 7, 3, 137, 10, 3, 12, 3, 14, 3, 140,
	11, 3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 5, 4, 156, 10, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
	3, 5, 3, 5, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 7, 6, 174,
	10, 6, 12, 6, 14, 6, 177, 11, 6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3,
	7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 5, 7, 191, 10, 7, 3, 8, 3, 8, 3, 8, 3,
	8, 3, 8, 3, 8, 3, 8, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3,
	9, 7, 9, 209, 10, 9, 12, 9, 14, 9, 212, 11, 9, 3, 10, 3, 10, 3, 10, 3,
	10, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11,
	3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3,
	11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11,
	3, 11, 3, 11, 5, 11, 251, 10, 11, 3, 12, 3, 12, 3, 12, 5, 12, 256, 10,
	12, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 7, 13,
	267, 10, 13, 12, 13, 14, 13, 270, 11, 13, 3, 14, 3, 14, 3, 14, 3, 14, 3,
	14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14,
	3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 5, 14, 295, 10,
	14, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15, 302, 10, 15, 3, 16, 3, 16,
	3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3,
	16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 5, 16, 325,
	10, 16, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17,
	3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3,
	17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 5, 17, 354, 10, 17,
	3, 18, 3, 18, 3, 18, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3,
	20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 7, 20, 374, 10, 20,
	12, 20, 14, 20, 377, 11, 20, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21,
	3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 5,
	21, 395, 10, 21, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22,
	3, 22, 7, 22, 406, 10, 22, 12, 22, 14, 22, 409, 11, 22, 3, 23, 3, 23, 3,
	23, 3, 23, 3, 23, 3, 23, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24,
	3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3,
	25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25,
	5, 25, 445, 10, 25, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3,
	26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 5, 26, 463,
	10, 26, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27,
	3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3,
	27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27,
	3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3,
	27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27,
	3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3,
	27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 5, 27,
	536, 10, 27, 3, 28, 3, 28, 3, 28, 5, 28, 541, 10, 28, 3, 29, 3, 29, 3,
	29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 5, 29,
	555, 10, 29, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3,
	30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 5, 30, 571, 10, 30, 3, 31, 3, 31,
	3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3,
	31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 5, 31, 592, 10, 31, 3, 32,
	3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3,
	32, 3, 32, 3, 32, 3, 32, 5, 32, 609, 10, 32, 3, 33, 3, 33, 3, 33, 3, 33,
	3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3,
	33, 5, 33, 626, 10, 33, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34,
	3, 34, 3, 34, 7, 34, 637, 10, 34, 12, 34, 14, 34, 640, 11, 34, 3, 35, 3,
	35, 3, 35, 3, 35, 3, 35, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36,
	3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3,
	36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36,
	3, 36, 5, 36, 676, 10, 36, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3,
	38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 39, 3, 39, 3, 39,
	3, 39, 3, 39, 3, 39, 3, 39, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3,
	40, 3, 40, 3, 40, 5, 40, 708, 10, 40, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41,
	3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 5, 41, 722, 10, 41, 3,
	42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 5, 42, 732, 10, 42,
	3, 43, 3, 43, 3, 43, 3, 43, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3,
	44, 3, 44, 7, 44, 746, 10, 44, 12, 44, 14, 44, 749, 11, 44, 3, 45, 3, 45,
	3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3,
	45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45,
	3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 5,
	45, 784, 10, 45, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46,
	3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3,
	46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46,
	3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3,
	46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 5, 46, 833, 10, 46,
	3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 7, 47, 844,
	10, 47, 12, 47, 14, 47, 847, 11, 47, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48,
	3, 48, 5, 48, 855, 10, 48, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3,
	50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 51, 3, 51, 3, 51,
	3, 51, 3, 51, 3, 51, 5, 51, 877, 10, 51, 3, 52, 3, 52, 3, 52, 3, 52, 3,
	52, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 54, 3, 54, 3, 54,
	3, 54, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 7, 55, 903,
	10, 55, 12, 55, 14, 55, 906, 11, 55, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56,
	3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 58, 3, 58, 3, 58, 3, 58, 3,
	58, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 5, 59, 932,
	10, 59, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60,
	3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3,
	60, 3, 60, 3, 60, 3, 60, 3, 60, 7, 60, 958, 10, 60, 12, 60, 14, 60, 961,
	11, 60, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 5, 61,
	971, 10, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 7, 61, 978, 10, 61, 12,
	61, 14, 61, 981, 11, 61, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62,
	3, 62, 3, 62, 7, 62, 992, 10, 62, 12, 62, 14, 62, 995, 11, 62, 3, 63, 3,
	63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63,
	3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3,
	63, 3, 63, 3, 63, 3, 63, 5, 63, 1023, 10, 63, 3, 63, 3, 63, 3, 63, 3, 63,
	3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 7, 63, 1035, 10, 63, 12, 63,
	14, 63, 1038, 11, 63, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 5, 64,
	1046, 10, 64, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3,
	65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65,
	3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3,
	65, 5, 65, 1078, 10, 65, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66,
	3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 5, 66, 1094, 10, 66, 3,
	66, 2, 15, 10, 16, 24, 38, 42, 66, 86, 92, 108, 118, 120, 122, 124, 67,
	2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38,
	40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74,
	76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108,
	110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 2, 6, 3, 2, 64,
	65, 3, 2, 58, 63, 3, 2, 55, 57, 3, 2, 53, 54, 2, 1148, 2, 132, 3, 2, 2,
	2, 4, 138, 3, 2, 2, 2, 6, 155, 3, 2, 2, 2, 8, 157, 3, 2, 2, 2, 10, 165,
	3, 2, 2, 2, 12, 190, 3, 2, 2, 2, 14, 192, 3, 2, 2, 2, 16, 199, 3, 2, 2,
	2, 18, 213, 3, 2, 2, 2, 20, 250, 3, 2, 2, 2, 22, 255, 3, 2, 2, 2, 24, 257,
	3, 2, 2, 2, 26, 294, 3, 2, 2, 2, 28, 301, 3, 2, 2, 2, 30, 324, 3, 2, 2,
	2, 32, 353, 3, 2, 2, 2, 34, 355, 3, 2, 2, 2, 36, 358, 3, 2, 2, 2, 38, 365,
	3, 2, 2, 2, 40, 394, 3, 2, 2, 2, 42, 396, 3, 2, 2, 2, 44, 410, 3, 2, 2,
	2, 46, 416, 3, 2, 2, 2, 48, 444, 3, 2, 2, 2, 50, 462, 3, 2, 2, 2, 52, 535,
	3, 2, 2, 2, 54, 540, 3, 2, 2, 2, 56, 554, 3, 2, 2, 2, 58, 570, 3, 2, 2,
	2, 60, 591, 3, 2, 2, 2, 62, 608, 3, 2, 2, 2, 64, 625, 3, 2, 2, 2, 66, 627,
	3, 2, 2, 2, 68, 641, 3, 2, 2, 2, 70, 675, 3, 2, 2, 2, 72, 677, 3, 2, 2,
	2, 74, 683, 3, 2, 2, 2, 76, 691, 3, 2, 2, 2, 78, 707, 3, 2, 2, 2, 80, 721,
	3, 2, 2, 2, 82, 731, 3, 2, 2, 2, 84, 733, 3, 2, 2, 2, 86, 737, 3, 2, 2,
	2, 88, 783, 3, 2, 2, 2, 90, 832, 3, 2, 2, 2, 92, 834, 3, 2, 2, 2, 94, 854,
	3, 2, 2, 2, 96, 856, 3, 2, 2, 2, 98, 862, 3, 2, 2, 2, 100, 876, 3, 2, 2,
	2, 102, 878, 3, 2, 2, 2, 104, 883, 3, 2, 2, 2, 106, 890, 3, 2, 2, 2, 108,
	894, 3, 2, 2, 2, 110, 907, 3, 2, 2, 2, 112, 912, 3, 2, 2, 2, 114, 918,
	3, 2, 2, 2, 116, 931, 3, 2, 2, 2, 118, 933, 3, 2, 2, 2, 120, 970, 3, 2,
	2, 2, 122, 982, 3, 2, 2, 2, 124, 1022, 3, 2, 2, 2, 126, 1045, 3, 2, 2,
	2, 128, 1077, 3, 2, 2, 2, 130, 1093, 3, 2, 2, 2, 132, 133, 5, 4, 3, 2,
	133, 134, 8, 2, 1, 2, 134, 3, 3, 2, 2, 2, 135, 137, 5, 6, 4, 2, 136, 135,
	3, 2, 2, 2, 137, 140, 3, 2, 2, 2, 138, 136, 3, 2, 2, 2, 138, 139, 3, 2,
	2, 2, 139, 141, 3, 2, 2, 2, 140, 138, 3, 2, 2, 2, 141, 142, 8, 3, 1, 2,
	142, 5, 3, 2, 2, 2, 143, 144, 5, 52, 27, 2, 144, 145, 8, 4, 1, 2, 145,
	156, 3, 2, 2, 2, 146, 147, 5, 20, 11, 2, 147, 148, 8, 4, 1, 2, 148, 156,
	3, 2, 2, 2, 149, 150, 5, 14, 8, 2, 150, 151, 8, 4, 1, 2, 151, 156, 3, 2,
	2, 2, 152, 153, 5, 8, 5, 2, 153, 154, 8, 4, 1, 2, 154, 156, 3, 2, 2, 2,
	155, 143, 3, 2, 2, 2, 155, 146, 3, 2, 2, 2, 155, 149, 3, 2, 2, 2, 155,
	152, 3, 2, 2, 2, 156, 7, 3, 2, 2, 2, 157, 158, 5, 22, 12, 2, 158, 159,
	7, 43, 2, 2, 159, 160, 7, 52, 2, 2, 160, 161, 7, 67, 2, 2, 161, 162, 5,
	10, 6, 2, 162, 163, 7, 68, 2, 2, 163, 164, 8, 5, 1, 2, 164, 9, 3, 2, 2,
	2, 165, 166, 8, 6, 1, 2, 166, 167, 5, 12, 7, 2, 167, 168, 8, 6, 1, 2, 168,
	175, 3, 2, 2, 2, 169, 170, 12, 4, 2, 2, 170, 171, 5, 12, 7, 2, 171, 172,
	8, 6, 1, 2, 172, 174, 3, 2, 2, 2, 173, 169, 3, 2, 2, 2, 174, 177, 3, 2,
	2, 2, 175, 173, 3, 2, 2, 2, 175, 176, 3, 2, 2, 2, 176, 11, 3, 2, 2, 2,
	177, 175, 3, 2, 2, 2, 178, 179, 5, 20, 11, 2, 179, 180, 8, 7, 1, 2, 180,
	191, 3, 2, 2, 2, 181, 182, 5, 14, 8, 2, 182, 183, 8, 7, 1, 2, 183, 191,
	3, 2, 2, 2, 184, 185, 5, 8, 5, 2, 185, 186, 8, 7, 1, 2, 186, 191, 3, 2,
	2, 2, 187, 188, 5, 52, 27, 2, 188, 189, 8, 7, 1, 2, 189, 191, 3, 2, 2,
	2, 190, 178, 3, 2, 2, 2, 190, 181, 3, 2, 2, 2, 190, 184, 3, 2, 2, 2, 190,
	187, 3, 2, 2, 2, 191, 13, 3, 2, 2, 2, 192, 193, 7, 42, 2, 2, 193, 194,
	7, 52, 2, 2, 194, 195, 7, 67, 2, 2, 195, 196, 5, 16, 9, 2, 196, 197, 7,
	68, 2, 2, 197, 198, 8, 8, 1, 2, 198, 15, 3, 2, 2, 2, 199, 200, 8, 9, 1,
	2, 200, 201, 5, 18, 10, 2, 201, 202, 8, 9, 1, 2, 202, 210, 3, 2, 2, 2,
	203, 204, 12, 4, 2, 2, 204, 205, 7, 75, 2, 2, 205, 206, 5, 18, 10, 2, 206,
	207, 8, 9, 1, 2, 207, 209, 3, 2, 2, 2, 208, 203, 3, 2, 2, 2, 209, 212,
	3, 2, 2, 2, 210, 208, 3, 2, 2, 2, 210, 211, 3, 2, 2, 2, 211, 17, 3, 2,
	2, 2, 212, 210, 3, 2, 2, 2, 213, 214, 7, 52, 2, 2, 214, 215, 5, 60, 31,
	2, 215, 216, 8, 10, 1, 2, 216, 19, 3, 2, 2, 2, 217, 218, 5, 22, 12, 2,
	218, 219, 7, 15, 2, 2, 219, 220, 7, 16, 2, 2, 220, 221, 7, 71, 2, 2, 221,
	222, 7, 72, 2, 2, 222, 223, 7, 67, 2, 2, 223, 224, 5, 86, 44, 2, 224, 225,
	7, 68, 2, 2, 225, 226, 8, 11, 1, 2, 226, 251, 3, 2, 2, 2, 227, 228, 5,
	22, 12, 2, 228, 229, 7, 15, 2, 2, 229, 230, 7, 52, 2, 2, 230, 231, 7, 71,
	2, 2, 231, 232, 7, 72, 2, 2, 232, 233, 5, 30, 16, 2, 233, 234, 7, 67, 2,
	2, 234, 235, 5, 86, 44, 2, 235, 236, 7, 68, 2, 2, 236, 237, 8, 11, 1, 2,
	237, 251, 3, 2, 2, 2, 238, 239, 5, 22, 12, 2, 239, 240, 7, 15, 2, 2, 240,
	241, 7, 52, 2, 2, 241, 242, 7, 71, 2, 2, 242, 243, 5, 24, 13, 2, 243, 244,
	7, 72, 2, 2, 244, 245, 5, 30, 16, 2, 245, 246, 7, 67, 2, 2, 246, 247, 5,
	86, 44, 2, 247, 248, 7, 68, 2, 2, 248, 249, 8, 11, 1, 2, 249, 251, 3, 2,
	2, 2, 250, 217, 3, 2, 2, 2, 250, 227, 3, 2, 2, 2, 250, 238, 3, 2, 2, 2,
	251, 21, 3, 2, 2, 2, 252, 253, 7, 3, 2, 2, 253, 256, 8, 12, 1, 2, 254,
	256, 8, 12, 1, 2, 255, 252, 3, 2, 2, 2, 255, 254, 3, 2, 2, 2, 256, 23,
	3, 2, 2, 2, 257, 258, 8, 13, 1, 2, 258, 259, 5, 26, 14, 2, 259, 260, 8,
	13, 1, 2, 260, 268, 3, 2, 2, 2, 261, 262, 12, 4, 2, 2, 262, 263, 7, 75,
	2, 2, 263, 264, 5, 26, 14, 2, 264, 265, 8, 13, 1, 2, 265, 267, 3, 2, 2,
	2, 266, 261, 3, 2, 2, 2, 267, 270, 3, 2, 2, 2, 268, 266, 3, 2, 2, 2, 268,
	269, 3, 2, 2, 2, 269, 25, 3, 2, 2, 2, 270, 268, 3, 2, 2, 2, 271, 272, 7,
	52, 2, 2, 272, 273, 7, 74, 2, 2, 273, 274, 5, 28, 15, 2, 274, 275, 5, 64,
	33, 2, 275, 276, 8, 14, 1, 2, 276, 295, 3, 2, 2, 2, 277, 278, 7, 52, 2,
	2, 278, 279, 7, 74, 2, 2, 279, 280, 5, 28, 15, 2, 280, 281, 7, 22, 2, 2,
	281, 282, 5, 62, 32, 2, 282, 283, 8, 14, 1, 2, 283, 295, 3, 2, 2, 2, 284,
	285, 7, 52, 2, 2, 285, 286, 7, 74, 2, 2, 286, 287, 5, 28, 15, 2, 287, 288,
	7, 69, 2, 2, 288, 289, 5, 62, 32, 2, 289, 290, 7, 73, 2, 2, 290, 291, 5,
	90, 46, 2, 291, 292, 7, 70, 2, 2, 292, 293, 8, 14, 1, 2, 293, 295, 3, 2,
	2, 2, 294, 271, 3, 2, 2, 2, 294, 277, 3, 2, 2, 2, 294, 284, 3, 2, 2, 2,
	295, 27, 3, 2, 2, 2, 296, 297, 7, 13, 2, 2, 297, 302, 8, 15, 1, 2, 298,
	299, 7, 14, 2, 2, 299, 302, 8, 15, 1, 2, 300, 302, 8, 15, 1, 2, 301, 296,
	3, 2, 2, 2, 301, 298, 3, 2, 2, 2, 301, 300, 3, 2, 2, 2, 302, 29, 3, 2,
	2, 2, 303, 304, 7, 77, 2, 2, 304, 305, 7, 63, 2, 2, 305, 306, 5, 64, 33,
	2, 306, 307, 8, 16, 1, 2, 307, 325, 3, 2, 2, 2, 308, 309, 7, 77, 2, 2,
	309, 310, 7, 63, 2, 2, 310, 311, 7, 22, 2, 2, 311, 312, 5, 62, 32, 2, 312,
	313, 8, 16, 1, 2, 313, 325, 3, 2, 2, 2, 314, 315, 7, 77, 2, 2, 315, 316,
	7, 63, 2, 2, 316, 317, 7, 69, 2, 2, 317, 318, 5, 62, 32, 2, 318, 319, 7,
	73, 2, 2, 319, 320, 5, 90, 46, 2, 320, 321, 7, 70, 2, 2, 321, 322, 8, 16,
	1, 2, 322, 325, 3, 2, 2, 2, 323, 325, 8, 16, 1, 2, 324, 303, 3, 2, 2, 2,
	324, 308, 3, 2, 2, 2, 324, 314, 3, 2, 2, 2, 324, 323, 3, 2, 2, 2, 325,
	31, 3, 2, 2, 2, 326, 327, 7, 32, 2, 2, 327, 328, 5, 90, 46, 2, 328, 329,
	7, 67, 2, 2, 329, 330, 5, 86, 44, 2, 330, 331, 7, 68, 2, 2, 331, 332, 8,
	17, 1, 2, 332, 354, 3, 2, 2, 2, 333, 334, 7, 32, 2, 2, 334, 335, 5, 90,
	46, 2, 335, 336, 7, 67, 2, 2, 336, 337, 5, 86, 44, 2, 337, 338, 7, 68,
	2, 2, 338, 339, 7, 33, 2, 2, 339, 340, 7, 67, 2, 2, 340, 341, 5, 86, 44,
	2, 341, 342, 7, 68, 2, 2, 342, 343, 8, 17, 1, 2, 343, 354, 3, 2, 2, 2,
	344, 345, 7, 32, 2, 2, 345, 346, 5, 90, 46, 2, 346, 347, 7, 67, 2, 2, 347,
	348, 5, 86, 44, 2, 348, 349, 7, 68, 2, 2, 349, 350, 7, 33, 2, 2, 350, 351,
	5, 34, 18, 2, 351, 352, 8, 17, 1, 2, 352, 354, 3, 2, 2, 2, 353, 326, 3,
	2, 2, 2, 353, 333, 3, 2, 2, 2, 353, 344, 3, 2, 2, 2, 354, 33, 3, 2, 2,
	2, 355, 356, 5, 32, 17, 2, 356, 357, 8, 18, 1, 2, 357, 35, 3, 2, 2, 2,
	358, 359, 7, 34, 2, 2, 359, 360, 5, 90, 46, 2, 360, 361, 7, 67, 2, 2, 361,
	362, 5, 38, 20, 2, 362, 363, 7, 68, 2, 2, 363, 364, 8, 19, 1, 2, 364, 37,
	3, 2, 2, 2, 365, 366, 8, 20, 1, 2, 366, 367, 5, 40, 21, 2, 367, 368, 8,
	20, 1, 2, 368, 375, 3, 2, 2, 2, 369, 370, 12, 4, 2, 2, 370, 371, 5, 40,
	21, 2, 371, 372, 8, 20, 1, 2, 372, 374, 3, 2, 2, 2, 373, 369, 3, 2, 2,
	2, 374, 377, 3, 2, 2, 2, 375, 373, 3, 2, 2, 2, 375, 376, 3, 2, 2, 2, 376,
	39, 3, 2, 2, 2, 377, 375, 3, 2, 2, 2, 378, 379, 5, 90, 46, 2, 379, 380,
	7, 77, 2, 2, 380, 381, 7, 63, 2, 2, 381, 382, 7, 67, 2, 2, 382, 383, 5,
	86, 44, 2, 383, 384, 7, 68, 2, 2, 384, 385, 8, 21, 1, 2, 385, 395, 3, 2,
	2, 2, 386, 387, 5, 42, 22, 2, 387, 388, 7, 77, 2, 2, 388, 389, 7, 63, 2,
	2, 389, 390, 7, 67, 2, 2, 390, 391, 5, 86, 44, 2, 391, 392, 7, 68, 2, 2,
	392, 393, 8, 21, 1, 2, 393, 395, 3, 2, 2, 2, 394, 378, 3, 2, 2, 2, 394,
	386, 3, 2, 2, 2, 395, 41, 3, 2, 2, 2, 396, 397, 8, 22, 1, 2, 397, 398,
	5, 90, 46, 2, 398, 399, 8, 22, 1, 2, 399, 407, 3, 2, 2, 2, 400, 401, 12,
	4, 2, 2, 401, 402, 7, 78, 2, 2, 402, 403, 5, 90, 46, 2, 403, 404, 8, 22,
	1, 2, 404, 406, 3, 2, 2, 2, 405, 400, 3, 2, 2, 2, 406, 409, 3, 2, 2, 2,
	407, 405, 3, 2, 2, 2, 407, 408, 3, 2, 2, 2, 408, 43, 3, 2, 2, 2, 409, 407,
	3, 2, 2, 2, 410, 411, 7, 35, 2, 2, 411, 412, 7, 67, 2, 2, 412, 413, 5,
	86, 44, 2, 413, 414, 7, 68, 2, 2, 414, 415, 8, 23, 1, 2, 415, 45, 3, 2,
	2, 2, 416, 417, 7, 36, 2, 2, 417, 418, 5, 90, 46, 2, 418, 419, 7, 67, 2,
	2, 419, 420, 5, 86, 44, 2, 420, 421, 7, 68, 2, 2, 421, 422, 8, 24, 1, 2,
	422, 47, 3, 2, 2, 2, 423, 424, 7, 37, 2, 2, 424, 425, 7, 52, 2, 2, 425,
	426, 7, 38, 2, 2, 426, 427, 5, 90, 46, 2, 427, 428, 7, 67, 2, 2, 428, 429,
	5, 86, 44, 2, 429, 430, 7, 68, 2, 2, 430, 431, 8, 25, 1, 2, 431, 445, 3,
	2, 2, 2, 432, 433, 7, 37, 2, 2, 433, 434, 7, 52, 2, 2, 434, 435, 7, 38,
	2, 2, 435, 436, 5, 90, 46, 2, 436, 437, 7, 76, 2, 2, 437, 438, 7, 76, 2,
	2, 438, 439, 5, 90, 46, 2, 439, 440, 7, 67, 2, 2, 440, 441, 5, 86, 44,
	2, 441, 442, 7, 68, 2, 2, 442, 443, 8, 25, 1, 2, 443, 445, 3, 2, 2, 2,
	444, 423, 3, 2, 2, 2, 444, 432, 3, 2, 2, 2, 445, 49, 3, 2, 2, 2, 446, 447,
	7, 11, 2, 2, 447, 448, 7, 71, 2, 2, 448, 449, 5, 90, 46, 2, 449, 450, 7,
	72, 2, 2, 450, 451, 7, 73, 2, 2, 451, 452, 8, 26, 1, 2, 452, 463, 3, 2,
	2, 2, 453, 454, 7, 11, 2, 2, 454, 455, 7, 71, 2, 2, 455, 456, 5, 90, 46,
	2, 456, 457, 7, 75, 2, 2, 457, 458, 5, 92, 47, 2, 458, 459, 7, 72, 2, 2,
	459, 460, 7, 73, 2, 2, 460, 461, 8, 26, 1, 2, 461, 463, 3, 2, 2, 2, 462,
	446, 3, 2, 2, 2, 462, 453, 3, 2, 2, 2, 463, 51, 3, 2, 2, 2, 464, 465, 7,
	12, 2, 2, 465, 466, 5, 54, 28, 2, 466, 467, 7, 52, 2, 2, 467, 468, 7, 77,
	2, 2, 468, 469, 7, 52, 2, 2, 469, 470, 7, 67, 2, 2, 470, 471, 5, 66, 34,
	2, 471, 472, 7, 68, 2, 2, 472, 473, 7, 73, 2, 2, 473, 474, 8, 27, 1, 2,
	474, 536, 3, 2, 2, 2, 475, 476, 7, 12, 2, 2, 476, 477, 5, 54, 28, 2, 477,
	478, 7, 52, 2, 2, 478, 479, 5, 60, 31, 2, 479, 480, 7, 77, 2, 2, 480, 481,
	5, 90, 46, 2, 481, 482, 7, 73, 2, 2, 482, 483, 8, 27, 1, 2, 483, 536, 3,
	2, 2, 2, 484, 485, 7, 12, 2, 2, 485, 486, 5, 54, 28, 2, 486, 487, 7, 52,
	2, 2, 487, 488, 7, 74, 2, 2, 488, 489, 5, 58, 30, 2, 489, 490, 7, 77, 2,
	2, 490, 491, 5, 90, 46, 2, 491, 492, 7, 73, 2, 2, 492, 493, 8, 27, 1, 2,
	493, 536, 3, 2, 2, 2, 494, 495, 7, 12, 2, 2, 495, 496, 5, 54, 28, 2, 496,
	497, 7, 52, 2, 2, 497, 498, 7, 74, 2, 2, 498, 499, 5, 56, 29, 2, 499, 500,
	7, 77, 2, 2, 500, 501, 5, 90, 46, 2, 501, 502, 7, 73, 2, 2, 502, 503, 8,
	27, 1, 2, 503, 536, 3, 2, 2, 2, 504, 505, 7, 12, 2, 2, 505, 506, 5, 54,
	28, 2, 506, 507, 7, 52, 2, 2, 507, 508, 7, 74, 2, 2, 508, 509, 7, 22, 2,
	2, 509, 510, 7, 62, 2, 2, 510, 511, 5, 62, 32, 2, 511, 512, 7, 63, 2, 2,
	512, 513, 7, 77, 2, 2, 513, 514, 7, 22, 2, 2, 514, 515, 7, 24, 2, 2, 515,
	516, 7, 73, 2, 2, 516, 517, 8, 27, 1, 2, 517, 536, 3, 2, 2, 2, 518, 519,
	7, 12, 2, 2, 519, 520, 5, 54, 28, 2, 520, 521, 7, 52, 2, 2, 521, 522, 7,
	74, 2, 2, 522, 523, 7, 22, 2, 2, 523, 524, 7, 62, 2, 2, 524, 525, 5, 62,
	32, 2, 525, 526, 7, 63, 2, 2, 526, 527, 7, 77, 2, 2, 527, 528, 7, 22, 2,
	2, 528, 529, 7, 31, 2, 2, 529, 530, 7, 71, 2, 2, 530, 531, 5, 90, 46, 2,
	531, 532, 7, 72, 2, 2, 532, 533, 7, 73, 2, 2, 533, 534, 8, 27, 1, 2, 534,
	536, 3, 2, 2, 2, 535, 464, 3, 2, 2, 2, 535, 475, 3, 2, 2, 2, 535, 484,
	3, 2, 2, 2, 535, 494, 3, 2, 2, 2, 535, 504, 3, 2, 2, 2, 535, 518, 3, 2,
	2, 2, 536, 53, 3, 2, 2, 2, 537, 538, 7, 13, 2, 2, 538, 541, 8, 28, 1, 2,
	539, 541, 8, 28, 1, 2, 540, 537, 3, 2, 2, 2, 540, 539, 3, 2, 2, 2, 541,
	55, 3, 2, 2, 2, 542, 543, 7, 22, 2, 2, 543, 544, 7, 62, 2, 2, 544, 545,
	5, 56, 29, 2, 545, 546, 7, 63, 2, 2, 546, 547, 8, 29, 1, 2, 547, 555, 3,
	2, 2, 2, 548, 549, 7, 22, 2, 2, 549, 550, 7, 62, 2, 2, 550, 551, 5, 62,
	32, 2, 551, 552, 7, 63, 2, 2, 552, 553, 8, 29, 1, 2, 553, 555, 3, 2, 2,
	2, 554, 542, 3, 2, 2, 2, 554, 548, 3, 2, 2, 2, 555, 57, 3, 2, 2, 2, 556,
	557, 7, 69, 2, 2, 557, 558, 5, 58, 30, 2, 558, 559, 7, 73, 2, 2, 559, 560,
	5, 90, 46, 2, 560, 561, 7, 70, 2, 2, 561, 562, 8, 30, 1, 2, 562, 571, 3,
	2, 2, 2, 563, 564, 7, 69, 2, 2, 564, 565, 5, 62, 32, 2, 565, 566, 7, 73,
	2, 2, 566, 567, 5, 90, 46, 2, 567, 568, 7, 70, 2, 2, 568, 569, 8, 30, 1,
	2, 569, 571, 3, 2, 2, 2, 570, 556, 3, 2, 2, 2, 570, 563, 3, 2, 2, 2, 571,
	59, 3, 2, 2, 2, 572, 573, 7, 74, 2, 2, 573, 574, 7, 4, 2, 2, 574, 592,
	8, 31, 1, 2, 575, 576, 7, 74, 2, 2, 576, 577, 7, 5, 2, 2, 577, 592, 8,
	31, 1, 2, 578, 579, 7, 74, 2, 2, 579, 580, 7, 6, 2, 2, 580, 592, 8, 31,
	1, 2, 581, 582, 7, 74, 2, 2, 582, 583, 7, 7, 2, 2, 583, 592, 8, 31, 1,
	2, 584, 585, 7, 74, 2, 2, 585, 586, 7, 8, 2, 2, 586, 592, 8, 31, 1, 2,
	587, 588, 7, 74, 2, 2, 588, 589, 7, 9, 2, 2, 589, 592, 8, 31, 1, 2, 590,
	592, 8, 31, 1, 2, 591, 572, 3, 2, 2, 2, 591, 575, 3, 2, 2, 2, 591, 578,
	3, 2, 2, 2, 591, 581, 3, 2, 2, 2, 591, 584, 3, 2, 2, 2, 591, 587, 3, 2,
	2, 2, 591, 590, 3, 2, 2, 2, 592, 61, 3, 2, 2, 2, 593, 594, 7, 4, 2, 2,
	594, 609, 8, 32, 1, 2, 595, 596, 7, 5, 2, 2, 596, 609, 8, 32, 1, 2, 597,
	598, 7, 6, 2, 2, 598, 609, 8, 32, 1, 2, 599, 600, 7, 7, 2, 2, 600, 609,
	8, 32, 1, 2, 601, 602, 7, 8, 2, 2, 602, 609, 8, 32, 1, 2, 603, 604, 7,
	9, 2, 2, 604, 609, 8, 32, 1, 2, 605, 606, 7, 52, 2, 2, 606, 609, 8, 32,
	1, 2, 607, 609, 8, 32, 1, 2, 608, 593, 3, 2, 2, 2, 608, 595, 3, 2, 2, 2,
	608, 597, 3, 2, 2, 2, 608, 599, 3, 2, 2, 2, 608, 601, 3, 2, 2, 2, 608,
	603, 3, 2, 2, 2, 608, 605, 3, 2, 2, 2, 608, 607, 3, 2, 2, 2, 609, 63, 3,
	2, 2, 2, 610, 611, 7, 4, 2, 2, 611, 626, 8, 33, 1, 2, 612, 613, 7, 5, 2,
	2, 613, 626, 8, 33, 1, 2, 614, 615, 7, 6, 2, 2, 615, 626, 8, 33, 1, 2,
	616, 617, 7, 7, 2, 2, 617, 626, 8, 33, 1, 2, 618, 619, 7, 8, 2, 2, 619,
	626, 8, 33, 1, 2, 620, 621, 7, 9, 2, 2, 621, 626, 8, 33, 1, 2, 622, 623,
	7, 52, 2, 2, 623, 626, 8, 33, 1, 2, 624, 626, 8, 33, 1, 2, 625, 610, 3,
	2, 2, 2, 625, 612, 3, 2, 2, 2, 625, 614, 3, 2, 2, 2, 625, 616, 3, 2, 2,
	2, 625, 618, 3, 2, 2, 2, 625, 620, 3, 2, 2, 2, 625, 622, 3, 2, 2, 2, 625,
	624, 3, 2, 2, 2, 626, 65, 3, 2, 2, 2, 627, 628, 8, 34, 1, 2, 628, 629,
	5, 68, 35, 2, 629, 630, 8, 34, 1, 2, 630, 638, 3, 2, 2, 2, 631, 632, 12,
	4, 2, 2, 632, 633, 7, 75, 2, 2, 633, 634, 5, 68, 35, 2, 634, 635, 8, 34,
	1, 2, 635, 637, 3, 2, 2, 2, 636, 631, 3, 2, 2, 2, 637, 640, 3, 2, 2, 2,
	638, 636, 3, 2, 2, 2, 638, 639, 3, 2, 2, 2, 639, 67, 3, 2, 2, 2, 640, 638,
	3, 2, 2, 2, 641, 642, 7, 52, 2, 2, 642, 643, 7, 74, 2, 2, 643, 644, 5,
	90, 46, 2, 644, 645, 8, 35, 1, 2, 645, 69, 3, 2, 2, 2, 646, 647, 7, 52,
	2, 2, 647, 648, 7, 76, 2, 2, 648, 649, 7, 26, 2, 2, 649, 650, 7, 71, 2,
	2, 650, 651, 5, 90, 46, 2, 651, 652, 7, 72, 2, 2, 652, 653, 7, 73, 2, 2,
	653, 654, 8, 36, 1, 2, 654, 676, 3, 2, 2, 2, 655, 656, 7, 52, 2, 2, 656,
	657, 7, 76, 2, 2, 657, 658, 7, 29, 2, 2, 658, 659, 7, 71, 2, 2, 659, 660,
	5, 90, 46, 2, 660, 661, 7, 75, 2, 2, 661, 662, 5, 90, 46, 2, 662, 663,
	7, 72, 2, 2, 663, 664, 7, 73, 2, 2, 664, 665, 8, 36, 1, 2, 665, 676, 3,
	2, 2, 2, 666, 667, 7, 52, 2, 2, 667, 668, 7, 76, 2, 2, 668, 669, 7, 27,
	2, 2, 669, 670, 7, 71, 2, 2, 670, 671, 5, 90, 46, 2, 671, 672, 7, 72, 2,
	2, 672, 673, 7, 73, 2, 2, 673, 674, 8, 36, 1, 2, 674, 676, 3, 2, 2, 2,
	675, 646, 3, 2, 2, 2, 675, 655, 3, 2, 2, 2, 675, 666, 3, 2, 2, 2, 676,
	71, 3, 2, 2, 2, 677, 678, 7, 52, 2, 2, 678, 679, 7, 77, 2, 2, 679, 680,
	5, 90, 46, 2, 680, 681, 7, 73, 2, 2, 681, 682, 8, 37, 1, 2, 682, 73, 3,
	2, 2, 2, 683, 684, 7, 52, 2, 2, 684, 685, 7, 76, 2, 2, 685, 686, 7, 52,
	2, 2, 686, 687, 7, 77, 2, 2, 687, 688, 5, 90, 46, 2, 688, 689, 7, 73, 2,
	2, 689, 690, 8, 38, 1, 2, 690, 75, 3, 2, 2, 2, 691, 692, 7, 52, 2, 2, 692,
	693, 7, 71, 2, 2, 693, 694, 5, 92, 47, 2, 694, 695, 7, 72, 2, 2, 695, 696,
	7, 73, 2, 2, 696, 697, 8, 39, 1, 2, 697, 77, 3, 2, 2, 2, 698, 699, 5, 80,
	41, 2, 699, 700, 8, 40, 1, 2, 700, 708, 3, 2, 2, 2, 701, 702, 5, 82, 42,
	2, 702, 703, 8, 40, 1, 2, 703, 708, 3, 2, 2, 2, 704, 705, 5, 84, 43, 2,
	705, 706, 8, 40, 1, 2, 706, 708, 3, 2, 2, 2, 707, 698, 3, 2, 2, 2, 707,
	701, 3, 2, 2, 2, 707, 704, 3, 2, 2, 2, 708, 79, 3, 2, 2, 2, 709, 710, 7,
	41, 2, 2, 710, 711, 7, 73, 2, 2, 711, 722, 8, 41, 1, 2, 712, 713, 7, 41,
	2, 2, 713, 714, 5, 90, 46, 2, 714, 715, 7, 73, 2, 2, 715, 716, 8, 41, 1,
	2, 716, 722, 3, 2, 2, 2, 717, 718, 5, 90, 46, 2, 718, 719, 7, 73, 2, 2,
	719, 720, 8, 41, 1, 2, 720, 722, 3, 2, 2, 2, 721, 709, 3, 2, 2, 2, 721,
	712, 3, 2, 2, 2, 721, 717, 3, 2, 2, 2, 722, 81, 3, 2, 2, 2, 723, 724, 7,
	39, 2, 2, 724, 725, 7, 73, 2, 2, 725, 732, 8, 42, 1, 2, 726, 727, 7, 39,
	2, 2, 727, 728, 5, 90, 46, 2, 728, 729, 7, 73, 2, 2, 729, 730, 8, 42, 1,
	2, 730, 732, 3, 2, 2, 2, 731, 723, 3, 2, 2, 2, 731, 726, 3, 2, 2, 2, 732,
	83, 3, 2, 2, 2, 733, 734, 7, 40, 2, 2, 734, 735, 7, 73, 2, 2, 735, 736,
	8, 43, 1, 2, 736, 85, 3, 2, 2, 2, 737, 738, 8, 44, 1, 2, 738, 739, 5, 88,
	45, 2, 739, 740, 8, 44, 1, 2, 740, 747, 3, 2, 2, 2, 741, 742, 12, 4, 2,
	2, 742, 743, 5, 88, 45, 2, 743, 744, 8, 44, 1, 2, 744, 746, 3, 2, 2, 2,
	745, 741, 3, 2, 2, 2, 746, 749, 3, 2, 2, 2, 747, 745, 3, 2, 2, 2, 747,
	748, 3, 2, 2, 2, 748, 87, 3, 2, 2, 2, 749, 747, 3, 2, 2, 2, 750, 751, 5,
	50, 26, 2, 751, 752, 8, 45, 1, 2, 752, 784, 3, 2, 2, 2, 753, 754, 5, 32,
	17, 2, 754, 755, 8, 45, 1, 2, 755, 784, 3, 2, 2, 2, 756, 757, 5, 36, 19,
	2, 757, 758, 8, 45, 1, 2, 758, 784, 3, 2, 2, 2, 759, 760, 5, 44, 23, 2,
	760, 761, 8, 45, 1, 2, 761, 784, 3, 2, 2, 2, 762, 763, 5, 46, 24, 2, 763,
	764, 8, 45, 1, 2, 764, 784, 3, 2, 2, 2, 765, 766, 5, 52, 27, 2, 766, 767,
	8, 45, 1, 2, 767, 784, 3, 2, 2, 2, 768, 769, 5, 72, 37, 2, 769, 770, 8,
	45, 1, 2, 770, 784, 3, 2, 2, 2, 771, 772, 5, 74, 38, 2, 772, 773, 8, 45,
	1, 2, 773, 784, 3, 2, 2, 2, 774, 775, 5, 78, 40, 2, 775, 776, 8, 45, 1,
	2, 776, 784, 3, 2, 2, 2, 777, 778, 5, 76, 39, 2, 778, 779, 8, 45, 1, 2,
	779, 784, 3, 2, 2, 2, 780, 781, 5, 70, 36, 2, 781, 782, 8, 45, 1, 2, 782,
	784, 3, 2, 2, 2, 783, 750, 3, 2, 2, 2, 783, 753, 3, 2, 2, 2, 783, 756,
	3, 2, 2, 2, 783, 759, 3, 2, 2, 2, 783, 762, 3, 2, 2, 2, 783, 765, 3, 2,
	2, 2, 783, 768, 3, 2, 2, 2, 783, 771, 3, 2, 2, 2, 783, 774, 3, 2, 2, 2,
	783, 777, 3, 2, 2, 2, 783, 780, 3, 2, 2, 2, 784, 89, 3, 2, 2, 2, 785, 786,
	5, 118, 60, 2, 786, 787, 8, 46, 1, 2, 787, 833, 3, 2, 2, 2, 788, 789, 5,
	116, 59, 2, 789, 790, 8, 46, 1, 2, 790, 833, 3, 2, 2, 2, 791, 792, 5, 120,
	61, 2, 792, 793, 8, 46, 1, 2, 793, 833, 3, 2, 2, 2, 794, 795, 5, 122, 62,
	2, 795, 796, 8, 46, 1, 2, 796, 833, 3, 2, 2, 2, 797, 798, 5, 124, 63, 2,
	798, 799, 8, 46, 1, 2, 799, 833, 3, 2, 2, 2, 800, 801, 5, 32, 17, 2, 801,
	802, 8, 46, 1, 2, 802, 833, 3, 2, 2, 2, 803, 804, 5, 36, 19, 2, 804, 805,
	8, 46, 1, 2, 805, 833, 3, 2, 2, 2, 806, 807, 5, 44, 23, 2, 807, 808, 8,
	46, 1, 2, 808, 833, 3, 2, 2, 2, 809, 810, 7, 71, 2, 2, 810, 811, 5, 90,
	46, 2, 811, 812, 7, 72, 2, 2, 812, 813, 8, 46, 1, 2, 813, 833, 3, 2, 2,
	2, 814, 815, 5, 94, 48, 2, 815, 816, 8, 46, 1, 2, 816, 833, 3, 2, 2, 2,
	817, 818, 5, 100, 51, 2, 818, 819, 8, 46, 1, 2, 819, 833, 3, 2, 2, 2, 820,
	821, 5, 106, 54, 2, 821, 822, 8, 46, 1, 2, 822, 833, 3, 2, 2, 2, 823, 824,
	5, 112, 57, 2, 824, 825, 8, 46, 1, 2, 825, 833, 3, 2, 2, 2, 826, 827, 5,
	114, 58, 2, 827, 828, 8, 46, 1, 2, 828, 833, 3, 2, 2, 2, 829, 830, 5, 126,
	64, 2, 830, 831, 8, 46, 1, 2, 831, 833, 3, 2, 2, 2, 832, 785, 3, 2, 2,
	2, 832, 788, 3, 2, 2, 2, 832, 791, 3, 2, 2, 2, 832, 794, 3, 2, 2, 2, 832,
	797, 3, 2, 2, 2, 832, 800, 3, 2, 2, 2, 832, 803, 3, 2, 2, 2, 832, 806,
	3, 2, 2, 2, 832, 809, 3, 2, 2, 2, 832, 814, 3, 2, 2, 2, 832, 817, 3, 2,
	2, 2, 832, 820, 3, 2, 2, 2, 832, 823, 3, 2, 2, 2, 832, 826, 3, 2, 2, 2,
	832, 829, 3, 2, 2, 2, 833, 91, 3, 2, 2, 2, 834, 835, 8, 47, 1, 2, 835,
	836, 5, 90, 46, 2, 836, 837, 8, 47, 1, 2, 837, 845, 3, 2, 2, 2, 838, 839,
	12, 4, 2, 2, 839, 840, 7, 75, 2, 2, 840, 841, 5, 90, 46, 2, 841, 842, 8,
	47, 1, 2, 842, 844, 3, 2, 2, 2, 843, 838, 3, 2, 2, 2, 844, 847, 3, 2, 2,
	2, 845, 843, 3, 2, 2, 2, 845, 846, 3, 2, 2, 2, 846, 93, 3, 2, 2, 2, 847,
	845, 3, 2, 2, 2, 848, 849, 5, 96, 49, 2, 849, 850, 8, 48, 1, 2, 850, 855,
	3, 2, 2, 2, 851, 852, 5, 98, 50, 2, 852, 853, 8, 48, 1, 2, 853, 855, 3,
	2, 2, 2, 854, 848, 3, 2, 2, 2, 854, 851, 3, 2, 2, 2, 855, 95, 3, 2, 2,
	2, 856, 857, 7, 23, 2, 2, 857, 858, 7, 69, 2, 2, 858, 859, 5, 92, 47, 2,
	859, 860, 7, 70, 2, 2, 860, 861, 8, 49, 1, 2, 861, 97, 3, 2, 2, 2, 862,
	863, 7, 23, 2, 2, 863, 864, 7, 69, 2, 2, 864, 865, 5, 90, 46, 2, 865, 866,
	7, 73, 2, 2, 866, 867, 5, 90, 46, 2, 867, 868, 7, 70, 2, 2, 868, 869, 8,
	50, 1, 2, 869, 99, 3, 2, 2, 2, 870, 871, 5, 102, 52, 2, 871, 872, 8, 51,
	1, 2, 872, 877, 3, 2, 2, 2, 873, 874, 5, 104, 53, 2, 874, 875, 8, 51, 1,
	2, 875, 877, 3, 2, 2, 2, 876, 870, 3, 2, 2, 2, 876, 873, 3, 2, 2, 2, 877,
	101, 3, 2, 2, 2, 878, 879, 7, 69, 2, 2, 879, 880, 5, 92, 47, 2, 880, 881,
	7, 70, 2, 2, 881, 882, 8, 52, 1, 2, 882, 103, 3, 2, 2, 2, 883, 884, 7,
	69, 2, 2, 884, 885, 5, 90, 46, 2, 885, 886, 7, 73, 2, 2, 886, 887, 5, 90,
	46, 2, 887, 888, 7, 70, 2, 2, 888, 889, 8, 53, 1, 2, 889, 105, 3, 2, 2,
	2, 890, 891, 7, 52, 2, 2, 891, 892, 5, 108, 55, 2, 892, 893, 8, 54, 1,
	2, 893, 107, 3, 2, 2, 2, 894, 895, 8, 55, 1, 2, 895, 896, 5, 110, 56, 2,
	896, 897, 8, 55, 1, 2, 897, 904, 3, 2, 2, 2, 898, 899, 12, 4, 2, 2, 899,
	900, 5, 110, 56, 2, 900, 901, 8, 55, 1, 2, 901, 903, 3, 2, 2, 2, 902, 898,
	3, 2, 2, 2, 903, 906, 3, 2, 2, 2, 904, 902, 3, 2, 2, 2, 904, 905, 3, 2,
	2, 2, 905, 109, 3, 2, 2, 2, 906, 904, 3, 2, 2, 2, 907, 908, 7, 69, 2, 2,
	908, 909, 5, 90, 46, 2, 909, 910, 7, 70, 2, 2, 910, 911, 8, 56, 1, 2, 911,
	111, 3, 2, 2, 2, 912, 913, 7, 52, 2, 2, 913, 914, 7, 62, 2, 2, 914, 915,
	5, 90, 46, 2, 915, 916, 7, 63, 2, 2, 916, 917, 8, 57, 1, 2, 917, 113, 3,
	2, 2, 2, 918, 919, 7, 52, 2, 2, 919, 920, 7, 76, 2, 2, 920, 921, 7, 52,
	2, 2, 921, 922, 8, 58, 1, 2, 922, 115, 3, 2, 2, 2, 923, 924, 7, 52, 2,
	2, 924, 925, 7, 76, 2, 2, 925, 926, 7, 25, 2, 2, 926, 932, 8, 59, 1, 2,
	927, 928, 7, 52, 2, 2, 928, 929, 7, 76, 2, 2, 929, 930, 7, 30, 2, 2, 930,
	932, 8, 59, 1, 2, 931, 923, 3, 2, 2, 2, 931, 927, 3, 2, 2, 2, 932, 117,
	3, 2, 2, 2, 933, 934, 8, 60, 1, 2, 934, 935, 5, 120, 61, 2, 935, 936, 8,
	60, 1, 2, 936, 959, 3, 2, 2, 2, 937, 938, 12, 8, 2, 2, 938, 939, 7, 76,
	2, 2, 939, 940, 7, 17, 2, 2, 940, 958, 8, 60, 1, 2, 941, 942, 12, 7, 2,
	2, 942, 943, 7, 76, 2, 2, 943, 944, 7, 18, 2, 2, 944, 958, 8, 60, 1, 2,
	945, 946, 12, 6, 2, 2, 946, 947, 7, 76, 2, 2, 947, 948, 7, 19, 2, 2, 948,
	958, 8, 60, 1, 2, 949, 950, 12, 5, 2, 2, 950, 951, 7, 76, 2, 2, 951, 952,
	7, 20, 2, 2, 952, 958, 8, 60, 1, 2, 953, 954, 12, 4, 2, 2, 954, 955, 7,
	76, 2, 2, 955, 956, 7, 21, 2, 2, 956, 958, 8, 60, 1, 2, 957, 937, 3, 2,
	2, 2, 957, 941, 3, 2, 2, 2, 957, 945, 3, 2, 2, 2, 957, 949, 3, 2, 2, 2,
	957, 953, 3, 2, 2, 2, 958, 961, 3, 2, 2, 2, 959, 957, 3, 2, 2, 2, 959,
	960, 3, 2, 2, 2, 960, 119, 3, 2, 2, 2, 961, 959, 3, 2, 2, 2, 962, 963,
	8, 61, 1, 2, 963, 964, 7, 66, 2, 2, 964, 965, 5, 90, 46, 2, 965, 966, 8,
	61, 1, 2, 966, 971, 3, 2, 2, 2, 967, 968, 5, 122, 62, 2, 968, 969, 8, 61,
	1, 2, 969, 971, 3, 2, 2, 2, 970, 962, 3, 2, 2, 2, 970, 967, 3, 2, 2, 2,
	971, 979, 3, 2, 2, 2, 972, 973, 12, 4, 2, 2, 973, 974, 9, 2, 2, 2, 974,
	975, 5, 120, 61, 5, 975, 976, 8, 61, 1, 2, 976, 978, 3, 2, 2, 2, 977, 972,
	3, 2, 2, 2, 978, 981, 3, 2, 2, 2, 979, 977, 3, 2, 2, 2, 979, 980, 3, 2,
	2, 2, 980, 121, 3, 2, 2, 2, 981, 979, 3, 2, 2, 2, 982, 983, 8, 62, 1, 2,
	983, 984, 5, 124, 63, 2, 984, 985, 8, 62, 1, 2, 985, 993, 3, 2, 2, 2, 986,
	987, 12, 4, 2, 2, 987, 988, 9, 3, 2, 2, 988, 989, 5, 122, 62, 5, 989, 990,
	8, 62, 1, 2, 990, 992, 3, 2, 2, 2, 991, 986, 3, 2, 2, 2, 992, 995, 3, 2,
	2, 2, 993, 991, 3, 2, 2, 2, 993, 994, 3, 2, 2, 2, 994, 123, 3, 2, 2, 2,
	995, 993, 3, 2, 2, 2, 996, 997, 8, 63, 1, 2, 997, 998, 7, 54, 2, 2, 998,
	999, 5, 124, 63, 8, 999, 1000, 8, 63, 1, 2, 1000, 1023, 3, 2, 2, 2, 1001,
	1002, 7, 4, 2, 2, 1002, 1003, 7, 44, 2, 2, 1003, 1004, 7, 71, 2, 2, 1004,
	1005, 5, 124, 63, 2, 1005, 1006, 7, 75, 2, 2, 1006, 1007, 5, 124, 63, 2,
	1007, 1008, 7, 72, 2, 2, 1008, 1009, 8, 63, 1, 2, 1009, 1023, 3, 2, 2,
	2, 1010, 1011, 7, 5, 2, 2, 1011, 1012, 7, 45, 2, 2, 1012, 1013, 7, 71,
	2, 2, 1013, 1014, 5, 124, 63, 2, 1014, 1015, 7, 75, 2, 2, 1015, 1016, 5,
	124, 63, 2, 1016, 1017, 7, 72, 2, 2, 1017, 1018, 8, 63, 1, 2, 1018, 1023,
	3, 2, 2, 2, 1019, 1020, 5, 126, 64, 2, 1020, 1021, 8, 63, 1, 2, 1021, 1023,
	3, 2, 2, 2, 1022, 996, 3, 2, 2, 2, 1022, 1001, 3, 2, 2, 2, 1022, 1010,
	3, 2, 2, 2, 1022, 1019, 3, 2, 2, 2, 1023, 1036, 3, 2, 2, 2, 1024, 1025,
	12, 5, 2, 2, 1025, 1026, 9, 4, 2, 2, 1026, 1027, 5, 124, 63, 6, 1027, 1028,
	8, 63, 1, 2, 1028, 1035, 3, 2, 2, 2, 1029, 1030, 12, 4, 2, 2, 1030, 1031,
	9, 5, 2, 2, 1031, 1032, 5, 124, 63, 5, 1032, 1033, 8, 63, 1, 2, 1033, 1035,
	3, 2, 2, 2, 1034, 1024, 3, 2, 2, 2, 1034, 1029, 3, 2, 2, 2, 1035, 1038,
	3, 2, 2, 2, 1036, 1034, 3, 2, 2, 2, 1036, 1037, 3, 2, 2, 2, 1037, 125,
	3, 2, 2, 2, 1038, 1036, 3, 2, 2, 2, 1039, 1040, 5, 130, 66, 2, 1040, 1041,
	8, 64, 1, 2, 1041, 1046, 3, 2, 2, 2, 1042, 1043, 5, 128, 65, 2, 1043, 1044,
	8, 64, 1, 2, 1044, 1046, 3, 2, 2, 2, 1045, 1039, 3, 2, 2, 2, 1045, 1042,
	3, 2, 2, 2, 1046, 127, 3, 2, 2, 2, 1047, 1048, 7, 49, 2, 2, 1048, 1049,
	7, 10, 2, 2, 1049, 1050, 5, 64, 33, 2, 1050, 1051, 8, 65, 1, 2, 1051, 1078,
	3, 2, 2, 2, 1052, 1053, 7, 48, 2, 2, 1053, 1054, 7, 10, 2, 2, 1054, 1055,
	5, 64, 33, 2, 1055, 1056, 8, 65, 1, 2, 1056, 1078, 3, 2, 2, 2, 1057, 1058,
	7, 50, 2, 2, 1058, 1059, 7, 10, 2, 2, 1059, 1060, 5, 64, 33, 2, 1060, 1061,
	8, 65, 1, 2, 1061, 1078, 3, 2, 2, 2, 1062, 1063, 7, 51, 2, 2, 1063, 1064,
	7, 10, 2, 2, 1064, 1065, 5, 64, 33, 2, 1065, 1066, 8, 65, 1, 2, 1066, 1078,
	3, 2, 2, 2, 1067, 1068, 7, 46, 2, 2, 1068, 1069, 7, 10, 2, 2, 1069, 1070,
	5, 64, 33, 2, 1070, 1071, 8, 65, 1, 2, 1071, 1078, 3, 2, 2, 2, 1072, 1073,
	7, 47, 2, 2, 1073, 1074, 7, 10, 2, 2, 1074, 1075, 5, 64, 33, 2, 1075, 1076,
	8, 65, 1, 2, 1076, 1078, 3, 2, 2, 2, 1077, 1047, 3, 2, 2, 2, 1077, 1052,
	3, 2, 2, 2, 1077, 1057, 3, 2, 2, 2, 1077, 1062, 3, 2, 2, 2, 1077, 1067,
	3, 2, 2, 2, 1077, 1072, 3, 2, 2, 2, 1078, 129, 3, 2, 2, 2, 1079, 1080,
	7, 49, 2, 2, 1080, 1094, 8, 66, 1, 2, 1081, 1082, 7, 48, 2, 2, 1082, 1094,
	8, 66, 1, 2, 1083, 1084, 7, 50, 2, 2, 1084, 1094, 8, 66, 1, 2, 1085, 1086,
	7, 52, 2, 2, 1086, 1094, 8, 66, 1, 2, 1087, 1088, 7, 51, 2, 2, 1088, 1094,
	8, 66, 1, 2, 1089, 1090, 7, 46, 2, 2, 1090, 1094, 8, 66, 1, 2, 1091, 1092,
	7, 47, 2, 2, 1092, 1094, 8, 66, 1, 2, 1093, 1079, 3, 2, 2, 2, 1093, 1081,
	3, 2, 2, 2, 1093, 1083, 3, 2, 2, 2, 1093, 1085, 3, 2, 2, 2, 1093, 1087,
	3, 2, 2, 2, 1093, 1089, 3, 2, 2, 2, 1093, 1091, 3, 2, 2, 2, 1094, 131,
	3, 2, 2, 2, 50, 138, 155, 175, 190, 210, 250, 255, 268, 294, 301, 324,
	353, 375, 394, 407, 444, 462, 535, 540, 554, 570, 591, 608, 625, 638, 675,
	707, 721, 731, 747, 783, 832, 845, 854, 876, 904, 931, 957, 959, 970, 979,
	993, 1022, 1034, 1036, 1045, 1077, 1093,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "'pub'", "'i64'", "'f64'", "'bool'", "'char'", "'String'", "'&str'",
	"'as'", "'println!'", "'let'", "'mut'", "'&mut'", "'fn'", "'main'", "'abs'",
	"'sqrt'", "'to_string()'", "'to_owned()'", "'clone()'", "'Vec'", "'vec!'",
	"'::new()'", "'len()'", "'push'", "'remove'", "'&contains'", "'insert'",
	"'capacity()'", "'::with_capacity'", "'if'", "'else'", "'match'", "'loop'",
	"'while'", "'for'", "'in'", "'break'", "'continue'", "'return'", "'Struct'",
	"'mod'", "'::pow'", "'::powf'", "'true'", "'false'", "", "", "", "", "",
	"'+'", "'-'", "'*'", "'/'", "'%'", "'<='", "'>='", "'=='", "'!='", "'<'",
	"'>'", "'||'", "'&&'", "'!'", "'{'", "'}'", "'['", "']'", "'('", "')'",
	"';'", "':'", "','", "'.'", "'='", "'|'", "'_'", "'&'",
}
var symbolicNames = []string{
	"", "TK_PUBLICO", "TK_TIPOINT", "TK_TIPOFLOAT", "TK_TIPOBOOL", "TK_TIPOCHAR",
	"TK_TIPOSTRING", "TK_DIRSTRING", "TK_AS", "TK_PRINTLN", "TK_LET", "TK_MUT",
	"TK_DIRMUT", "TK_FUNCION", "TK_MAIN", "TK_ABS", "TK_SQRT", "TK_TOSTRING",
	"TK_TOOWNED", "TK_CLONE", "TK_VECTOR", "TK_VECT", "TK_NEW", "TK_LEN", "TK_PUSH",
	"TK_REMOVE", "TK_CONTAINS", "TK_INSERT", "TK_CAPACITY", "TK_WCAPACITY",
	"TK_IF", "TK_ELSE", "TK_MATCH", "TK_LOOP", "TK_WHILE", "TK_FOR", "TK_IN",
	"TK_BREAK", "TK_CONTINUE", "TK_RETURN", "TK_STRUCT", "TK_MOD", "TK_POW",
	"TK_POWF", "TK_TRUE", "TK_FALSE", "TK_FLOAT", "TK_ENTERO", "TK_CADENA",
	"TK_CARACTER", "TK_IDENTIFICADOR", "TK_SUMA", "TK_RESTA", "TK_MULTI", "TK_DIVI",
	"TK_MODULO", "TK_MENORIGUAL", "TK_MAYORIGUAL", "TK_IGUALDAD", "TK_DESIGUALDAD",
	"TK_MENOR", "TK_MAYOR", "TK_OR", "TK_AND", "TK_NOT", "TK_LI", "TK_LD",
	"TK_CI", "TK_CD", "TK_PI", "TK_PD", "TK_PYC", "TK_DP", "TK_COMA", "TK_PUNTO",
	"TK_IGUAL", "TK_BARRA", "TK_GBAJO", "TK_REFER", "COMENTARIO_MUL", "COMENTARIO_LIN",
	"WHITESPACE",
}

var ruleNames = []string{
	"start", "instrucciones", "instruccion", "modulos", "l_modulos", "modulitos",
	"stucts", "l_structs", "defstruct", "funcas", "publi", "parametros", "definiciones",
	"valref", "tipos_funciones", "sent_if", "sent_ifelse", "sent_match", "l_matches",
	"matches", "l_mat_con", "loop", "c_while", "for_in", "imprimir", "declaracion",
	"mutable", "tamvector", "tamarre", "tipado", "tipos_vectorarre", "tipos",
	"l_asigstruct", "asignacionstruct", "fn_vector", "asignacion", "asignar_struct_mutable",
	"llamada", "transferencia", "retorno", "romper", "continuar", "l_bloque",
	"bloque", "expression", "list_expres", "vectores_inicio", "inicio_vect",
	"resumen_vect", "arreglos_inicio", "inicializando_arreglo", "resumen_arre",
	"accesso_arreglo", "lista_acceso", "access", "acceso_vector", "ingreso_struct",
	"nativas_vector", "fun_nativas", "expre_logica", "expre_relacional", "expre_aritmetica",
	"valores", "casteo_datos", "datos",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type db_rustparser struct {
	*antlr.BaseParser
}

func Newdb_rustparser(input antlr.TokenStream) *db_rustparser {
	this := new(db_rustparser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "db_rustparser.g4"

	return this
}

// db_rustparser tokens.
const (
	db_rustparserEOF              = antlr.TokenEOF
	db_rustparserTK_PUBLICO       = 1
	db_rustparserTK_TIPOINT       = 2
	db_rustparserTK_TIPOFLOAT     = 3
	db_rustparserTK_TIPOBOOL      = 4
	db_rustparserTK_TIPOCHAR      = 5
	db_rustparserTK_TIPOSTRING    = 6
	db_rustparserTK_DIRSTRING     = 7
	db_rustparserTK_AS            = 8
	db_rustparserTK_PRINTLN       = 9
	db_rustparserTK_LET           = 10
	db_rustparserTK_MUT           = 11
	db_rustparserTK_DIRMUT        = 12
	db_rustparserTK_FUNCION       = 13
	db_rustparserTK_MAIN          = 14
	db_rustparserTK_ABS           = 15
	db_rustparserTK_SQRT          = 16
	db_rustparserTK_TOSTRING      = 17
	db_rustparserTK_TOOWNED       = 18
	db_rustparserTK_CLONE         = 19
	db_rustparserTK_VECTOR        = 20
	db_rustparserTK_VECT          = 21
	db_rustparserTK_NEW           = 22
	db_rustparserTK_LEN           = 23
	db_rustparserTK_PUSH          = 24
	db_rustparserTK_REMOVE        = 25
	db_rustparserTK_CONTAINS      = 26
	db_rustparserTK_INSERT        = 27
	db_rustparserTK_CAPACITY      = 28
	db_rustparserTK_WCAPACITY     = 29
	db_rustparserTK_IF            = 30
	db_rustparserTK_ELSE          = 31
	db_rustparserTK_MATCH         = 32
	db_rustparserTK_LOOP          = 33
	db_rustparserTK_WHILE         = 34
	db_rustparserTK_FOR           = 35
	db_rustparserTK_IN            = 36
	db_rustparserTK_BREAK         = 37
	db_rustparserTK_CONTINUE      = 38
	db_rustparserTK_RETURN        = 39
	db_rustparserTK_STRUCT        = 40
	db_rustparserTK_MOD           = 41
	db_rustparserTK_POW           = 42
	db_rustparserTK_POWF          = 43
	db_rustparserTK_TRUE          = 44
	db_rustparserTK_FALSE         = 45
	db_rustparserTK_FLOAT         = 46
	db_rustparserTK_ENTERO        = 47
	db_rustparserTK_CADENA        = 48
	db_rustparserTK_CARACTER      = 49
	db_rustparserTK_IDENTIFICADOR = 50
	db_rustparserTK_SUMA          = 51
	db_rustparserTK_RESTA         = 52
	db_rustparserTK_MULTI         = 53
	db_rustparserTK_DIVI          = 54
	db_rustparserTK_MODULO        = 55
	db_rustparserTK_MENORIGUAL    = 56
	db_rustparserTK_MAYORIGUAL    = 57
	db_rustparserTK_IGUALDAD      = 58
	db_rustparserTK_DESIGUALDAD   = 59
	db_rustparserTK_MENOR         = 60
	db_rustparserTK_MAYOR         = 61
	db_rustparserTK_OR            = 62
	db_rustparserTK_AND           = 63
	db_rustparserTK_NOT           = 64
	db_rustparserTK_LI            = 65
	db_rustparserTK_LD            = 66
	db_rustparserTK_CI            = 67
	db_rustparserTK_CD            = 68
	db_rustparserTK_PI            = 69
	db_rustparserTK_PD            = 70
	db_rustparserTK_PYC           = 71
	db_rustparserTK_DP            = 72
	db_rustparserTK_COMA          = 73
	db_rustparserTK_PUNTO         = 74
	db_rustparserTK_IGUAL         = 75
	db_rustparserTK_BARRA         = 76
	db_rustparserTK_GBAJO         = 77
	db_rustparserTK_REFER         = 78
	db_rustparserCOMENTARIO_MUL   = 79
	db_rustparserCOMENTARIO_LIN   = 80
	db_rustparserWHITESPACE       = 81
)

// db_rustparser rules.
const (
	db_rustparserRULE_start                  = 0
	db_rustparserRULE_instrucciones          = 1
	db_rustparserRULE_instruccion            = 2
	db_rustparserRULE_modulos                = 3
	db_rustparserRULE_l_modulos              = 4
	db_rustparserRULE_modulitos              = 5
	db_rustparserRULE_stucts                 = 6
	db_rustparserRULE_l_structs              = 7
	db_rustparserRULE_defstruct              = 8
	db_rustparserRULE_funcas                 = 9
	db_rustparserRULE_publi                  = 10
	db_rustparserRULE_parametros             = 11
	db_rustparserRULE_definiciones           = 12
	db_rustparserRULE_valref                 = 13
	db_rustparserRULE_tipos_funciones        = 14
	db_rustparserRULE_sent_if                = 15
	db_rustparserRULE_sent_ifelse            = 16
	db_rustparserRULE_sent_match             = 17
	db_rustparserRULE_l_matches              = 18
	db_rustparserRULE_matches                = 19
	db_rustparserRULE_l_mat_con              = 20
	db_rustparserRULE_loop                   = 21
	db_rustparserRULE_c_while                = 22
	db_rustparserRULE_for_in                 = 23
	db_rustparserRULE_imprimir               = 24
	db_rustparserRULE_declaracion            = 25
	db_rustparserRULE_mutable                = 26
	db_rustparserRULE_tamvector              = 27
	db_rustparserRULE_tamarre                = 28
	db_rustparserRULE_tipado                 = 29
	db_rustparserRULE_tipos_vectorarre       = 30
	db_rustparserRULE_tipos                  = 31
	db_rustparserRULE_l_asigstruct           = 32
	db_rustparserRULE_asignacionstruct       = 33
	db_rustparserRULE_fn_vector              = 34
	db_rustparserRULE_asignacion             = 35
	db_rustparserRULE_asignar_struct_mutable = 36
	db_rustparserRULE_llamada                = 37
	db_rustparserRULE_transferencia          = 38
	db_rustparserRULE_retorno                = 39
	db_rustparserRULE_romper                 = 40
	db_rustparserRULE_continuar              = 41
	db_rustparserRULE_l_bloque               = 42
	db_rustparserRULE_bloque                 = 43
	db_rustparserRULE_expression             = 44
	db_rustparserRULE_list_expres            = 45
	db_rustparserRULE_vectores_inicio        = 46
	db_rustparserRULE_inicio_vect            = 47
	db_rustparserRULE_resumen_vect           = 48
	db_rustparserRULE_arreglos_inicio        = 49
	db_rustparserRULE_inicializando_arreglo  = 50
	db_rustparserRULE_resumen_arre           = 51
	db_rustparserRULE_accesso_arreglo        = 52
	db_rustparserRULE_lista_acceso           = 53
	db_rustparserRULE_access                 = 54
	db_rustparserRULE_acceso_vector          = 55
	db_rustparserRULE_ingreso_struct         = 56
	db_rustparserRULE_nativas_vector         = 57
	db_rustparserRULE_fun_nativas            = 58
	db_rustparserRULE_expre_logica           = 59
	db_rustparserRULE_expre_relacional       = 60
	db_rustparserRULE_expre_aritmetica       = 61
	db_rustparserRULE_valores                = 62
	db_rustparserRULE_casteo_datos           = 63
	db_rustparserRULE_datos                  = 64
)

// IStartContext is an interface to support dynamic dispatch.
type IStartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_instrucciones returns the _instrucciones rule contexts.
	Get_instrucciones() IInstruccionesContext

	// Set_instrucciones sets the _instrucciones rule contexts.
	Set_instrucciones(IInstruccionesContext)

	// GetLista returns the lista attribute.
	GetLista() *arrayList.List

	// SetLista sets the lista attribute.
	SetLista(*arrayList.List)

	// IsStartContext differentiates from other interfaces.
	IsStartContext()
}

type StartContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	lista          *arrayList.List
	_instrucciones IInstruccionesContext
}

func NewEmptyStartContext() *StartContext {
	var p = new(StartContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_start
	return p
}

func (*StartContext) IsStartContext() {}

func NewStartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StartContext {
	var p = new(StartContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_start

	return p
}

func (s *StartContext) GetParser() antlr.Parser { return s.parser }

func (s *StartContext) Get_instrucciones() IInstruccionesContext { return s._instrucciones }

func (s *StartContext) Set_instrucciones(v IInstruccionesContext) { s._instrucciones = v }

func (s *StartContext) GetLista() *arrayList.List { return s.lista }

func (s *StartContext) SetLista(v *arrayList.List) { s.lista = v }

func (s *StartContext) Instrucciones() IInstruccionesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstruccionesContext)
}

func (s *StartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterStart(s)
	}
}

func (s *StartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitStart(s)
	}
}

func (p *db_rustparser) Start() (localctx IStartContext) {
	localctx = NewStartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, db_rustparserRULE_start)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(130)

		var _x = p.Instrucciones()

		localctx.(*StartContext)._instrucciones = _x
	}
	localctx.(*StartContext).lista = localctx.(*StartContext).Get_instrucciones().GetLis()

	return localctx
}

// IInstruccionesContext is an interface to support dynamic dispatch.
type IInstruccionesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_instruccion returns the _instruccion rule contexts.
	Get_instruccion() IInstruccionContext

	// Set_instruccion sets the _instruccion rule contexts.
	Set_instruccion(IInstruccionContext)

	// GetE returns the e rule context list.
	GetE() []IInstruccionContext

	// SetE sets the e rule context list.
	SetE([]IInstruccionContext)

	// GetLis returns the lis attribute.
	GetLis() *arrayList.List

	// SetLis sets the lis attribute.
	SetLis(*arrayList.List)

	// IsInstruccionesContext differentiates from other interfaces.
	IsInstruccionesContext()
}

type InstruccionesContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	lis          *arrayList.List
	_instruccion IInstruccionContext
	e            []IInstruccionContext
}

func NewEmptyInstruccionesContext() *InstruccionesContext {
	var p = new(InstruccionesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_instrucciones
	return p
}

func (*InstruccionesContext) IsInstruccionesContext() {}

func NewInstruccionesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstruccionesContext {
	var p = new(InstruccionesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_instrucciones

	return p
}

func (s *InstruccionesContext) GetParser() antlr.Parser { return s.parser }

func (s *InstruccionesContext) Get_instruccion() IInstruccionContext { return s._instruccion }

func (s *InstruccionesContext) Set_instruccion(v IInstruccionContext) { s._instruccion = v }

func (s *InstruccionesContext) GetE() []IInstruccionContext { return s.e }

func (s *InstruccionesContext) SetE(v []IInstruccionContext) { s.e = v }

func (s *InstruccionesContext) GetLis() *arrayList.List { return s.lis }

func (s *InstruccionesContext) SetLis(v *arrayList.List) { s.lis = v }

func (s *InstruccionesContext) AllInstruccion() []IInstruccionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInstruccionContext)(nil)).Elem())
	var tst = make([]IInstruccionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInstruccionContext)
		}
	}

	return tst
}

func (s *InstruccionesContext) Instruccion(i int) IInstruccionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInstruccionContext)
}

func (s *InstruccionesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstruccionesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterInstrucciones(s)
	}
}

func (s *InstruccionesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitInstrucciones(s)
	}
}

func (p *db_rustparser) Instrucciones() (localctx IInstruccionesContext) {
	localctx = NewInstruccionesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, db_rustparserRULE_instrucciones)

	localctx.(*InstruccionesContext).lis = arrayList.New()

	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(136)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<db_rustparserTK_PUBLICO)|(1<<db_rustparserTK_LET)|(1<<db_rustparserTK_FUNCION))) != 0) || _la == db_rustparserTK_STRUCT || _la == db_rustparserTK_MOD {
		{
			p.SetState(133)

			var _x = p.Instruccion()

			localctx.(*InstruccionesContext)._instruccion = _x
		}
		localctx.(*InstruccionesContext).e = append(localctx.(*InstruccionesContext).e, localctx.(*InstruccionesContext)._instruccion)

		p.SetState(138)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	listInt := localctx.(*InstruccionesContext).GetE()
	for _, e := range listInt {
		localctx.(*InstruccionesContext).lis.Add(e.GetInstr())
	}

	return localctx
}

// IInstruccionContext is an interface to support dynamic dispatch.
type IInstruccionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_declaracion returns the _declaracion rule contexts.
	Get_declaracion() IDeclaracionContext

	// Get_funcas returns the _funcas rule contexts.
	Get_funcas() IFuncasContext

	// Get_stucts returns the _stucts rule contexts.
	Get_stucts() IStuctsContext

	// Get_modulos returns the _modulos rule contexts.
	Get_modulos() IModulosContext

	// Set_declaracion sets the _declaracion rule contexts.
	Set_declaracion(IDeclaracionContext)

	// Set_funcas sets the _funcas rule contexts.
	Set_funcas(IFuncasContext)

	// Set_stucts sets the _stucts rule contexts.
	Set_stucts(IStuctsContext)

	// Set_modulos sets the _modulos rule contexts.
	Set_modulos(IModulosContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruccion

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruccion)

	// IsInstruccionContext differentiates from other interfaces.
	IsInstruccionContext()
}

type InstruccionContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	instr        interfaces.Instruccion
	_declaracion IDeclaracionContext
	_funcas      IFuncasContext
	_stucts      IStuctsContext
	_modulos     IModulosContext
}

func NewEmptyInstruccionContext() *InstruccionContext {
	var p = new(InstruccionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_instruccion
	return p
}

func (*InstruccionContext) IsInstruccionContext() {}

func NewInstruccionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstruccionContext {
	var p = new(InstruccionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_instruccion

	return p
}

func (s *InstruccionContext) GetParser() antlr.Parser { return s.parser }

func (s *InstruccionContext) Get_declaracion() IDeclaracionContext { return s._declaracion }

func (s *InstruccionContext) Get_funcas() IFuncasContext { return s._funcas }

func (s *InstruccionContext) Get_stucts() IStuctsContext { return s._stucts }

func (s *InstruccionContext) Get_modulos() IModulosContext { return s._modulos }

func (s *InstruccionContext) Set_declaracion(v IDeclaracionContext) { s._declaracion = v }

func (s *InstruccionContext) Set_funcas(v IFuncasContext) { s._funcas = v }

func (s *InstruccionContext) Set_stucts(v IStuctsContext) { s._stucts = v }

func (s *InstruccionContext) Set_modulos(v IModulosContext) { s._modulos = v }

func (s *InstruccionContext) GetInstr() interfaces.Instruccion { return s.instr }

func (s *InstruccionContext) SetInstr(v interfaces.Instruccion) { s.instr = v }

func (s *InstruccionContext) Declaracion() IDeclaracionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaracionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaracionContext)
}

func (s *InstruccionContext) Funcas() IFuncasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFuncasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFuncasContext)
}

func (s *InstruccionContext) Stucts() IStuctsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStuctsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStuctsContext)
}

func (s *InstruccionContext) Modulos() IModulosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModulosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModulosContext)
}

func (s *InstruccionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstruccionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterInstruccion(s)
	}
}

func (s *InstruccionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitInstruccion(s)
	}
}

func (p *db_rustparser) Instruccion() (localctx IInstruccionContext) {
	localctx = NewInstruccionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, db_rustparserRULE_instruccion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(153)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(141)

			var _x = p.Declaracion()

			localctx.(*InstruccionContext)._declaracion = _x
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_declaracion().GetInstr()

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(144)

			var _x = p.Funcas()

			localctx.(*InstruccionContext)._funcas = _x
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_funcas().GetInstr()

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(147)

			var _x = p.Stucts()

			localctx.(*InstruccionContext)._stucts = _x
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_stucts().GetInstr()

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(150)

			var _x = p.Modulos()

			localctx.(*InstruccionContext)._modulos = _x
		}
		localctx.(*InstruccionContext).instr = localctx.(*InstruccionContext).Get_modulos().GetInstr()

	}

	return localctx
}

// IModulosContext is an interface to support dynamic dispatch.
type IModulosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_TK_IDENTIFICADOR returns the _TK_IDENTIFICADOR token.
	Get_TK_IDENTIFICADOR() antlr.Token

	// Set_TK_IDENTIFICADOR sets the _TK_IDENTIFICADOR token.
	Set_TK_IDENTIFICADOR(antlr.Token)

	// Get_publi returns the _publi rule contexts.
	Get_publi() IPubliContext

	// Get_l_modulos returns the _l_modulos rule contexts.
	Get_l_modulos() IL_modulosContext

	// Set_publi sets the _publi rule contexts.
	Set_publi(IPubliContext)

	// Set_l_modulos sets the _l_modulos rule contexts.
	Set_l_modulos(IL_modulosContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruccion

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruccion)

	// IsModulosContext differentiates from other interfaces.
	IsModulosContext()
}

type ModulosContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	instr             interfaces.Instruccion
	_publi            IPubliContext
	_TK_IDENTIFICADOR antlr.Token
	_l_modulos        IL_modulosContext
}

func NewEmptyModulosContext() *ModulosContext {
	var p = new(ModulosContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_modulos
	return p
}

func (*ModulosContext) IsModulosContext() {}

func NewModulosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ModulosContext {
	var p = new(ModulosContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_modulos

	return p
}

func (s *ModulosContext) GetParser() antlr.Parser { return s.parser }

func (s *ModulosContext) Get_TK_IDENTIFICADOR() antlr.Token { return s._TK_IDENTIFICADOR }

func (s *ModulosContext) Set_TK_IDENTIFICADOR(v antlr.Token) { s._TK_IDENTIFICADOR = v }

func (s *ModulosContext) Get_publi() IPubliContext { return s._publi }

func (s *ModulosContext) Get_l_modulos() IL_modulosContext { return s._l_modulos }

func (s *ModulosContext) Set_publi(v IPubliContext) { s._publi = v }

func (s *ModulosContext) Set_l_modulos(v IL_modulosContext) { s._l_modulos = v }

func (s *ModulosContext) GetInstr() interfaces.Instruccion { return s.instr }

func (s *ModulosContext) SetInstr(v interfaces.Instruccion) { s.instr = v }

func (s *ModulosContext) Publi() IPubliContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPubliContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPubliContext)
}

func (s *ModulosContext) TK_MOD() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_MOD, 0)
}

func (s *ModulosContext) TK_IDENTIFICADOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_IDENTIFICADOR, 0)
}

func (s *ModulosContext) TK_LI() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_LI, 0)
}

func (s *ModulosContext) L_modulos() IL_modulosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IL_modulosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IL_modulosContext)
}

func (s *ModulosContext) TK_LD() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_LD, 0)
}

func (s *ModulosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModulosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ModulosContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterModulos(s)
	}
}

func (s *ModulosContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitModulos(s)
	}
}

func (p *db_rustparser) Modulos() (localctx IModulosContext) {
	localctx = NewModulosContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, db_rustparserRULE_modulos)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(155)

		var _x = p.Publi()

		localctx.(*ModulosContext)._publi = _x
	}
	{
		p.SetState(156)
		p.Match(db_rustparserTK_MOD)
	}
	{
		p.SetState(157)

		var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

		localctx.(*ModulosContext)._TK_IDENTIFICADOR = _m
	}
	{
		p.SetState(158)
		p.Match(db_rustparserTK_LI)
	}
	{
		p.SetState(159)

		var _x = p.l_modulos(0)

		localctx.(*ModulosContext)._l_modulos = _x
	}
	{
		p.SetState(160)
		p.Match(db_rustparserTK_LD)
	}

	localctx.(*ModulosContext).instr = modulo.Nmods(localctx.(*ModulosContext).Get_publi().GetM(), (func() string {
		if localctx.(*ModulosContext).Get_TK_IDENTIFICADOR() == nil {
			return ""
		} else {
			return localctx.(*ModulosContext).Get_TK_IDENTIFICADOR().GetText()
		}
	}()), localctx.(*ModulosContext).Get_l_modulos().GetLmod(), (func() int {
		if localctx.(*ModulosContext).Get_TK_IDENTIFICADOR() == nil {
			return 0
		} else {
			return localctx.(*ModulosContext).Get_TK_IDENTIFICADOR().GetLine()
		}
	}()), localctx.(*ModulosContext).Get_TK_IDENTIFICADOR().GetColumn())

	return localctx
}

// IL_modulosContext is an interface to support dynamic dispatch.
type IL_modulosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMods returns the mods rule contexts.
	GetMods() IL_modulosContext

	// Get_modulitos returns the _modulitos rule contexts.
	Get_modulitos() IModulitosContext

	// SetMods sets the mods rule contexts.
	SetMods(IL_modulosContext)

	// Set_modulitos sets the _modulitos rule contexts.
	Set_modulitos(IModulitosContext)

	// GetLmod returns the lmod attribute.
	GetLmod() *arrayList.List

	// SetLmod sets the lmod attribute.
	SetLmod(*arrayList.List)

	// IsL_modulosContext differentiates from other interfaces.
	IsL_modulosContext()
}

type L_modulosContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	lmod       *arrayList.List
	mods       IL_modulosContext
	_modulitos IModulitosContext
}

func NewEmptyL_modulosContext() *L_modulosContext {
	var p = new(L_modulosContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_l_modulos
	return p
}

func (*L_modulosContext) IsL_modulosContext() {}

func NewL_modulosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *L_modulosContext {
	var p = new(L_modulosContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_l_modulos

	return p
}

func (s *L_modulosContext) GetParser() antlr.Parser { return s.parser }

func (s *L_modulosContext) GetMods() IL_modulosContext { return s.mods }

func (s *L_modulosContext) Get_modulitos() IModulitosContext { return s._modulitos }

func (s *L_modulosContext) SetMods(v IL_modulosContext) { s.mods = v }

func (s *L_modulosContext) Set_modulitos(v IModulitosContext) { s._modulitos = v }

func (s *L_modulosContext) GetLmod() *arrayList.List { return s.lmod }

func (s *L_modulosContext) SetLmod(v *arrayList.List) { s.lmod = v }

func (s *L_modulosContext) Modulitos() IModulitosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModulitosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModulitosContext)
}

func (s *L_modulosContext) L_modulos() IL_modulosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IL_modulosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IL_modulosContext)
}

func (s *L_modulosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *L_modulosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *L_modulosContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterL_modulos(s)
	}
}

func (s *L_modulosContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitL_modulos(s)
	}
}

func (p *db_rustparser) L_modulos() (localctx IL_modulosContext) {
	return p.l_modulos(0)
}

func (p *db_rustparser) l_modulos(_p int) (localctx IL_modulosContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewL_modulosContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IL_modulosContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 8
	p.EnterRecursionRule(localctx, 8, db_rustparserRULE_l_modulos, _p)

	localctx.(*L_modulosContext).lmod = arrayList.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(164)

		var _x = p.Modulitos()

		localctx.(*L_modulosContext)._modulitos = _x
	}
	localctx.(*L_modulosContext).lmod.Add(localctx.(*L_modulosContext).Get_modulitos().GetInstr())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(173)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewL_modulosContext(p, _parentctx, _parentState)
			localctx.(*L_modulosContext).mods = _prevctx
			p.PushNewRecursionContext(localctx, _startState, db_rustparserRULE_l_modulos)
			p.SetState(167)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(168)

				var _x = p.Modulitos()

				localctx.(*L_modulosContext)._modulitos = _x
			}

			localctx.(*L_modulosContext).GetMods().GetLmod().Add(localctx.(*L_modulosContext).Get_modulitos().GetInstr())
			localctx.(*L_modulosContext).lmod = localctx.(*L_modulosContext).GetMods().GetLmod()

		}
		p.SetState(175)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext())
	}

	return localctx
}

// IModulitosContext is an interface to support dynamic dispatch.
type IModulitosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_funcas returns the _funcas rule contexts.
	Get_funcas() IFuncasContext

	// Get_stucts returns the _stucts rule contexts.
	Get_stucts() IStuctsContext

	// Get_modulos returns the _modulos rule contexts.
	Get_modulos() IModulosContext

	// Get_declaracion returns the _declaracion rule contexts.
	Get_declaracion() IDeclaracionContext

	// Set_funcas sets the _funcas rule contexts.
	Set_funcas(IFuncasContext)

	// Set_stucts sets the _stucts rule contexts.
	Set_stucts(IStuctsContext)

	// Set_modulos sets the _modulos rule contexts.
	Set_modulos(IModulosContext)

	// Set_declaracion sets the _declaracion rule contexts.
	Set_declaracion(IDeclaracionContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruccion

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruccion)

	// IsModulitosContext differentiates from other interfaces.
	IsModulitosContext()
}

type ModulitosContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	instr        interfaces.Instruccion
	_funcas      IFuncasContext
	_stucts      IStuctsContext
	_modulos     IModulosContext
	_declaracion IDeclaracionContext
}

func NewEmptyModulitosContext() *ModulitosContext {
	var p = new(ModulitosContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_modulitos
	return p
}

func (*ModulitosContext) IsModulitosContext() {}

func NewModulitosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ModulitosContext {
	var p = new(ModulitosContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_modulitos

	return p
}

func (s *ModulitosContext) GetParser() antlr.Parser { return s.parser }

func (s *ModulitosContext) Get_funcas() IFuncasContext { return s._funcas }

func (s *ModulitosContext) Get_stucts() IStuctsContext { return s._stucts }

func (s *ModulitosContext) Get_modulos() IModulosContext { return s._modulos }

func (s *ModulitosContext) Get_declaracion() IDeclaracionContext { return s._declaracion }

func (s *ModulitosContext) Set_funcas(v IFuncasContext) { s._funcas = v }

func (s *ModulitosContext) Set_stucts(v IStuctsContext) { s._stucts = v }

func (s *ModulitosContext) Set_modulos(v IModulosContext) { s._modulos = v }

func (s *ModulitosContext) Set_declaracion(v IDeclaracionContext) { s._declaracion = v }

func (s *ModulitosContext) GetInstr() interfaces.Instruccion { return s.instr }

func (s *ModulitosContext) SetInstr(v interfaces.Instruccion) { s.instr = v }

func (s *ModulitosContext) Funcas() IFuncasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFuncasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFuncasContext)
}

func (s *ModulitosContext) Stucts() IStuctsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStuctsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStuctsContext)
}

func (s *ModulitosContext) Modulos() IModulosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModulosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModulosContext)
}

func (s *ModulitosContext) Declaracion() IDeclaracionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaracionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaracionContext)
}

func (s *ModulitosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModulitosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ModulitosContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterModulitos(s)
	}
}

func (s *ModulitosContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitModulitos(s)
	}
}

func (p *db_rustparser) Modulitos() (localctx IModulitosContext) {
	localctx = NewModulitosContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, db_rustparserRULE_modulitos)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(188)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(176)

			var _x = p.Funcas()

			localctx.(*ModulitosContext)._funcas = _x
		}
		localctx.(*ModulitosContext).instr = localctx.(*ModulitosContext).Get_funcas().GetInstr()

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(179)

			var _x = p.Stucts()

			localctx.(*ModulitosContext)._stucts = _x
		}
		localctx.(*ModulitosContext).instr = localctx.(*ModulitosContext).Get_stucts().GetInstr()

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(182)

			var _x = p.Modulos()

			localctx.(*ModulitosContext)._modulos = _x
		}
		localctx.(*ModulitosContext).instr = localctx.(*ModulitosContext).Get_modulos().GetInstr()

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(185)

			var _x = p.Declaracion()

			localctx.(*ModulitosContext)._declaracion = _x
		}
		localctx.(*ModulitosContext).instr = localctx.(*ModulitosContext).Get_declaracion().GetInstr()

	}

	return localctx
}

// IStuctsContext is an interface to support dynamic dispatch.
type IStuctsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_TK_IDENTIFICADOR returns the _TK_IDENTIFICADOR token.
	Get_TK_IDENTIFICADOR() antlr.Token

	// Set_TK_IDENTIFICADOR sets the _TK_IDENTIFICADOR token.
	Set_TK_IDENTIFICADOR(antlr.Token)

	// Get_l_structs returns the _l_structs rule contexts.
	Get_l_structs() IL_structsContext

	// Set_l_structs sets the _l_structs rule contexts.
	Set_l_structs(IL_structsContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruccion

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruccion)

	// IsStuctsContext differentiates from other interfaces.
	IsStuctsContext()
}

type StuctsContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	instr             interfaces.Instruccion
	_TK_IDENTIFICADOR antlr.Token
	_l_structs        IL_structsContext
}

func NewEmptyStuctsContext() *StuctsContext {
	var p = new(StuctsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_stucts
	return p
}

func (*StuctsContext) IsStuctsContext() {}

func NewStuctsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StuctsContext {
	var p = new(StuctsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_stucts

	return p
}

func (s *StuctsContext) GetParser() antlr.Parser { return s.parser }

func (s *StuctsContext) Get_TK_IDENTIFICADOR() antlr.Token { return s._TK_IDENTIFICADOR }

func (s *StuctsContext) Set_TK_IDENTIFICADOR(v antlr.Token) { s._TK_IDENTIFICADOR = v }

func (s *StuctsContext) Get_l_structs() IL_structsContext { return s._l_structs }

func (s *StuctsContext) Set_l_structs(v IL_structsContext) { s._l_structs = v }

func (s *StuctsContext) GetInstr() interfaces.Instruccion { return s.instr }

func (s *StuctsContext) SetInstr(v interfaces.Instruccion) { s.instr = v }

func (s *StuctsContext) TK_STRUCT() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_STRUCT, 0)
}

func (s *StuctsContext) TK_IDENTIFICADOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_IDENTIFICADOR, 0)
}

func (s *StuctsContext) TK_LI() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_LI, 0)
}

func (s *StuctsContext) L_structs() IL_structsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IL_structsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IL_structsContext)
}

func (s *StuctsContext) TK_LD() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_LD, 0)
}

func (s *StuctsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StuctsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StuctsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterStucts(s)
	}
}

func (s *StuctsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitStucts(s)
	}
}

func (p *db_rustparser) Stucts() (localctx IStuctsContext) {
	localctx = NewStuctsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, db_rustparserRULE_stucts)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(190)
		p.Match(db_rustparserTK_STRUCT)
	}
	{
		p.SetState(191)

		var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

		localctx.(*StuctsContext)._TK_IDENTIFICADOR = _m
	}
	{
		p.SetState(192)
		p.Match(db_rustparserTK_LI)
	}
	{
		p.SetState(193)

		var _x = p.l_structs(0)

		localctx.(*StuctsContext)._l_structs = _x
	}
	{
		p.SetState(194)
		p.Match(db_rustparserTK_LD)
	}

	localctx.(*StuctsContext).instr = structs.Nstructrust((func() string {
		if localctx.(*StuctsContext).Get_TK_IDENTIFICADOR() == nil {
			return ""
		} else {
			return localctx.(*StuctsContext).Get_TK_IDENTIFICADOR().GetText()
		}
	}()), localctx.(*StuctsContext).Get_l_structs().GetLstr(), (func() int {
		if localctx.(*StuctsContext).Get_TK_IDENTIFICADOR() == nil {
			return 0
		} else {
			return localctx.(*StuctsContext).Get_TK_IDENTIFICADOR().GetLine()
		}
	}()), localctx.(*StuctsContext).Get_TK_IDENTIFICADOR().GetColumn())

	return localctx
}

// IL_structsContext is an interface to support dynamic dispatch.
type IL_structsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLista returns the lista rule contexts.
	GetLista() IL_structsContext

	// Get_defstruct returns the _defstruct rule contexts.
	Get_defstruct() IDefstructContext

	// SetLista sets the lista rule contexts.
	SetLista(IL_structsContext)

	// Set_defstruct sets the _defstruct rule contexts.
	Set_defstruct(IDefstructContext)

	// GetLstr returns the lstr attribute.
	GetLstr() *arrayList.List

	// SetLstr sets the lstr attribute.
	SetLstr(*arrayList.List)

	// IsL_structsContext differentiates from other interfaces.
	IsL_structsContext()
}

type L_structsContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	lstr       *arrayList.List
	lista      IL_structsContext
	_defstruct IDefstructContext
}

func NewEmptyL_structsContext() *L_structsContext {
	var p = new(L_structsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_l_structs
	return p
}

func (*L_structsContext) IsL_structsContext() {}

func NewL_structsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *L_structsContext {
	var p = new(L_structsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_l_structs

	return p
}

func (s *L_structsContext) GetParser() antlr.Parser { return s.parser }

func (s *L_structsContext) GetLista() IL_structsContext { return s.lista }

func (s *L_structsContext) Get_defstruct() IDefstructContext { return s._defstruct }

func (s *L_structsContext) SetLista(v IL_structsContext) { s.lista = v }

func (s *L_structsContext) Set_defstruct(v IDefstructContext) { s._defstruct = v }

func (s *L_structsContext) GetLstr() *arrayList.List { return s.lstr }

func (s *L_structsContext) SetLstr(v *arrayList.List) { s.lstr = v }

func (s *L_structsContext) Defstruct() IDefstructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefstructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefstructContext)
}

func (s *L_structsContext) TK_COMA() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_COMA, 0)
}

func (s *L_structsContext) L_structs() IL_structsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IL_structsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IL_structsContext)
}

func (s *L_structsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *L_structsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *L_structsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterL_structs(s)
	}
}

func (s *L_structsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitL_structs(s)
	}
}

func (p *db_rustparser) L_structs() (localctx IL_structsContext) {
	return p.l_structs(0)
}

func (p *db_rustparser) l_structs(_p int) (localctx IL_structsContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewL_structsContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IL_structsContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 14
	p.EnterRecursionRule(localctx, 14, db_rustparserRULE_l_structs, _p)

	localctx.(*L_structsContext).lstr = arrayList.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(198)

		var _x = p.Defstruct()

		localctx.(*L_structsContext)._defstruct = _x
	}
	localctx.(*L_structsContext).lstr.Add(localctx.(*L_structsContext).Get_defstruct().GetStru())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(208)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewL_structsContext(p, _parentctx, _parentState)
			localctx.(*L_structsContext).lista = _prevctx
			p.PushNewRecursionContext(localctx, _startState, db_rustparserRULE_l_structs)
			p.SetState(201)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(202)
				p.Match(db_rustparserTK_COMA)
			}
			{
				p.SetState(203)

				var _x = p.Defstruct()

				localctx.(*L_structsContext)._defstruct = _x
			}

			localctx.(*L_structsContext).GetLista().GetLstr().Add(localctx.(*L_structsContext).Get_defstruct().GetStru())
			localctx.(*L_structsContext).lstr = localctx.(*L_structsContext).GetLista().GetLstr()

		}
		p.SetState(210)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())
	}

	return localctx
}

// IDefstructContext is an interface to support dynamic dispatch.
type IDefstructContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_TK_IDENTIFICADOR returns the _TK_IDENTIFICADOR token.
	Get_TK_IDENTIFICADOR() antlr.Token

	// Set_TK_IDENTIFICADOR sets the _TK_IDENTIFICADOR token.
	Set_TK_IDENTIFICADOR(antlr.Token)

	// Get_tipado returns the _tipado rule contexts.
	Get_tipado() ITipadoContext

	// Set_tipado sets the _tipado rule contexts.
	Set_tipado(ITipadoContext)

	// GetStru returns the stru attribute.
	GetStru() structs.DefStruct

	// SetStru sets the stru attribute.
	SetStru(structs.DefStruct)

	// IsDefstructContext differentiates from other interfaces.
	IsDefstructContext()
}

type DefstructContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	stru              structs.DefStruct
	_TK_IDENTIFICADOR antlr.Token
	_tipado           ITipadoContext
}

func NewEmptyDefstructContext() *DefstructContext {
	var p = new(DefstructContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_defstruct
	return p
}

func (*DefstructContext) IsDefstructContext() {}

func NewDefstructContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefstructContext {
	var p = new(DefstructContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_defstruct

	return p
}

func (s *DefstructContext) GetParser() antlr.Parser { return s.parser }

func (s *DefstructContext) Get_TK_IDENTIFICADOR() antlr.Token { return s._TK_IDENTIFICADOR }

func (s *DefstructContext) Set_TK_IDENTIFICADOR(v antlr.Token) { s._TK_IDENTIFICADOR = v }

func (s *DefstructContext) Get_tipado() ITipadoContext { return s._tipado }

func (s *DefstructContext) Set_tipado(v ITipadoContext) { s._tipado = v }

func (s *DefstructContext) GetStru() structs.DefStruct { return s.stru }

func (s *DefstructContext) SetStru(v structs.DefStruct) { s.stru = v }

func (s *DefstructContext) TK_IDENTIFICADOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_IDENTIFICADOR, 0)
}

func (s *DefstructContext) Tipado() ITipadoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipadoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipadoContext)
}

func (s *DefstructContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefstructContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefstructContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterDefstruct(s)
	}
}

func (s *DefstructContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitDefstruct(s)
	}
}

func (p *db_rustparser) Defstruct() (localctx IDefstructContext) {
	localctx = NewDefstructContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, db_rustparserRULE_defstruct)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(211)

		var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

		localctx.(*DefstructContext)._TK_IDENTIFICADOR = _m
	}
	{
		p.SetState(212)

		var _x = p.Tipado()

		localctx.(*DefstructContext)._tipado = _x
	}

	localctx.(*DefstructContext).stru = structs.Ndefstruct((func() string {
		if localctx.(*DefstructContext).Get_TK_IDENTIFICADOR() == nil {
			return ""
		} else {
			return localctx.(*DefstructContext).Get_TK_IDENTIFICADOR().GetText()
		}
	}()), localctx.(*DefstructContext).Get_tipado().GetTip())

	return localctx
}

// IFuncasContext is an interface to support dynamic dispatch.
type IFuncasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_TK_MAIN returns the _TK_MAIN token.
	Get_TK_MAIN() antlr.Token

	// Get_TK_IDENTIFICADOR returns the _TK_IDENTIFICADOR token.
	Get_TK_IDENTIFICADOR() antlr.Token

	// Set_TK_MAIN sets the _TK_MAIN token.
	Set_TK_MAIN(antlr.Token)

	// Set_TK_IDENTIFICADOR sets the _TK_IDENTIFICADOR token.
	Set_TK_IDENTIFICADOR(antlr.Token)

	// Get_publi returns the _publi rule contexts.
	Get_publi() IPubliContext

	// Get_l_bloque returns the _l_bloque rule contexts.
	Get_l_bloque() IL_bloqueContext

	// Get_tipos_funciones returns the _tipos_funciones rule contexts.
	Get_tipos_funciones() ITipos_funcionesContext

	// Get_parametros returns the _parametros rule contexts.
	Get_parametros() IParametrosContext

	// Set_publi sets the _publi rule contexts.
	Set_publi(IPubliContext)

	// Set_l_bloque sets the _l_bloque rule contexts.
	Set_l_bloque(IL_bloqueContext)

	// Set_tipos_funciones sets the _tipos_funciones rule contexts.
	Set_tipos_funciones(ITipos_funcionesContext)

	// Set_parametros sets the _parametros rule contexts.
	Set_parametros(IParametrosContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruccion

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruccion)

	// IsFuncasContext differentiates from other interfaces.
	IsFuncasContext()
}

type FuncasContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	instr             interfaces.Instruccion
	_publi            IPubliContext
	_TK_MAIN          antlr.Token
	_l_bloque         IL_bloqueContext
	_TK_IDENTIFICADOR antlr.Token
	_tipos_funciones  ITipos_funcionesContext
	_parametros       IParametrosContext
}

func NewEmptyFuncasContext() *FuncasContext {
	var p = new(FuncasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_funcas
	return p
}

func (*FuncasContext) IsFuncasContext() {}

func NewFuncasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FuncasContext {
	var p = new(FuncasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_funcas

	return p
}

func (s *FuncasContext) GetParser() antlr.Parser { return s.parser }

func (s *FuncasContext) Get_TK_MAIN() antlr.Token { return s._TK_MAIN }

func (s *FuncasContext) Get_TK_IDENTIFICADOR() antlr.Token { return s._TK_IDENTIFICADOR }

func (s *FuncasContext) Set_TK_MAIN(v antlr.Token) { s._TK_MAIN = v }

func (s *FuncasContext) Set_TK_IDENTIFICADOR(v antlr.Token) { s._TK_IDENTIFICADOR = v }

func (s *FuncasContext) Get_publi() IPubliContext { return s._publi }

func (s *FuncasContext) Get_l_bloque() IL_bloqueContext { return s._l_bloque }

func (s *FuncasContext) Get_tipos_funciones() ITipos_funcionesContext { return s._tipos_funciones }

func (s *FuncasContext) Get_parametros() IParametrosContext { return s._parametros }

func (s *FuncasContext) Set_publi(v IPubliContext) { s._publi = v }

func (s *FuncasContext) Set_l_bloque(v IL_bloqueContext) { s._l_bloque = v }

func (s *FuncasContext) Set_tipos_funciones(v ITipos_funcionesContext) { s._tipos_funciones = v }

func (s *FuncasContext) Set_parametros(v IParametrosContext) { s._parametros = v }

func (s *FuncasContext) GetInstr() interfaces.Instruccion { return s.instr }

func (s *FuncasContext) SetInstr(v interfaces.Instruccion) { s.instr = v }

func (s *FuncasContext) Publi() IPubliContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPubliContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPubliContext)
}

func (s *FuncasContext) TK_FUNCION() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_FUNCION, 0)
}

func (s *FuncasContext) TK_MAIN() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_MAIN, 0)
}

func (s *FuncasContext) TK_PI() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PI, 0)
}

func (s *FuncasContext) TK_PD() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PD, 0)
}

func (s *FuncasContext) TK_LI() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_LI, 0)
}

func (s *FuncasContext) L_bloque() IL_bloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IL_bloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IL_bloqueContext)
}

func (s *FuncasContext) TK_LD() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_LD, 0)
}

func (s *FuncasContext) TK_IDENTIFICADOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_IDENTIFICADOR, 0)
}

func (s *FuncasContext) Tipos_funciones() ITipos_funcionesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipos_funcionesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipos_funcionesContext)
}

func (s *FuncasContext) Parametros() IParametrosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametrosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametrosContext)
}

func (s *FuncasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FuncasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FuncasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterFuncas(s)
	}
}

func (s *FuncasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitFuncas(s)
	}
}

func (p *db_rustparser) Funcas() (localctx IFuncasContext) {
	localctx = NewFuncasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, db_rustparserRULE_funcas)

	listaparametros := arrayList.New()

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(248)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(215)

			var _x = p.Publi()

			localctx.(*FuncasContext)._publi = _x
		}
		{
			p.SetState(216)
			p.Match(db_rustparserTK_FUNCION)
		}
		{
			p.SetState(217)

			var _m = p.Match(db_rustparserTK_MAIN)

			localctx.(*FuncasContext)._TK_MAIN = _m
		}
		{
			p.SetState(218)
			p.Match(db_rustparserTK_PI)
		}
		{
			p.SetState(219)
			p.Match(db_rustparserTK_PD)
		}
		{
			p.SetState(220)
			p.Match(db_rustparserTK_LI)
		}
		{
			p.SetState(221)

			var _x = p.l_bloque(0)

			localctx.(*FuncasContext)._l_bloque = _x
		}
		{
			p.SetState(222)
			p.Match(db_rustparserTK_LD)
		}

		tf := tipos.Ntiposfunca("null", simbolos.NULL, nil, nil)
		localctx.(*FuncasContext).instr = funciones.Nfunciones(localctx.(*FuncasContext).Get_publi().GetM(), (func() string {
			if localctx.(*FuncasContext).Get_TK_MAIN() == nil {
				return ""
			} else {
				return localctx.(*FuncasContext).Get_TK_MAIN().GetText()
			}
		}()), listaparametros, tf, localctx.(*FuncasContext).Get_l_bloque().GetLbloque(), (func() int {
			if localctx.(*FuncasContext).Get_TK_MAIN() == nil {
				return 0
			} else {
				return localctx.(*FuncasContext).Get_TK_MAIN().GetLine()
			}
		}()), localctx.(*FuncasContext).Get_TK_MAIN().GetColumn())

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(225)

			var _x = p.Publi()

			localctx.(*FuncasContext)._publi = _x
		}
		{
			p.SetState(226)
			p.Match(db_rustparserTK_FUNCION)
		}
		{
			p.SetState(227)

			var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

			localctx.(*FuncasContext)._TK_IDENTIFICADOR = _m
		}
		{
			p.SetState(228)
			p.Match(db_rustparserTK_PI)
		}
		{
			p.SetState(229)
			p.Match(db_rustparserTK_PD)
		}
		{
			p.SetState(230)

			var _x = p.Tipos_funciones()

			localctx.(*FuncasContext)._tipos_funciones = _x
		}
		{
			p.SetState(231)
			p.Match(db_rustparserTK_LI)
		}
		{
			p.SetState(232)

			var _x = p.l_bloque(0)

			localctx.(*FuncasContext)._l_bloque = _x
		}
		{
			p.SetState(233)
			p.Match(db_rustparserTK_LD)
		}

		localctx.(*FuncasContext).instr = funciones.Nfunciones(localctx.(*FuncasContext).Get_publi().GetM(), (func() string {
			if localctx.(*FuncasContext).Get_TK_IDENTIFICADOR() == nil {
				return ""
			} else {
				return localctx.(*FuncasContext).Get_TK_IDENTIFICADOR().GetText()
			}
		}()), listaparametros, localctx.(*FuncasContext).Get_tipos_funciones().GetTf(), localctx.(*FuncasContext).Get_l_bloque().GetLbloque(), (func() int {
			if localctx.(*FuncasContext).Get_TK_IDENTIFICADOR() == nil {
				return 0
			} else {
				return localctx.(*FuncasContext).Get_TK_IDENTIFICADOR().GetLine()
			}
		}()), localctx.(*FuncasContext).Get_TK_IDENTIFICADOR().GetColumn())

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(236)

			var _x = p.Publi()

			localctx.(*FuncasContext)._publi = _x
		}
		{
			p.SetState(237)
			p.Match(db_rustparserTK_FUNCION)
		}
		{
			p.SetState(238)

			var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

			localctx.(*FuncasContext)._TK_IDENTIFICADOR = _m
		}
		{
			p.SetState(239)
			p.Match(db_rustparserTK_PI)
		}
		{
			p.SetState(240)

			var _x = p.parametros(0)

			localctx.(*FuncasContext)._parametros = _x
		}
		{
			p.SetState(241)
			p.Match(db_rustparserTK_PD)
		}
		{
			p.SetState(242)

			var _x = p.Tipos_funciones()

			localctx.(*FuncasContext)._tipos_funciones = _x
		}
		{
			p.SetState(243)
			p.Match(db_rustparserTK_LI)
		}
		{
			p.SetState(244)

			var _x = p.l_bloque(0)

			localctx.(*FuncasContext)._l_bloque = _x
		}
		{
			p.SetState(245)
			p.Match(db_rustparserTK_LD)
		}

		localctx.(*FuncasContext).instr = funciones.Nfunciones(localctx.(*FuncasContext).Get_publi().GetM(), (func() string {
			if localctx.(*FuncasContext).Get_TK_IDENTIFICADOR() == nil {
				return ""
			} else {
				return localctx.(*FuncasContext).Get_TK_IDENTIFICADOR().GetText()
			}
		}()), localctx.(*FuncasContext).Get_parametros().GetLparame(), localctx.(*FuncasContext).Get_tipos_funciones().GetTf(), localctx.(*FuncasContext).Get_l_bloque().GetLbloque(), (func() int {
			if localctx.(*FuncasContext).Get_TK_IDENTIFICADOR() == nil {
				return 0
			} else {
				return localctx.(*FuncasContext).Get_TK_IDENTIFICADOR().GetLine()
			}
		}()), localctx.(*FuncasContext).Get_TK_IDENTIFICADOR().GetColumn())

	}

	return localctx
}

// IPubliContext is an interface to support dynamic dispatch.
type IPubliContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetM returns the m attribute.
	GetM() bool

	// SetM sets the m attribute.
	SetM(bool)

	// IsPubliContext differentiates from other interfaces.
	IsPubliContext()
}

type PubliContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	m      bool
}

func NewEmptyPubliContext() *PubliContext {
	var p = new(PubliContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_publi
	return p
}

func (*PubliContext) IsPubliContext() {}

func NewPubliContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PubliContext {
	var p = new(PubliContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_publi

	return p
}

func (s *PubliContext) GetParser() antlr.Parser { return s.parser }

func (s *PubliContext) GetM() bool { return s.m }

func (s *PubliContext) SetM(v bool) { s.m = v }

func (s *PubliContext) TK_PUBLICO() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PUBLICO, 0)
}

func (s *PubliContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PubliContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PubliContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterPubli(s)
	}
}

func (s *PubliContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitPubli(s)
	}
}

func (p *db_rustparser) Publi() (localctx IPubliContext) {
	localctx = NewPubliContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, db_rustparserRULE_publi)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(253)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case db_rustparserTK_PUBLICO:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(250)
			p.Match(db_rustparserTK_PUBLICO)
		}
		localctx.(*PubliContext).m = true

	case db_rustparserTK_FUNCION, db_rustparserTK_MOD:
		p.EnterOuterAlt(localctx, 2)
		localctx.(*PubliContext).m = false

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IParametrosContext is an interface to support dynamic dispatch.
type IParametrosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPar returns the par rule contexts.
	GetPar() IParametrosContext

	// Get_definiciones returns the _definiciones rule contexts.
	Get_definiciones() IDefinicionesContext

	// SetPar sets the par rule contexts.
	SetPar(IParametrosContext)

	// Set_definiciones sets the _definiciones rule contexts.
	Set_definiciones(IDefinicionesContext)

	// GetLparame returns the lparame attribute.
	GetLparame() *arrayList.List

	// SetLparame sets the lparame attribute.
	SetLparame(*arrayList.List)

	// IsParametrosContext differentiates from other interfaces.
	IsParametrosContext()
}

type ParametrosContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	lparame       *arrayList.List
	par           IParametrosContext
	_definiciones IDefinicionesContext
}

func NewEmptyParametrosContext() *ParametrosContext {
	var p = new(ParametrosContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_parametros
	return p
}

func (*ParametrosContext) IsParametrosContext() {}

func NewParametrosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParametrosContext {
	var p = new(ParametrosContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_parametros

	return p
}

func (s *ParametrosContext) GetParser() antlr.Parser { return s.parser }

func (s *ParametrosContext) GetPar() IParametrosContext { return s.par }

func (s *ParametrosContext) Get_definiciones() IDefinicionesContext { return s._definiciones }

func (s *ParametrosContext) SetPar(v IParametrosContext) { s.par = v }

func (s *ParametrosContext) Set_definiciones(v IDefinicionesContext) { s._definiciones = v }

func (s *ParametrosContext) GetLparame() *arrayList.List { return s.lparame }

func (s *ParametrosContext) SetLparame(v *arrayList.List) { s.lparame = v }

func (s *ParametrosContext) Definiciones() IDefinicionesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefinicionesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefinicionesContext)
}

func (s *ParametrosContext) TK_COMA() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_COMA, 0)
}

func (s *ParametrosContext) Parametros() IParametrosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametrosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametrosContext)
}

func (s *ParametrosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParametrosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParametrosContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterParametros(s)
	}
}

func (s *ParametrosContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitParametros(s)
	}
}

func (p *db_rustparser) Parametros() (localctx IParametrosContext) {
	return p.parametros(0)
}

func (p *db_rustparser) parametros(_p int) (localctx IParametrosContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewParametrosContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IParametrosContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 22
	p.EnterRecursionRule(localctx, 22, db_rustparserRULE_parametros, _p)

	localctx.(*ParametrosContext).lparame = arrayList.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(256)

		var _x = p.Definiciones()

		localctx.(*ParametrosContext)._definiciones = _x
	}
	localctx.(*ParametrosContext).lparame.Add(localctx.(*ParametrosContext).Get_definiciones().GetPa())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(266)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewParametrosContext(p, _parentctx, _parentState)
			localctx.(*ParametrosContext).par = _prevctx
			p.PushNewRecursionContext(localctx, _startState, db_rustparserRULE_parametros)
			p.SetState(259)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(260)
				p.Match(db_rustparserTK_COMA)
			}
			{
				p.SetState(261)

				var _x = p.Definiciones()

				localctx.(*ParametrosContext)._definiciones = _x
			}

			localctx.(*ParametrosContext).GetPar().GetLparame().Add(localctx.(*ParametrosContext).Get_definiciones().GetPa())
			localctx.(*ParametrosContext).lparame = localctx.(*ParametrosContext).GetPar().GetLparame()

		}
		p.SetState(268)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext())
	}

	return localctx
}

// IDefinicionesContext is an interface to support dynamic dispatch.
type IDefinicionesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_TK_IDENTIFICADOR returns the _TK_IDENTIFICADOR token.
	Get_TK_IDENTIFICADOR() antlr.Token

	// Set_TK_IDENTIFICADOR sets the _TK_IDENTIFICADOR token.
	Set_TK_IDENTIFICADOR(antlr.Token)

	// Get_valref returns the _valref rule contexts.
	Get_valref() IValrefContext

	// Get_tipos returns the _tipos rule contexts.
	Get_tipos() ITiposContext

	// Get_tipos_vectorarre returns the _tipos_vectorarre rule contexts.
	Get_tipos_vectorarre() ITipos_vectorarreContext

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Set_valref sets the _valref rule contexts.
	Set_valref(IValrefContext)

	// Set_tipos sets the _tipos rule contexts.
	Set_tipos(ITiposContext)

	// Set_tipos_vectorarre sets the _tipos_vectorarre rule contexts.
	Set_tipos_vectorarre(ITipos_vectorarreContext)

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetPa returns the pa attribute.
	GetPa() parametros.Param

	// SetPa sets the pa attribute.
	SetPa(parametros.Param)

	// IsDefinicionesContext differentiates from other interfaces.
	IsDefinicionesContext()
}

type DefinicionesContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	pa                parametros.Param
	_TK_IDENTIFICADOR antlr.Token
	_valref           IValrefContext
	_tipos            ITiposContext
	_tipos_vectorarre ITipos_vectorarreContext
	_expression       IExpressionContext
}

func NewEmptyDefinicionesContext() *DefinicionesContext {
	var p = new(DefinicionesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_definiciones
	return p
}

func (*DefinicionesContext) IsDefinicionesContext() {}

func NewDefinicionesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefinicionesContext {
	var p = new(DefinicionesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_definiciones

	return p
}

func (s *DefinicionesContext) GetParser() antlr.Parser { return s.parser }

func (s *DefinicionesContext) Get_TK_IDENTIFICADOR() antlr.Token { return s._TK_IDENTIFICADOR }

func (s *DefinicionesContext) Set_TK_IDENTIFICADOR(v antlr.Token) { s._TK_IDENTIFICADOR = v }

func (s *DefinicionesContext) Get_valref() IValrefContext { return s._valref }

func (s *DefinicionesContext) Get_tipos() ITiposContext { return s._tipos }

func (s *DefinicionesContext) Get_tipos_vectorarre() ITipos_vectorarreContext {
	return s._tipos_vectorarre
}

func (s *DefinicionesContext) Get_expression() IExpressionContext { return s._expression }

func (s *DefinicionesContext) Set_valref(v IValrefContext) { s._valref = v }

func (s *DefinicionesContext) Set_tipos(v ITiposContext) { s._tipos = v }

func (s *DefinicionesContext) Set_tipos_vectorarre(v ITipos_vectorarreContext) {
	s._tipos_vectorarre = v
}

func (s *DefinicionesContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *DefinicionesContext) GetPa() parametros.Param { return s.pa }

func (s *DefinicionesContext) SetPa(v parametros.Param) { s.pa = v }

func (s *DefinicionesContext) TK_IDENTIFICADOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_IDENTIFICADOR, 0)
}

func (s *DefinicionesContext) TK_DP() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_DP, 0)
}

func (s *DefinicionesContext) Valref() IValrefContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValrefContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValrefContext)
}

func (s *DefinicionesContext) Tipos() ITiposContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITiposContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITiposContext)
}

func (s *DefinicionesContext) TK_VECTOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_VECTOR, 0)
}

func (s *DefinicionesContext) Tipos_vectorarre() ITipos_vectorarreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipos_vectorarreContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipos_vectorarreContext)
}

func (s *DefinicionesContext) TK_CI() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_CI, 0)
}

func (s *DefinicionesContext) TK_PYC() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PYC, 0)
}

func (s *DefinicionesContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DefinicionesContext) TK_CD() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_CD, 0)
}

func (s *DefinicionesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefinicionesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefinicionesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterDefiniciones(s)
	}
}

func (s *DefinicionesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitDefiniciones(s)
	}
}

func (p *db_rustparser) Definiciones() (localctx IDefinicionesContext) {
	localctx = NewDefinicionesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, db_rustparserRULE_definiciones)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(292)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 8, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(269)

			var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

			localctx.(*DefinicionesContext)._TK_IDENTIFICADOR = _m
		}
		{
			p.SetState(270)
			p.Match(db_rustparserTK_DP)
		}
		{
			p.SetState(271)

			var _x = p.Valref()

			localctx.(*DefinicionesContext)._valref = _x
		}
		{
			p.SetState(272)

			var _x = p.Tipos()

			localctx.(*DefinicionesContext)._tipos = _x
		}

		localctx.(*DefinicionesContext).pa = parametros.Nuevo_parametro((func() string {
			if localctx.(*DefinicionesContext).Get_TK_IDENTIFICADOR() == nil {
				return ""
			} else {
				return localctx.(*DefinicionesContext).Get_TK_IDENTIFICADOR().GetText()
			}
		}()), localctx.(*DefinicionesContext).Get_valref().GetVal(), "variable", localctx.(*DefinicionesContext).Get_tipos().GetTip(), nil, nil, (func() int {
			if localctx.(*DefinicionesContext).Get_TK_IDENTIFICADOR() == nil {
				return 0
			} else {
				return localctx.(*DefinicionesContext).Get_TK_IDENTIFICADOR().GetLine()
			}
		}()), localctx.(*DefinicionesContext).Get_TK_IDENTIFICADOR().GetColumn())

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(275)

			var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

			localctx.(*DefinicionesContext)._TK_IDENTIFICADOR = _m
		}
		{
			p.SetState(276)
			p.Match(db_rustparserTK_DP)
		}
		{
			p.SetState(277)

			var _x = p.Valref()

			localctx.(*DefinicionesContext)._valref = _x
		}
		{
			p.SetState(278)
			p.Match(db_rustparserTK_VECTOR)
		}
		{
			p.SetState(279)

			var _x = p.Tipos_vectorarre()

			localctx.(*DefinicionesContext)._tipos_vectorarre = _x
		}

		localctx.(*DefinicionesContext).pa = parametros.Nuevo_parametro((func() string {
			if localctx.(*DefinicionesContext).Get_TK_IDENTIFICADOR() == nil {
				return ""
			} else {
				return localctx.(*DefinicionesContext).Get_TK_IDENTIFICADOR().GetText()
			}
		}()), localctx.(*DefinicionesContext).Get_valref().GetVal(), "vector", simbolos.NULL, localctx.(*DefinicionesContext).Get_tipos_vectorarre().GetP(), nil, (func() int {
			if localctx.(*DefinicionesContext).Get_TK_IDENTIFICADOR() == nil {
				return 0
			} else {
				return localctx.(*DefinicionesContext).Get_TK_IDENTIFICADOR().GetLine()
			}
		}()), localctx.(*DefinicionesContext).Get_TK_IDENTIFICADOR().GetColumn())

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(282)

			var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

			localctx.(*DefinicionesContext)._TK_IDENTIFICADOR = _m
		}
		{
			p.SetState(283)
			p.Match(db_rustparserTK_DP)
		}
		{
			p.SetState(284)

			var _x = p.Valref()

			localctx.(*DefinicionesContext)._valref = _x
		}
		{
			p.SetState(285)
			p.Match(db_rustparserTK_CI)
		}
		{
			p.SetState(286)

			var _x = p.Tipos_vectorarre()

			localctx.(*DefinicionesContext)._tipos_vectorarre = _x
		}
		{
			p.SetState(287)
			p.Match(db_rustparserTK_PYC)
		}
		{
			p.SetState(288)

			var _x = p.Expression()

			localctx.(*DefinicionesContext)._expression = _x
		}
		{
			p.SetState(289)
			p.Match(db_rustparserTK_CD)
		}

		localctx.(*DefinicionesContext).pa = parametros.Nuevo_parametro((func() string {
			if localctx.(*DefinicionesContext).Get_TK_IDENTIFICADOR() == nil {
				return ""
			} else {
				return localctx.(*DefinicionesContext).Get_TK_IDENTIFICADOR().GetText()
			}
		}()), localctx.(*DefinicionesContext).Get_valref().GetVal(), "arreglo", simbolos.NULL, localctx.(*DefinicionesContext).Get_tipos_vectorarre().GetP(), localctx.(*DefinicionesContext).Get_expression().GetP(), (func() int {
			if localctx.(*DefinicionesContext).Get_TK_IDENTIFICADOR() == nil {
				return 0
			} else {
				return localctx.(*DefinicionesContext).Get_TK_IDENTIFICADOR().GetLine()
			}
		}()), localctx.(*DefinicionesContext).Get_TK_IDENTIFICADOR().GetColumn())

	}

	return localctx
}

// IValrefContext is an interface to support dynamic dispatch.
type IValrefContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetVal returns the val attribute.
	GetVal() int

	// SetVal sets the val attribute.
	SetVal(int)

	// IsValrefContext differentiates from other interfaces.
	IsValrefContext()
}

type ValrefContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	val    int
}

func NewEmptyValrefContext() *ValrefContext {
	var p = new(ValrefContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_valref
	return p
}

func (*ValrefContext) IsValrefContext() {}

func NewValrefContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ValrefContext {
	var p = new(ValrefContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_valref

	return p
}

func (s *ValrefContext) GetParser() antlr.Parser { return s.parser }

func (s *ValrefContext) GetVal() int { return s.val }

func (s *ValrefContext) SetVal(v int) { s.val = v }

func (s *ValrefContext) TK_MUT() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_MUT, 0)
}

func (s *ValrefContext) TK_DIRMUT() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_DIRMUT, 0)
}

func (s *ValrefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValrefContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ValrefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterValref(s)
	}
}

func (s *ValrefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitValref(s)
	}
}

func (p *db_rustparser) Valref() (localctx IValrefContext) {
	localctx = NewValrefContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, db_rustparserRULE_valref)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(299)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(294)
			p.Match(db_rustparserTK_MUT)
		}
		localctx.(*ValrefContext).val = 1

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(296)
			p.Match(db_rustparserTK_DIRMUT)
		}
		localctx.(*ValrefContext).val = 2

	case 3:
		p.EnterOuterAlt(localctx, 3)
		localctx.(*ValrefContext).val = 3

	}

	return localctx
}

// ITipos_funcionesContext is an interface to support dynamic dispatch.
type ITipos_funcionesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_tipos returns the _tipos rule contexts.
	Get_tipos() ITiposContext

	// Get_tipos_vectorarre returns the _tipos_vectorarre rule contexts.
	Get_tipos_vectorarre() ITipos_vectorarreContext

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Set_tipos sets the _tipos rule contexts.
	Set_tipos(ITiposContext)

	// Set_tipos_vectorarre sets the _tipos_vectorarre rule contexts.
	Set_tipos_vectorarre(ITipos_vectorarreContext)

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetTf returns the tf attribute.
	GetTf() tipos.TiposFunca

	// SetTf sets the tf attribute.
	SetTf(tipos.TiposFunca)

	// IsTipos_funcionesContext differentiates from other interfaces.
	IsTipos_funcionesContext()
}

type Tipos_funcionesContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	tf                tipos.TiposFunca
	_tipos            ITiposContext
	_tipos_vectorarre ITipos_vectorarreContext
	_expression       IExpressionContext
}

func NewEmptyTipos_funcionesContext() *Tipos_funcionesContext {
	var p = new(Tipos_funcionesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_tipos_funciones
	return p
}

func (*Tipos_funcionesContext) IsTipos_funcionesContext() {}

func NewTipos_funcionesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tipos_funcionesContext {
	var p = new(Tipos_funcionesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_tipos_funciones

	return p
}

func (s *Tipos_funcionesContext) GetParser() antlr.Parser { return s.parser }

func (s *Tipos_funcionesContext) Get_tipos() ITiposContext { return s._tipos }

func (s *Tipos_funcionesContext) Get_tipos_vectorarre() ITipos_vectorarreContext {
	return s._tipos_vectorarre
}

func (s *Tipos_funcionesContext) Get_expression() IExpressionContext { return s._expression }

func (s *Tipos_funcionesContext) Set_tipos(v ITiposContext) { s._tipos = v }

func (s *Tipos_funcionesContext) Set_tipos_vectorarre(v ITipos_vectorarreContext) {
	s._tipos_vectorarre = v
}

func (s *Tipos_funcionesContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *Tipos_funcionesContext) GetTf() tipos.TiposFunca { return s.tf }

func (s *Tipos_funcionesContext) SetTf(v tipos.TiposFunca) { s.tf = v }

func (s *Tipos_funcionesContext) TK_IGUAL() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_IGUAL, 0)
}

func (s *Tipos_funcionesContext) TK_MAYOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_MAYOR, 0)
}

func (s *Tipos_funcionesContext) Tipos() ITiposContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITiposContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITiposContext)
}

func (s *Tipos_funcionesContext) TK_VECTOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_VECTOR, 0)
}

func (s *Tipos_funcionesContext) Tipos_vectorarre() ITipos_vectorarreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipos_vectorarreContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipos_vectorarreContext)
}

func (s *Tipos_funcionesContext) TK_CI() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_CI, 0)
}

func (s *Tipos_funcionesContext) TK_PYC() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PYC, 0)
}

func (s *Tipos_funcionesContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Tipos_funcionesContext) TK_CD() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_CD, 0)
}

func (s *Tipos_funcionesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tipos_funcionesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tipos_funcionesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterTipos_funciones(s)
	}
}

func (s *Tipos_funcionesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitTipos_funciones(s)
	}
}

func (p *db_rustparser) Tipos_funciones() (localctx ITipos_funcionesContext) {
	localctx = NewTipos_funcionesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, db_rustparserRULE_tipos_funciones)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(322)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(301)
			p.Match(db_rustparserTK_IGUAL)
		}
		{
			p.SetState(302)
			p.Match(db_rustparserTK_MAYOR)
		}
		{
			p.SetState(303)

			var _x = p.Tipos()

			localctx.(*Tipos_funcionesContext)._tipos = _x
		}

		localctx.(*Tipos_funcionesContext).tf = tipos.Ntiposfunca("variable", localctx.(*Tipos_funcionesContext).Get_tipos().GetTip(), nil, nil)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(306)
			p.Match(db_rustparserTK_IGUAL)
		}
		{
			p.SetState(307)
			p.Match(db_rustparserTK_MAYOR)
		}
		{
			p.SetState(308)
			p.Match(db_rustparserTK_VECTOR)
		}
		{
			p.SetState(309)

			var _x = p.Tipos_vectorarre()

			localctx.(*Tipos_funcionesContext)._tipos_vectorarre = _x
		}

		localctx.(*Tipos_funcionesContext).tf = tipos.Ntiposfunca("vector", simbolos.NULL, localctx.(*Tipos_funcionesContext).Get_tipos_vectorarre().GetP(), nil)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(312)
			p.Match(db_rustparserTK_IGUAL)
		}
		{
			p.SetState(313)
			p.Match(db_rustparserTK_MAYOR)
		}
		{
			p.SetState(314)
			p.Match(db_rustparserTK_CI)
		}
		{
			p.SetState(315)

			var _x = p.Tipos_vectorarre()

			localctx.(*Tipos_funcionesContext)._tipos_vectorarre = _x
		}
		{
			p.SetState(316)
			p.Match(db_rustparserTK_PYC)
		}
		{
			p.SetState(317)

			var _x = p.Expression()

			localctx.(*Tipos_funcionesContext)._expression = _x
		}
		{
			p.SetState(318)
			p.Match(db_rustparserTK_CD)
		}

		localctx.(*Tipos_funcionesContext).tf = tipos.Ntiposfunca("arreglo", simbolos.NULL, localctx.(*Tipos_funcionesContext).Get_tipos_vectorarre().GetP(), localctx.(*Tipos_funcionesContext).Get_expression().GetP())

	case 4:
		p.EnterOuterAlt(localctx, 4)

		localctx.(*Tipos_funcionesContext).tf = tipos.Ntiposfunca("null", simbolos.NULL, nil, nil)

	}

	return localctx
}

// ISent_ifContext is an interface to support dynamic dispatch.
type ISent_ifContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Get_l_bloque returns the _l_bloque rule contexts.
	Get_l_bloque() IL_bloqueContext

	// GetInst returns the inst rule contexts.
	GetInst() IL_bloqueContext

	// GetEls returns the els rule contexts.
	GetEls() IL_bloqueContext

	// Get_sent_ifelse returns the _sent_ifelse rule contexts.
	Get_sent_ifelse() ISent_ifelseContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// Set_l_bloque sets the _l_bloque rule contexts.
	Set_l_bloque(IL_bloqueContext)

	// SetInst sets the inst rule contexts.
	SetInst(IL_bloqueContext)

	// SetEls sets the els rule contexts.
	SetEls(IL_bloqueContext)

	// Set_sent_ifelse sets the _sent_ifelse rule contexts.
	Set_sent_ifelse(ISent_ifelseContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruccion

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruccion)

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsSent_ifContext differentiates from other interfaces.
	IsSent_ifContext()
}

type Sent_ifContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	instr        interfaces.Instruccion
	p            interfaces.Expresion
	_expression  IExpressionContext
	_l_bloque    IL_bloqueContext
	inst         IL_bloqueContext
	els          IL_bloqueContext
	_sent_ifelse ISent_ifelseContext
}

func NewEmptySent_ifContext() *Sent_ifContext {
	var p = new(Sent_ifContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_sent_if
	return p
}

func (*Sent_ifContext) IsSent_ifContext() {}

func NewSent_ifContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sent_ifContext {
	var p = new(Sent_ifContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_sent_if

	return p
}

func (s *Sent_ifContext) GetParser() antlr.Parser { return s.parser }

func (s *Sent_ifContext) Get_expression() IExpressionContext { return s._expression }

func (s *Sent_ifContext) Get_l_bloque() IL_bloqueContext { return s._l_bloque }

func (s *Sent_ifContext) GetInst() IL_bloqueContext { return s.inst }

func (s *Sent_ifContext) GetEls() IL_bloqueContext { return s.els }

func (s *Sent_ifContext) Get_sent_ifelse() ISent_ifelseContext { return s._sent_ifelse }

func (s *Sent_ifContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *Sent_ifContext) Set_l_bloque(v IL_bloqueContext) { s._l_bloque = v }

func (s *Sent_ifContext) SetInst(v IL_bloqueContext) { s.inst = v }

func (s *Sent_ifContext) SetEls(v IL_bloqueContext) { s.els = v }

func (s *Sent_ifContext) Set_sent_ifelse(v ISent_ifelseContext) { s._sent_ifelse = v }

func (s *Sent_ifContext) GetInstr() interfaces.Instruccion { return s.instr }

func (s *Sent_ifContext) GetP() interfaces.Expresion { return s.p }

func (s *Sent_ifContext) SetInstr(v interfaces.Instruccion) { s.instr = v }

func (s *Sent_ifContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Sent_ifContext) TK_IF() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_IF, 0)
}

func (s *Sent_ifContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Sent_ifContext) AllTK_LI() []antlr.TerminalNode {
	return s.GetTokens(db_rustparserTK_LI)
}

func (s *Sent_ifContext) TK_LI(i int) antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_LI, i)
}

func (s *Sent_ifContext) AllL_bloque() []IL_bloqueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IL_bloqueContext)(nil)).Elem())
	var tst = make([]IL_bloqueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IL_bloqueContext)
		}
	}

	return tst
}

func (s *Sent_ifContext) L_bloque(i int) IL_bloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IL_bloqueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IL_bloqueContext)
}

func (s *Sent_ifContext) AllTK_LD() []antlr.TerminalNode {
	return s.GetTokens(db_rustparserTK_LD)
}

func (s *Sent_ifContext) TK_LD(i int) antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_LD, i)
}

func (s *Sent_ifContext) TK_ELSE() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_ELSE, 0)
}

func (s *Sent_ifContext) Sent_ifelse() ISent_ifelseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISent_ifelseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISent_ifelseContext)
}

func (s *Sent_ifContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sent_ifContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sent_ifContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterSent_if(s)
	}
}

func (s *Sent_ifContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitSent_if(s)
	}
}

func (p *db_rustparser) Sent_if() (localctx ISent_ifContext) {
	localctx = NewSent_ifContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, db_rustparserRULE_sent_if)

	lista := arrayList.New()

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(351)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(324)
			p.Match(db_rustparserTK_IF)
		}
		{
			p.SetState(325)

			var _x = p.Expression()

			localctx.(*Sent_ifContext)._expression = _x
		}
		{
			p.SetState(326)
			p.Match(db_rustparserTK_LI)
		}
		{
			p.SetState(327)

			var _x = p.l_bloque(0)

			localctx.(*Sent_ifContext)._l_bloque = _x
		}
		{
			p.SetState(328)
			p.Match(db_rustparserTK_LD)
		}

		localctx.(*Sent_ifContext).instr = scondicional.Nsi(localctx.(*Sent_ifContext).Get_expression().GetP(), localctx.(*Sent_ifContext).Get_l_bloque().GetLbloque(), lista)
		localctx.(*Sent_ifContext).p = scondicional.Nsi(localctx.(*Sent_ifContext).Get_expression().GetP(), localctx.(*Sent_ifContext).Get_l_bloque().GetLbloque(), lista)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(331)
			p.Match(db_rustparserTK_IF)
		}
		{
			p.SetState(332)

			var _x = p.Expression()

			localctx.(*Sent_ifContext)._expression = _x
		}
		{
			p.SetState(333)
			p.Match(db_rustparserTK_LI)
		}
		{
			p.SetState(334)

			var _x = p.l_bloque(0)

			localctx.(*Sent_ifContext).inst = _x
		}
		{
			p.SetState(335)
			p.Match(db_rustparserTK_LD)
		}
		{
			p.SetState(336)
			p.Match(db_rustparserTK_ELSE)
		}
		{
			p.SetState(337)
			p.Match(db_rustparserTK_LI)
		}
		{
			p.SetState(338)

			var _x = p.l_bloque(0)

			localctx.(*Sent_ifContext).els = _x
		}
		{
			p.SetState(339)
			p.Match(db_rustparserTK_LD)
		}

		localctx.(*Sent_ifContext).instr = scondicional.Nsi(localctx.(*Sent_ifContext).Get_expression().GetP(), localctx.(*Sent_ifContext).GetInst().GetLbloque(), localctx.(*Sent_ifContext).GetEls().GetLbloque())
		localctx.(*Sent_ifContext).p = scondicional.Nsi(localctx.(*Sent_ifContext).Get_expression().GetP(), localctx.(*Sent_ifContext).GetInst().GetLbloque(), localctx.(*Sent_ifContext).GetEls().GetLbloque())

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(342)
			p.Match(db_rustparserTK_IF)
		}
		{
			p.SetState(343)

			var _x = p.Expression()

			localctx.(*Sent_ifContext)._expression = _x
		}
		{
			p.SetState(344)
			p.Match(db_rustparserTK_LI)
		}
		{
			p.SetState(345)

			var _x = p.l_bloque(0)

			localctx.(*Sent_ifContext)._l_bloque = _x
		}
		{
			p.SetState(346)
			p.Match(db_rustparserTK_LD)
		}
		{
			p.SetState(347)
			p.Match(db_rustparserTK_ELSE)
		}
		{
			p.SetState(348)

			var _x = p.Sent_ifelse()

			localctx.(*Sent_ifContext)._sent_ifelse = _x
		}

		localctx.(*Sent_ifContext).instr = scondicional.Nsi(localctx.(*Sent_ifContext).Get_expression().GetP(), localctx.(*Sent_ifContext).Get_l_bloque().GetLbloque(), localctx.(*Sent_ifContext).Get_sent_ifelse().GetLia())
		localctx.(*Sent_ifContext).p = scondicional.Nsi(localctx.(*Sent_ifContext).Get_expression().GetP(), localctx.(*Sent_ifContext).Get_l_bloque().GetLbloque(), localctx.(*Sent_ifContext).Get_sent_ifelse().GetLia())

	}

	return localctx
}

// ISent_ifelseContext is an interface to support dynamic dispatch.
type ISent_ifelseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_sent_if returns the _sent_if rule contexts.
	Get_sent_if() ISent_ifContext

	// Set_sent_if sets the _sent_if rule contexts.
	Set_sent_if(ISent_ifContext)

	// GetLia returns the lia attribute.
	GetLia() *arrayList.List

	// SetLia sets the lia attribute.
	SetLia(*arrayList.List)

	// IsSent_ifelseContext differentiates from other interfaces.
	IsSent_ifelseContext()
}

type Sent_ifelseContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	lia      *arrayList.List
	_sent_if ISent_ifContext
}

func NewEmptySent_ifelseContext() *Sent_ifelseContext {
	var p = new(Sent_ifelseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_sent_ifelse
	return p
}

func (*Sent_ifelseContext) IsSent_ifelseContext() {}

func NewSent_ifelseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sent_ifelseContext {
	var p = new(Sent_ifelseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_sent_ifelse

	return p
}

func (s *Sent_ifelseContext) GetParser() antlr.Parser { return s.parser }

func (s *Sent_ifelseContext) Get_sent_if() ISent_ifContext { return s._sent_if }

func (s *Sent_ifelseContext) Set_sent_if(v ISent_ifContext) { s._sent_if = v }

func (s *Sent_ifelseContext) GetLia() *arrayList.List { return s.lia }

func (s *Sent_ifelseContext) SetLia(v *arrayList.List) { s.lia = v }

func (s *Sent_ifelseContext) Sent_if() ISent_ifContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISent_ifContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISent_ifContext)
}

func (s *Sent_ifelseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sent_ifelseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sent_ifelseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterSent_ifelse(s)
	}
}

func (s *Sent_ifelseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitSent_ifelse(s)
	}
}

func (p *db_rustparser) Sent_ifelse() (localctx ISent_ifelseContext) {
	localctx = NewSent_ifelseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, db_rustparserRULE_sent_ifelse)

	localctx.(*Sent_ifelseContext).lia = arrayList.New()

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(353)

		var _x = p.Sent_if()

		localctx.(*Sent_ifelseContext)._sent_if = _x
	}

	localctx.(*Sent_ifelseContext).lia.Add(localctx.(*Sent_ifelseContext).Get_sent_if().GetInstr())

	return localctx
}

// ISent_matchContext is an interface to support dynamic dispatch.
type ISent_matchContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Get_l_matches returns the _l_matches rule contexts.
	Get_l_matches() IL_matchesContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// Set_l_matches sets the _l_matches rule contexts.
	Set_l_matches(IL_matchesContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruccion

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruccion)

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsSent_matchContext differentiates from other interfaces.
	IsSent_matchContext()
}

type Sent_matchContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	instr       interfaces.Instruccion
	p           interfaces.Expresion
	_expression IExpressionContext
	_l_matches  IL_matchesContext
}

func NewEmptySent_matchContext() *Sent_matchContext {
	var p = new(Sent_matchContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_sent_match
	return p
}

func (*Sent_matchContext) IsSent_matchContext() {}

func NewSent_matchContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sent_matchContext {
	var p = new(Sent_matchContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_sent_match

	return p
}

func (s *Sent_matchContext) GetParser() antlr.Parser { return s.parser }

func (s *Sent_matchContext) Get_expression() IExpressionContext { return s._expression }

func (s *Sent_matchContext) Get_l_matches() IL_matchesContext { return s._l_matches }

func (s *Sent_matchContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *Sent_matchContext) Set_l_matches(v IL_matchesContext) { s._l_matches = v }

func (s *Sent_matchContext) GetInstr() interfaces.Instruccion { return s.instr }

func (s *Sent_matchContext) GetP() interfaces.Expresion { return s.p }

func (s *Sent_matchContext) SetInstr(v interfaces.Instruccion) { s.instr = v }

func (s *Sent_matchContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Sent_matchContext) TK_MATCH() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_MATCH, 0)
}

func (s *Sent_matchContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Sent_matchContext) TK_LI() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_LI, 0)
}

func (s *Sent_matchContext) L_matches() IL_matchesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IL_matchesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IL_matchesContext)
}

func (s *Sent_matchContext) TK_LD() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_LD, 0)
}

func (s *Sent_matchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sent_matchContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sent_matchContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterSent_match(s)
	}
}

func (s *Sent_matchContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitSent_match(s)
	}
}

func (p *db_rustparser) Sent_match() (localctx ISent_matchContext) {
	localctx = NewSent_matchContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, db_rustparserRULE_sent_match)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(356)
		p.Match(db_rustparserTK_MATCH)
	}
	{
		p.SetState(357)

		var _x = p.Expression()

		localctx.(*Sent_matchContext)._expression = _x
	}
	{
		p.SetState(358)
		p.Match(db_rustparserTK_LI)
	}
	{
		p.SetState(359)

		var _x = p.l_matches(0)

		localctx.(*Sent_matchContext)._l_matches = _x
	}
	{
		p.SetState(360)
		p.Match(db_rustparserTK_LD)
	}

	localctx.(*Sent_matchContext).instr = smatch.Nmatch(localctx.(*Sent_matchContext).Get_expression().GetP(), localctx.(*Sent_matchContext).Get_l_matches().GetLmatch())
	localctx.(*Sent_matchContext).p = smatch.Nmatch(localctx.(*Sent_matchContext).Get_expression().GetP(), localctx.(*Sent_matchContext).Get_l_matches().GetLmatch())

	return localctx
}

// IL_matchesContext is an interface to support dynamic dispatch.
type IL_matchesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMatchs returns the matchs rule contexts.
	GetMatchs() IL_matchesContext

	// Get_matches returns the _matches rule contexts.
	Get_matches() IMatchesContext

	// SetMatchs sets the matchs rule contexts.
	SetMatchs(IL_matchesContext)

	// Set_matches sets the _matches rule contexts.
	Set_matches(IMatchesContext)

	// GetLmatch returns the lmatch attribute.
	GetLmatch() *arrayList.List

	// SetLmatch sets the lmatch attribute.
	SetLmatch(*arrayList.List)

	// IsL_matchesContext differentiates from other interfaces.
	IsL_matchesContext()
}

type L_matchesContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	lmatch   *arrayList.List
	matchs   IL_matchesContext
	_matches IMatchesContext
}

func NewEmptyL_matchesContext() *L_matchesContext {
	var p = new(L_matchesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_l_matches
	return p
}

func (*L_matchesContext) IsL_matchesContext() {}

func NewL_matchesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *L_matchesContext {
	var p = new(L_matchesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_l_matches

	return p
}

func (s *L_matchesContext) GetParser() antlr.Parser { return s.parser }

func (s *L_matchesContext) GetMatchs() IL_matchesContext { return s.matchs }

func (s *L_matchesContext) Get_matches() IMatchesContext { return s._matches }

func (s *L_matchesContext) SetMatchs(v IL_matchesContext) { s.matchs = v }

func (s *L_matchesContext) Set_matches(v IMatchesContext) { s._matches = v }

func (s *L_matchesContext) GetLmatch() *arrayList.List { return s.lmatch }

func (s *L_matchesContext) SetLmatch(v *arrayList.List) { s.lmatch = v }

func (s *L_matchesContext) Matches() IMatchesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMatchesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMatchesContext)
}

func (s *L_matchesContext) L_matches() IL_matchesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IL_matchesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IL_matchesContext)
}

func (s *L_matchesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *L_matchesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *L_matchesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterL_matches(s)
	}
}

func (s *L_matchesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitL_matches(s)
	}
}

func (p *db_rustparser) L_matches() (localctx IL_matchesContext) {
	return p.l_matches(0)
}

func (p *db_rustparser) l_matches(_p int) (localctx IL_matchesContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewL_matchesContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IL_matchesContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 36
	p.EnterRecursionRule(localctx, 36, db_rustparserRULE_l_matches, _p)

	localctx.(*L_matchesContext).lmatch = arrayList.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(364)

		var _x = p.Matches()

		localctx.(*L_matchesContext)._matches = _x
	}
	localctx.(*L_matchesContext).lmatch.Add(localctx.(*L_matchesContext).Get_matches().GetInstr())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(373)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewL_matchesContext(p, _parentctx, _parentState)
			localctx.(*L_matchesContext).matchs = _prevctx
			p.PushNewRecursionContext(localctx, _startState, db_rustparserRULE_l_matches)
			p.SetState(367)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(368)

				var _x = p.Matches()

				localctx.(*L_matchesContext)._matches = _x
			}

			localctx.(*L_matchesContext).GetMatchs().GetLmatch().Add(localctx.(*L_matchesContext).Get_matches().GetInstr())
			localctx.(*L_matchesContext).lmatch = localctx.(*L_matchesContext).GetMatchs().GetLmatch()

		}
		p.SetState(375)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext())
	}

	return localctx
}

// IMatchesContext is an interface to support dynamic dispatch.
type IMatchesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Get_l_bloque returns the _l_bloque rule contexts.
	Get_l_bloque() IL_bloqueContext

	// Get_l_mat_con returns the _l_mat_con rule contexts.
	Get_l_mat_con() IL_mat_conContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// Set_l_bloque sets the _l_bloque rule contexts.
	Set_l_bloque(IL_bloqueContext)

	// Set_l_mat_con sets the _l_mat_con rule contexts.
	Set_l_mat_con(IL_mat_conContext)

	// GetInstr returns the instr attribute.
	GetInstr() smatch.Matches

	// SetInstr sets the instr attribute.
	SetInstr(smatch.Matches)

	// IsMatchesContext differentiates from other interfaces.
	IsMatchesContext()
}

type MatchesContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	instr       smatch.Matches
	_expression IExpressionContext
	_l_bloque   IL_bloqueContext
	_l_mat_con  IL_mat_conContext
}

func NewEmptyMatchesContext() *MatchesContext {
	var p = new(MatchesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_matches
	return p
}

func (*MatchesContext) IsMatchesContext() {}

func NewMatchesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchesContext {
	var p = new(MatchesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_matches

	return p
}

func (s *MatchesContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchesContext) Get_expression() IExpressionContext { return s._expression }

func (s *MatchesContext) Get_l_bloque() IL_bloqueContext { return s._l_bloque }

func (s *MatchesContext) Get_l_mat_con() IL_mat_conContext { return s._l_mat_con }

func (s *MatchesContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *MatchesContext) Set_l_bloque(v IL_bloqueContext) { s._l_bloque = v }

func (s *MatchesContext) Set_l_mat_con(v IL_mat_conContext) { s._l_mat_con = v }

func (s *MatchesContext) GetInstr() smatch.Matches { return s.instr }

func (s *MatchesContext) SetInstr(v smatch.Matches) { s.instr = v }

func (s *MatchesContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *MatchesContext) TK_IGUAL() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_IGUAL, 0)
}

func (s *MatchesContext) TK_MAYOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_MAYOR, 0)
}

func (s *MatchesContext) TK_LI() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_LI, 0)
}

func (s *MatchesContext) L_bloque() IL_bloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IL_bloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IL_bloqueContext)
}

func (s *MatchesContext) TK_LD() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_LD, 0)
}

func (s *MatchesContext) L_mat_con() IL_mat_conContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IL_mat_conContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IL_mat_conContext)
}

func (s *MatchesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterMatches(s)
	}
}

func (s *MatchesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitMatches(s)
	}
}

func (p *db_rustparser) Matches() (localctx IMatchesContext) {
	localctx = NewMatchesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, db_rustparserRULE_matches)

	listica := arrayList.New()

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(392)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(376)

			var _x = p.Expression()

			localctx.(*MatchesContext)._expression = _x
		}
		{
			p.SetState(377)
			p.Match(db_rustparserTK_IGUAL)
		}
		{
			p.SetState(378)
			p.Match(db_rustparserTK_MAYOR)
		}
		{
			p.SetState(379)
			p.Match(db_rustparserTK_LI)
		}
		{
			p.SetState(380)

			var _x = p.l_bloque(0)

			localctx.(*MatchesContext)._l_bloque = _x
		}
		{
			p.SetState(381)
			p.Match(db_rustparserTK_LD)
		}

		localctx.(*MatchesContext).instr = smatch.Nmatches(localctx.(*MatchesContext).Get_expression().GetP(), localctx.(*MatchesContext).Get_l_bloque().GetLbloque(), false, listica)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(384)

			var _x = p.l_mat_con(0)

			localctx.(*MatchesContext)._l_mat_con = _x
		}
		{
			p.SetState(385)
			p.Match(db_rustparserTK_IGUAL)
		}
		{
			p.SetState(386)
			p.Match(db_rustparserTK_MAYOR)
		}
		{
			p.SetState(387)
			p.Match(db_rustparserTK_LI)
		}
		{
			p.SetState(388)

			var _x = p.l_bloque(0)

			localctx.(*MatchesContext)._l_bloque = _x
		}
		{
			p.SetState(389)
			p.Match(db_rustparserTK_LD)
		}

		localctx.(*MatchesContext).instr = smatch.Nmatches(primitivo.Nuevo_Dato_Primitivo("holas", simbolos.YTEXTO), localctx.(*MatchesContext).Get_l_bloque().GetLbloque(), true, localctx.(*MatchesContext).Get_l_mat_con().GetCondis())

	}

	return localctx
}

// IL_mat_conContext is an interface to support dynamic dispatch.
type IL_mat_conContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetE returns the e rule contexts.
	GetE() IL_mat_conContext

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// SetE sets the e rule contexts.
	SetE(IL_mat_conContext)

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetCondis returns the condis attribute.
	GetCondis() *arrayList.List

	// SetCondis sets the condis attribute.
	SetCondis(*arrayList.List)

	// IsL_mat_conContext differentiates from other interfaces.
	IsL_mat_conContext()
}

type L_mat_conContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	condis      *arrayList.List
	e           IL_mat_conContext
	_expression IExpressionContext
}

func NewEmptyL_mat_conContext() *L_mat_conContext {
	var p = new(L_mat_conContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_l_mat_con
	return p
}

func (*L_mat_conContext) IsL_mat_conContext() {}

func NewL_mat_conContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *L_mat_conContext {
	var p = new(L_mat_conContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_l_mat_con

	return p
}

func (s *L_mat_conContext) GetParser() antlr.Parser { return s.parser }

func (s *L_mat_conContext) GetE() IL_mat_conContext { return s.e }

func (s *L_mat_conContext) Get_expression() IExpressionContext { return s._expression }

func (s *L_mat_conContext) SetE(v IL_mat_conContext) { s.e = v }

func (s *L_mat_conContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *L_mat_conContext) GetCondis() *arrayList.List { return s.condis }

func (s *L_mat_conContext) SetCondis(v *arrayList.List) { s.condis = v }

func (s *L_mat_conContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *L_mat_conContext) TK_BARRA() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_BARRA, 0)
}

func (s *L_mat_conContext) L_mat_con() IL_mat_conContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IL_mat_conContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IL_mat_conContext)
}

func (s *L_mat_conContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *L_mat_conContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *L_mat_conContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterL_mat_con(s)
	}
}

func (s *L_mat_conContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitL_mat_con(s)
	}
}

func (p *db_rustparser) L_mat_con() (localctx IL_mat_conContext) {
	return p.l_mat_con(0)
}

func (p *db_rustparser) l_mat_con(_p int) (localctx IL_mat_conContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewL_mat_conContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IL_mat_conContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 40
	p.EnterRecursionRule(localctx, 40, db_rustparserRULE_l_mat_con, _p)

	localctx.(*L_mat_conContext).condis = arrayList.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(395)

		var _x = p.Expression()

		localctx.(*L_mat_conContext)._expression = _x
	}
	localctx.(*L_mat_conContext).condis.Add(localctx.(*L_mat_conContext).Get_expression().GetP())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(405)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 14, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewL_mat_conContext(p, _parentctx, _parentState)
			localctx.(*L_mat_conContext).e = _prevctx
			p.PushNewRecursionContext(localctx, _startState, db_rustparserRULE_l_mat_con)
			p.SetState(398)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(399)
				p.Match(db_rustparserTK_BARRA)
			}
			{
				p.SetState(400)

				var _x = p.Expression()

				localctx.(*L_mat_conContext)._expression = _x
			}

			localctx.(*L_mat_conContext).GetE().GetCondis().Add(localctx.(*L_mat_conContext).Get_expression().GetP())
			localctx.(*L_mat_conContext).condis = localctx.(*L_mat_conContext).GetE().GetCondis()

		}
		p.SetState(407)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 14, p.GetParserRuleContext())
	}

	return localctx
}

// ILoopContext is an interface to support dynamic dispatch.
type ILoopContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_TK_LOOP returns the _TK_LOOP token.
	Get_TK_LOOP() antlr.Token

	// Set_TK_LOOP sets the _TK_LOOP token.
	Set_TK_LOOP(antlr.Token)

	// Get_l_bloque returns the _l_bloque rule contexts.
	Get_l_bloque() IL_bloqueContext

	// Set_l_bloque sets the _l_bloque rule contexts.
	Set_l_bloque(IL_bloqueContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruccion

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruccion)

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsLoopContext differentiates from other interfaces.
	IsLoopContext()
}

type LoopContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	instr     interfaces.Instruccion
	p         interfaces.Expresion
	_TK_LOOP  antlr.Token
	_l_bloque IL_bloqueContext
}

func NewEmptyLoopContext() *LoopContext {
	var p = new(LoopContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_loop
	return p
}

func (*LoopContext) IsLoopContext() {}

func NewLoopContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopContext {
	var p = new(LoopContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_loop

	return p
}

func (s *LoopContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopContext) Get_TK_LOOP() antlr.Token { return s._TK_LOOP }

func (s *LoopContext) Set_TK_LOOP(v antlr.Token) { s._TK_LOOP = v }

func (s *LoopContext) Get_l_bloque() IL_bloqueContext { return s._l_bloque }

func (s *LoopContext) Set_l_bloque(v IL_bloqueContext) { s._l_bloque = v }

func (s *LoopContext) GetInstr() interfaces.Instruccion { return s.instr }

func (s *LoopContext) GetP() interfaces.Expresion { return s.p }

func (s *LoopContext) SetInstr(v interfaces.Instruccion) { s.instr = v }

func (s *LoopContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *LoopContext) TK_LOOP() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_LOOP, 0)
}

func (s *LoopContext) TK_LI() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_LI, 0)
}

func (s *LoopContext) L_bloque() IL_bloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IL_bloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IL_bloqueContext)
}

func (s *LoopContext) TK_LD() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_LD, 0)
}

func (s *LoopContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterLoop(s)
	}
}

func (s *LoopContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitLoop(s)
	}
}

func (p *db_rustparser) Loop() (localctx ILoopContext) {
	localctx = NewLoopContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, db_rustparserRULE_loop)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(408)

		var _m = p.Match(db_rustparserTK_LOOP)

		localctx.(*LoopContext)._TK_LOOP = _m
	}
	{
		p.SetState(409)
		p.Match(db_rustparserTK_LI)
	}
	{
		p.SetState(410)

		var _x = p.l_bloque(0)

		localctx.(*LoopContext)._l_bloque = _x
	}
	{
		p.SetState(411)
		p.Match(db_rustparserTK_LD)
	}

	localctx.(*LoopContext).instr = cloop.Nloop(localctx.(*LoopContext).Get_l_bloque().GetLbloque(), (func() int {
		if localctx.(*LoopContext).Get_TK_LOOP() == nil {
			return 0
		} else {
			return localctx.(*LoopContext).Get_TK_LOOP().GetLine()
		}
	}()), localctx.(*LoopContext).Get_TK_LOOP().GetColumn())
	localctx.(*LoopContext).p = cloop.Nloop(localctx.(*LoopContext).Get_l_bloque().GetLbloque(), (func() int {
		if localctx.(*LoopContext).Get_TK_LOOP() == nil {
			return 0
		} else {
			return localctx.(*LoopContext).Get_TK_LOOP().GetLine()
		}
	}()), localctx.(*LoopContext).Get_TK_LOOP().GetColumn())

	return localctx
}

// IC_whileContext is an interface to support dynamic dispatch.
type IC_whileContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_TK_WHILE returns the _TK_WHILE token.
	Get_TK_WHILE() antlr.Token

	// Set_TK_WHILE sets the _TK_WHILE token.
	Set_TK_WHILE(antlr.Token)

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Get_l_bloque returns the _l_bloque rule contexts.
	Get_l_bloque() IL_bloqueContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// Set_l_bloque sets the _l_bloque rule contexts.
	Set_l_bloque(IL_bloqueContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruccion

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruccion)

	// IsC_whileContext differentiates from other interfaces.
	IsC_whileContext()
}

type C_whileContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	instr       interfaces.Instruccion
	_TK_WHILE   antlr.Token
	_expression IExpressionContext
	_l_bloque   IL_bloqueContext
}

func NewEmptyC_whileContext() *C_whileContext {
	var p = new(C_whileContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_c_while
	return p
}

func (*C_whileContext) IsC_whileContext() {}

func NewC_whileContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *C_whileContext {
	var p = new(C_whileContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_c_while

	return p
}

func (s *C_whileContext) GetParser() antlr.Parser { return s.parser }

func (s *C_whileContext) Get_TK_WHILE() antlr.Token { return s._TK_WHILE }

func (s *C_whileContext) Set_TK_WHILE(v antlr.Token) { s._TK_WHILE = v }

func (s *C_whileContext) Get_expression() IExpressionContext { return s._expression }

func (s *C_whileContext) Get_l_bloque() IL_bloqueContext { return s._l_bloque }

func (s *C_whileContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *C_whileContext) Set_l_bloque(v IL_bloqueContext) { s._l_bloque = v }

func (s *C_whileContext) GetInstr() interfaces.Instruccion { return s.instr }

func (s *C_whileContext) SetInstr(v interfaces.Instruccion) { s.instr = v }

func (s *C_whileContext) TK_WHILE() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_WHILE, 0)
}

func (s *C_whileContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *C_whileContext) TK_LI() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_LI, 0)
}

func (s *C_whileContext) L_bloque() IL_bloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IL_bloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IL_bloqueContext)
}

func (s *C_whileContext) TK_LD() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_LD, 0)
}

func (s *C_whileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *C_whileContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *C_whileContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterC_while(s)
	}
}

func (s *C_whileContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitC_while(s)
	}
}

func (p *db_rustparser) C_while() (localctx IC_whileContext) {
	localctx = NewC_whileContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, db_rustparserRULE_c_while)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(414)

		var _m = p.Match(db_rustparserTK_WHILE)

		localctx.(*C_whileContext)._TK_WHILE = _m
	}
	{
		p.SetState(415)

		var _x = p.Expression()

		localctx.(*C_whileContext)._expression = _x
	}
	{
		p.SetState(416)
		p.Match(db_rustparserTK_LI)
	}
	{
		p.SetState(417)

		var _x = p.l_bloque(0)

		localctx.(*C_whileContext)._l_bloque = _x
	}
	{
		p.SetState(418)
		p.Match(db_rustparserTK_LD)
	}

	localctx.(*C_whileContext).instr = cwhile.Nwhile(localctx.(*C_whileContext).Get_expression().GetP(), localctx.(*C_whileContext).Get_l_bloque().GetLbloque(), (func() int {
		if localctx.(*C_whileContext).Get_TK_WHILE() == nil {
			return 0
		} else {
			return localctx.(*C_whileContext).Get_TK_WHILE().GetLine()
		}
	}()), localctx.(*C_whileContext).Get_TK_WHILE().GetColumn())

	return localctx
}

// IFor_inContext is an interface to support dynamic dispatch.
type IFor_inContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_TK_IDENTIFICADOR returns the _TK_IDENTIFICADOR token.
	Get_TK_IDENTIFICADOR() antlr.Token

	// Set_TK_IDENTIFICADOR sets the _TK_IDENTIFICADOR token.
	Set_TK_IDENTIFICADOR(antlr.Token)

	// GetInf returns the inf rule contexts.
	GetInf() IExpressionContext

	// Get_l_bloque returns the _l_bloque rule contexts.
	Get_l_bloque() IL_bloqueContext

	// GetSup returns the sup rule contexts.
	GetSup() IExpressionContext

	// SetInf sets the inf rule contexts.
	SetInf(IExpressionContext)

	// Set_l_bloque sets the _l_bloque rule contexts.
	Set_l_bloque(IL_bloqueContext)

	// SetSup sets the sup rule contexts.
	SetSup(IExpressionContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruccion

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruccion)

	// IsFor_inContext differentiates from other interfaces.
	IsFor_inContext()
}

type For_inContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	instr             interfaces.Instruccion
	_TK_IDENTIFICADOR antlr.Token
	inf               IExpressionContext
	_l_bloque         IL_bloqueContext
	sup               IExpressionContext
}

func NewEmptyFor_inContext() *For_inContext {
	var p = new(For_inContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_for_in
	return p
}

func (*For_inContext) IsFor_inContext() {}

func NewFor_inContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *For_inContext {
	var p = new(For_inContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_for_in

	return p
}

func (s *For_inContext) GetParser() antlr.Parser { return s.parser }

func (s *For_inContext) Get_TK_IDENTIFICADOR() antlr.Token { return s._TK_IDENTIFICADOR }

func (s *For_inContext) Set_TK_IDENTIFICADOR(v antlr.Token) { s._TK_IDENTIFICADOR = v }

func (s *For_inContext) GetInf() IExpressionContext { return s.inf }

func (s *For_inContext) Get_l_bloque() IL_bloqueContext { return s._l_bloque }

func (s *For_inContext) GetSup() IExpressionContext { return s.sup }

func (s *For_inContext) SetInf(v IExpressionContext) { s.inf = v }

func (s *For_inContext) Set_l_bloque(v IL_bloqueContext) { s._l_bloque = v }

func (s *For_inContext) SetSup(v IExpressionContext) { s.sup = v }

func (s *For_inContext) GetInstr() interfaces.Instruccion { return s.instr }

func (s *For_inContext) SetInstr(v interfaces.Instruccion) { s.instr = v }

func (s *For_inContext) TK_FOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_FOR, 0)
}

func (s *For_inContext) TK_IDENTIFICADOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_IDENTIFICADOR, 0)
}

func (s *For_inContext) TK_IN() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_IN, 0)
}

func (s *For_inContext) TK_LI() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_LI, 0)
}

func (s *For_inContext) L_bloque() IL_bloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IL_bloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IL_bloqueContext)
}

func (s *For_inContext) TK_LD() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_LD, 0)
}

func (s *For_inContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *For_inContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *For_inContext) AllTK_PUNTO() []antlr.TerminalNode {
	return s.GetTokens(db_rustparserTK_PUNTO)
}

func (s *For_inContext) TK_PUNTO(i int) antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PUNTO, i)
}

func (s *For_inContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *For_inContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *For_inContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterFor_in(s)
	}
}

func (s *For_inContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitFor_in(s)
	}
}

func (p *db_rustparser) For_in() (localctx IFor_inContext) {
	localctx = NewFor_inContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, db_rustparserRULE_for_in)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(442)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(421)
			p.Match(db_rustparserTK_FOR)
		}
		{
			p.SetState(422)

			var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

			localctx.(*For_inContext)._TK_IDENTIFICADOR = _m
		}
		{
			p.SetState(423)
			p.Match(db_rustparserTK_IN)
		}
		{
			p.SetState(424)

			var _x = p.Expression()

			localctx.(*For_inContext).inf = _x
		}
		{
			p.SetState(425)
			p.Match(db_rustparserTK_LI)
		}
		{
			p.SetState(426)

			var _x = p.l_bloque(0)

			localctx.(*For_inContext)._l_bloque = _x
		}
		{
			p.SetState(427)
			p.Match(db_rustparserTK_LD)
		}

		localctx.(*For_inContext).instr = cforin.NforinVA((func() string {
			if localctx.(*For_inContext).Get_TK_IDENTIFICADOR() == nil {
				return ""
			} else {
				return localctx.(*For_inContext).Get_TK_IDENTIFICADOR().GetText()
			}
		}()), localctx.(*For_inContext).GetInf().GetP(), localctx.(*For_inContext).Get_l_bloque().GetLbloque(), (func() int {
			if localctx.(*For_inContext).Get_TK_IDENTIFICADOR() == nil {
				return 0
			} else {
				return localctx.(*For_inContext).Get_TK_IDENTIFICADOR().GetLine()
			}
		}()), localctx.(*For_inContext).Get_TK_IDENTIFICADOR().GetColumn())

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(430)
			p.Match(db_rustparserTK_FOR)
		}
		{
			p.SetState(431)

			var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

			localctx.(*For_inContext)._TK_IDENTIFICADOR = _m
		}
		{
			p.SetState(432)
			p.Match(db_rustparserTK_IN)
		}
		{
			p.SetState(433)

			var _x = p.Expression()

			localctx.(*For_inContext).inf = _x
		}
		{
			p.SetState(434)
			p.Match(db_rustparserTK_PUNTO)
		}
		{
			p.SetState(435)
			p.Match(db_rustparserTK_PUNTO)
		}
		{
			p.SetState(436)

			var _x = p.Expression()

			localctx.(*For_inContext).sup = _x
		}
		{
			p.SetState(437)
			p.Match(db_rustparserTK_LI)
		}
		{
			p.SetState(438)

			var _x = p.l_bloque(0)

			localctx.(*For_inContext)._l_bloque = _x
		}
		{
			p.SetState(439)
			p.Match(db_rustparserTK_LD)
		}

		localctx.(*For_inContext).instr = cforin.Nfin((func() string {
			if localctx.(*For_inContext).Get_TK_IDENTIFICADOR() == nil {
				return ""
			} else {
				return localctx.(*For_inContext).Get_TK_IDENTIFICADOR().GetText()
			}
		}()), localctx.(*For_inContext).GetInf().GetP(), localctx.(*For_inContext).GetSup().GetP(), localctx.(*For_inContext).Get_l_bloque().GetLbloque(), (func() int {
			if localctx.(*For_inContext).Get_TK_IDENTIFICADOR() == nil {
				return 0
			} else {
				return localctx.(*For_inContext).Get_TK_IDENTIFICADOR().GetLine()
			}
		}()), localctx.(*For_inContext).Get_TK_IDENTIFICADOR().GetColumn())

	}

	return localctx
}

// IImprimirContext is an interface to support dynamic dispatch.
type IImprimirContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_TK_PRINTLN returns the _TK_PRINTLN token.
	Get_TK_PRINTLN() antlr.Token

	// Set_TK_PRINTLN sets the _TK_PRINTLN token.
	Set_TK_PRINTLN(antlr.Token)

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Get_list_expres returns the _list_expres rule contexts.
	Get_list_expres() IList_expresContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// Set_list_expres sets the _list_expres rule contexts.
	Set_list_expres(IList_expresContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruccion

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruccion)

	// IsImprimirContext differentiates from other interfaces.
	IsImprimirContext()
}

type ImprimirContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	instr        interfaces.Instruccion
	_TK_PRINTLN  antlr.Token
	_expression  IExpressionContext
	_list_expres IList_expresContext
}

func NewEmptyImprimirContext() *ImprimirContext {
	var p = new(ImprimirContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_imprimir
	return p
}

func (*ImprimirContext) IsImprimirContext() {}

func NewImprimirContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImprimirContext {
	var p = new(ImprimirContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_imprimir

	return p
}

func (s *ImprimirContext) GetParser() antlr.Parser { return s.parser }

func (s *ImprimirContext) Get_TK_PRINTLN() antlr.Token { return s._TK_PRINTLN }

func (s *ImprimirContext) Set_TK_PRINTLN(v antlr.Token) { s._TK_PRINTLN = v }

func (s *ImprimirContext) Get_expression() IExpressionContext { return s._expression }

func (s *ImprimirContext) Get_list_expres() IList_expresContext { return s._list_expres }

func (s *ImprimirContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *ImprimirContext) Set_list_expres(v IList_expresContext) { s._list_expres = v }

func (s *ImprimirContext) GetInstr() interfaces.Instruccion { return s.instr }

func (s *ImprimirContext) SetInstr(v interfaces.Instruccion) { s.instr = v }

func (s *ImprimirContext) TK_PRINTLN() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PRINTLN, 0)
}

func (s *ImprimirContext) TK_PI() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PI, 0)
}

func (s *ImprimirContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ImprimirContext) TK_PD() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PD, 0)
}

func (s *ImprimirContext) TK_PYC() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PYC, 0)
}

func (s *ImprimirContext) TK_COMA() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_COMA, 0)
}

func (s *ImprimirContext) List_expres() IList_expresContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_expresContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_expresContext)
}

func (s *ImprimirContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImprimirContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImprimirContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterImprimir(s)
	}
}

func (s *ImprimirContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitImprimir(s)
	}
}

func (p *db_rustparser) Imprimir() (localctx IImprimirContext) {
	localctx = NewImprimirContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, db_rustparserRULE_imprimir)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(460)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(444)

			var _m = p.Match(db_rustparserTK_PRINTLN)

			localctx.(*ImprimirContext)._TK_PRINTLN = _m
		}
		{
			p.SetState(445)
			p.Match(db_rustparserTK_PI)
		}
		{
			p.SetState(446)

			var _x = p.Expression()

			localctx.(*ImprimirContext)._expression = _x
		}
		{
			p.SetState(447)
			p.Match(db_rustparserTK_PD)
		}
		{
			p.SetState(448)
			p.Match(db_rustparserTK_PYC)
		}

		localctx.(*ImprimirContext).instr = impresion.Nimprimir(localctx.(*ImprimirContext).Get_expression().GetP(), (func() int {
			if localctx.(*ImprimirContext).Get_TK_PRINTLN() == nil {
				return 0
			} else {
				return localctx.(*ImprimirContext).Get_TK_PRINTLN().GetLine()
			}
		}()), localctx.(*ImprimirContext).Get_TK_PRINTLN().GetColumn())

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(451)

			var _m = p.Match(db_rustparserTK_PRINTLN)

			localctx.(*ImprimirContext)._TK_PRINTLN = _m
		}
		{
			p.SetState(452)
			p.Match(db_rustparserTK_PI)
		}
		{
			p.SetState(453)

			var _x = p.Expression()

			localctx.(*ImprimirContext)._expression = _x
		}
		{
			p.SetState(454)
			p.Match(db_rustparserTK_COMA)
		}
		{
			p.SetState(455)

			var _x = p.list_expres(0)

			localctx.(*ImprimirContext)._list_expres = _x
		}
		{
			p.SetState(456)
			p.Match(db_rustparserTK_PD)
		}
		{
			p.SetState(457)
			p.Match(db_rustparserTK_PYC)
		}

		localctx.(*ImprimirContext).instr = impresion.Nimpres(localctx.(*ImprimirContext).Get_expression().GetP(), localctx.(*ImprimirContext).Get_list_expres().GetLis_expres(), (func() int {
			if localctx.(*ImprimirContext).Get_TK_PRINTLN() == nil {
				return 0
			} else {
				return localctx.(*ImprimirContext).Get_TK_PRINTLN().GetLine()
			}
		}()), localctx.(*ImprimirContext).Get_TK_PRINTLN().GetColumn())

	}

	return localctx
}

// IDeclaracionContext is an interface to support dynamic dispatch.
type IDeclaracionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_TK_IDENTIFICADOR returns the _TK_IDENTIFICADOR token.
	Get_TK_IDENTIFICADOR() antlr.Token

	// GetNoms returns the noms token.
	GetNoms() antlr.Token

	// Set_TK_IDENTIFICADOR sets the _TK_IDENTIFICADOR token.
	Set_TK_IDENTIFICADOR(antlr.Token)

	// SetNoms sets the noms token.
	SetNoms(antlr.Token)

	// Get_mutable returns the _mutable rule contexts.
	Get_mutable() IMutableContext

	// Get_l_asigstruct returns the _l_asigstruct rule contexts.
	Get_l_asigstruct() IL_asigstructContext

	// Get_tipado returns the _tipado rule contexts.
	Get_tipado() ITipadoContext

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Get_tamarre returns the _tamarre rule contexts.
	Get_tamarre() ITamarreContext

	// Get_tamvector returns the _tamvector rule contexts.
	Get_tamvector() ITamvectorContext

	// Get_tipos_vectorarre returns the _tipos_vectorarre rule contexts.
	Get_tipos_vectorarre() ITipos_vectorarreContext

	// Set_mutable sets the _mutable rule contexts.
	Set_mutable(IMutableContext)

	// Set_l_asigstruct sets the _l_asigstruct rule contexts.
	Set_l_asigstruct(IL_asigstructContext)

	// Set_tipado sets the _tipado rule contexts.
	Set_tipado(ITipadoContext)

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// Set_tamarre sets the _tamarre rule contexts.
	Set_tamarre(ITamarreContext)

	// Set_tamvector sets the _tamvector rule contexts.
	Set_tamvector(ITamvectorContext)

	// Set_tipos_vectorarre sets the _tipos_vectorarre rule contexts.
	Set_tipos_vectorarre(ITipos_vectorarreContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruccion

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruccion)

	// IsDeclaracionContext differentiates from other interfaces.
	IsDeclaracionContext()
}

type DeclaracionContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	instr             interfaces.Instruccion
	_mutable          IMutableContext
	_TK_IDENTIFICADOR antlr.Token
	noms              antlr.Token
	_l_asigstruct     IL_asigstructContext
	_tipado           ITipadoContext
	_expression       IExpressionContext
	_tamarre          ITamarreContext
	_tamvector        ITamvectorContext
	_tipos_vectorarre ITipos_vectorarreContext
}

func NewEmptyDeclaracionContext() *DeclaracionContext {
	var p = new(DeclaracionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_declaracion
	return p
}

func (*DeclaracionContext) IsDeclaracionContext() {}

func NewDeclaracionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclaracionContext {
	var p = new(DeclaracionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_declaracion

	return p
}

func (s *DeclaracionContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclaracionContext) Get_TK_IDENTIFICADOR() antlr.Token { return s._TK_IDENTIFICADOR }

func (s *DeclaracionContext) GetNoms() antlr.Token { return s.noms }

func (s *DeclaracionContext) Set_TK_IDENTIFICADOR(v antlr.Token) { s._TK_IDENTIFICADOR = v }

func (s *DeclaracionContext) SetNoms(v antlr.Token) { s.noms = v }

func (s *DeclaracionContext) Get_mutable() IMutableContext { return s._mutable }

func (s *DeclaracionContext) Get_l_asigstruct() IL_asigstructContext { return s._l_asigstruct }

func (s *DeclaracionContext) Get_tipado() ITipadoContext { return s._tipado }

func (s *DeclaracionContext) Get_expression() IExpressionContext { return s._expression }

func (s *DeclaracionContext) Get_tamarre() ITamarreContext { return s._tamarre }

func (s *DeclaracionContext) Get_tamvector() ITamvectorContext { return s._tamvector }

func (s *DeclaracionContext) Get_tipos_vectorarre() ITipos_vectorarreContext {
	return s._tipos_vectorarre
}

func (s *DeclaracionContext) Set_mutable(v IMutableContext) { s._mutable = v }

func (s *DeclaracionContext) Set_l_asigstruct(v IL_asigstructContext) { s._l_asigstruct = v }

func (s *DeclaracionContext) Set_tipado(v ITipadoContext) { s._tipado = v }

func (s *DeclaracionContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *DeclaracionContext) Set_tamarre(v ITamarreContext) { s._tamarre = v }

func (s *DeclaracionContext) Set_tamvector(v ITamvectorContext) { s._tamvector = v }

func (s *DeclaracionContext) Set_tipos_vectorarre(v ITipos_vectorarreContext) {
	s._tipos_vectorarre = v
}

func (s *DeclaracionContext) GetInstr() interfaces.Instruccion { return s.instr }

func (s *DeclaracionContext) SetInstr(v interfaces.Instruccion) { s.instr = v }

func (s *DeclaracionContext) TK_LET() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_LET, 0)
}

func (s *DeclaracionContext) Mutable() IMutableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMutableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMutableContext)
}

func (s *DeclaracionContext) AllTK_IDENTIFICADOR() []antlr.TerminalNode {
	return s.GetTokens(db_rustparserTK_IDENTIFICADOR)
}

func (s *DeclaracionContext) TK_IDENTIFICADOR(i int) antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_IDENTIFICADOR, i)
}

func (s *DeclaracionContext) TK_IGUAL() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_IGUAL, 0)
}

func (s *DeclaracionContext) TK_LI() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_LI, 0)
}

func (s *DeclaracionContext) L_asigstruct() IL_asigstructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IL_asigstructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IL_asigstructContext)
}

func (s *DeclaracionContext) TK_LD() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_LD, 0)
}

func (s *DeclaracionContext) TK_PYC() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PYC, 0)
}

func (s *DeclaracionContext) Tipado() ITipadoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipadoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipadoContext)
}

func (s *DeclaracionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DeclaracionContext) TK_DP() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_DP, 0)
}

func (s *DeclaracionContext) Tamarre() ITamarreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITamarreContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITamarreContext)
}

func (s *DeclaracionContext) Tamvector() ITamvectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITamvectorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITamvectorContext)
}

func (s *DeclaracionContext) AllTK_VECTOR() []antlr.TerminalNode {
	return s.GetTokens(db_rustparserTK_VECTOR)
}

func (s *DeclaracionContext) TK_VECTOR(i int) antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_VECTOR, i)
}

func (s *DeclaracionContext) TK_MENOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_MENOR, 0)
}

func (s *DeclaracionContext) Tipos_vectorarre() ITipos_vectorarreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipos_vectorarreContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipos_vectorarreContext)
}

func (s *DeclaracionContext) TK_MAYOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_MAYOR, 0)
}

func (s *DeclaracionContext) TK_NEW() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_NEW, 0)
}

func (s *DeclaracionContext) TK_WCAPACITY() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_WCAPACITY, 0)
}

func (s *DeclaracionContext) TK_PI() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PI, 0)
}

func (s *DeclaracionContext) TK_PD() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PD, 0)
}

func (s *DeclaracionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclaracionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclaracionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterDeclaracion(s)
	}
}

func (s *DeclaracionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitDeclaracion(s)
	}
}

func (p *db_rustparser) Declaracion() (localctx IDeclaracionContext) {
	localctx = NewDeclaracionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, db_rustparserRULE_declaracion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(533)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(462)
			p.Match(db_rustparserTK_LET)
		}
		{
			p.SetState(463)

			var _x = p.Mutable()

			localctx.(*DeclaracionContext)._mutable = _x
		}
		{
			p.SetState(464)

			var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

			localctx.(*DeclaracionContext)._TK_IDENTIFICADOR = _m
		}
		{
			p.SetState(465)
			p.Match(db_rustparserTK_IGUAL)
		}
		{
			p.SetState(466)

			var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

			localctx.(*DeclaracionContext).noms = _m
		}
		{
			p.SetState(467)
			p.Match(db_rustparserTK_LI)
		}
		{
			p.SetState(468)

			var _x = p.l_asigstruct(0)

			localctx.(*DeclaracionContext)._l_asigstruct = _x
		}
		{
			p.SetState(469)
			p.Match(db_rustparserTK_LD)
		}
		{
			p.SetState(470)
			p.Match(db_rustparserTK_PYC)
		}

		localctx.(*DeclaracionContext).instr = declaraciones.Ndeclarar(localctx.(*DeclaracionContext).Get_mutable().GetM(), (func() string {
			if localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR().GetText()
			}
		}()), (func() string {
			if localctx.(*DeclaracionContext).GetNoms() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).GetNoms().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_l_asigstruct().GetOtralista(), (func() int {
			if localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR().GetLine()
			}
		}()), localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR().GetColumn())

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(473)
			p.Match(db_rustparserTK_LET)
		}
		{
			p.SetState(474)

			var _x = p.Mutable()

			localctx.(*DeclaracionContext)._mutable = _x
		}
		{
			p.SetState(475)

			var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

			localctx.(*DeclaracionContext)._TK_IDENTIFICADOR = _m
		}
		{
			p.SetState(476)

			var _x = p.Tipado()

			localctx.(*DeclaracionContext)._tipado = _x
		}
		{
			p.SetState(477)
			p.Match(db_rustparserTK_IGUAL)
		}
		{
			p.SetState(478)

			var _x = p.Expression()

			localctx.(*DeclaracionContext)._expression = _x
		}
		{
			p.SetState(479)
			p.Match(db_rustparserTK_PYC)
		}

		localctx.(*DeclaracionContext).instr = declaracionvar.Ndeclaracion(localctx.(*DeclaracionContext).Get_mutable().GetM(), (func() string {
			if localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_tipado().GetTip(), localctx.(*DeclaracionContext).Get_expression().GetP(), (func() int {
			if localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR().GetLine()
			}
		}()), localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR().GetColumn())

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(482)
			p.Match(db_rustparserTK_LET)
		}
		{
			p.SetState(483)

			var _x = p.Mutable()

			localctx.(*DeclaracionContext)._mutable = _x
		}
		{
			p.SetState(484)

			var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

			localctx.(*DeclaracionContext)._TK_IDENTIFICADOR = _m
		}
		{
			p.SetState(485)
			p.Match(db_rustparserTK_DP)
		}
		{
			p.SetState(486)

			var _x = p.Tamarre()

			localctx.(*DeclaracionContext)._tamarre = _x
		}
		{
			p.SetState(487)
			p.Match(db_rustparserTK_IGUAL)
		}
		{
			p.SetState(488)

			var _x = p.Expression()

			localctx.(*DeclaracionContext)._expression = _x
		}
		{
			p.SetState(489)
			p.Match(db_rustparserTK_PYC)
		}

		localctx.(*DeclaracionContext).instr = declaracionarre.Ndeclaarre(localctx.(*DeclaracionContext).Get_mutable().GetM(), (func() string {
			if localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_tamarre().GetTam_arre(), localctx.(*DeclaracionContext).Get_expression().GetP(), (func() int {
			if localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR().GetLine()
			}
		}()), localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR().GetColumn())

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(492)
			p.Match(db_rustparserTK_LET)
		}
		{
			p.SetState(493)

			var _x = p.Mutable()

			localctx.(*DeclaracionContext)._mutable = _x
		}
		{
			p.SetState(494)

			var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

			localctx.(*DeclaracionContext)._TK_IDENTIFICADOR = _m
		}
		{
			p.SetState(495)
			p.Match(db_rustparserTK_DP)
		}
		{
			p.SetState(496)

			var _x = p.Tamvector()

			localctx.(*DeclaracionContext)._tamvector = _x
		}
		{
			p.SetState(497)
			p.Match(db_rustparserTK_IGUAL)
		}
		{
			p.SetState(498)

			var _x = p.Expression()

			localctx.(*DeclaracionContext)._expression = _x
		}
		{
			p.SetState(499)
			p.Match(db_rustparserTK_PYC)
		}

		localctx.(*DeclaracionContext).instr = declaracionvect.Ndeclavector(localctx.(*DeclaracionContext).Get_mutable().GetM(), (func() string {
			if localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_tamvector().GetTam_vect(), localctx.(*DeclaracionContext).Get_expression().GetP(), (func() int {
			if localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR().GetLine()
			}
		}()), localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR().GetColumn())

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(502)
			p.Match(db_rustparserTK_LET)
		}
		{
			p.SetState(503)

			var _x = p.Mutable()

			localctx.(*DeclaracionContext)._mutable = _x
		}
		{
			p.SetState(504)

			var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

			localctx.(*DeclaracionContext)._TK_IDENTIFICADOR = _m
		}
		{
			p.SetState(505)
			p.Match(db_rustparserTK_DP)
		}
		{
			p.SetState(506)
			p.Match(db_rustparserTK_VECTOR)
		}
		{
			p.SetState(507)
			p.Match(db_rustparserTK_MENOR)
		}
		{
			p.SetState(508)

			var _x = p.Tipos_vectorarre()

			localctx.(*DeclaracionContext)._tipos_vectorarre = _x
		}
		{
			p.SetState(509)
			p.Match(db_rustparserTK_MAYOR)
		}
		{
			p.SetState(510)
			p.Match(db_rustparserTK_IGUAL)
		}
		{
			p.SetState(511)
			p.Match(db_rustparserTK_VECTOR)
		}
		{
			p.SetState(512)
			p.Match(db_rustparserTK_NEW)
		}
		{
			p.SetState(513)
			p.Match(db_rustparserTK_PYC)
		}

		localctx.(*DeclaracionContext).instr = funnatvect.Nnewvect(localctx.(*DeclaracionContext).Get_mutable().GetM(), (func() string {
			if localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_tipos_vectorarre().GetP(), (func() int {
			if localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR().GetLine()
			}
		}()), localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR().GetColumn())

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(516)
			p.Match(db_rustparserTK_LET)
		}
		{
			p.SetState(517)

			var _x = p.Mutable()

			localctx.(*DeclaracionContext)._mutable = _x
		}
		{
			p.SetState(518)

			var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

			localctx.(*DeclaracionContext)._TK_IDENTIFICADOR = _m
		}
		{
			p.SetState(519)
			p.Match(db_rustparserTK_DP)
		}
		{
			p.SetState(520)
			p.Match(db_rustparserTK_VECTOR)
		}
		{
			p.SetState(521)
			p.Match(db_rustparserTK_MENOR)
		}
		{
			p.SetState(522)

			var _x = p.Tipos_vectorarre()

			localctx.(*DeclaracionContext)._tipos_vectorarre = _x
		}
		{
			p.SetState(523)
			p.Match(db_rustparserTK_MAYOR)
		}
		{
			p.SetState(524)
			p.Match(db_rustparserTK_IGUAL)
		}
		{
			p.SetState(525)
			p.Match(db_rustparserTK_VECTOR)
		}
		{
			p.SetState(526)
			p.Match(db_rustparserTK_WCAPACITY)
		}
		{
			p.SetState(527)
			p.Match(db_rustparserTK_PI)
		}
		{
			p.SetState(528)

			var _x = p.Expression()

			localctx.(*DeclaracionContext)._expression = _x
		}
		{
			p.SetState(529)
			p.Match(db_rustparserTK_PD)
		}
		{
			p.SetState(530)
			p.Match(db_rustparserTK_PYC)
		}

		localctx.(*DeclaracionContext).instr = funnatvect.Nwcvect(localctx.(*DeclaracionContext).Get_mutable().GetM(), (func() string {
			if localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_tipos_vectorarre().GetP(), localctx.(*DeclaracionContext).Get_expression().GetP(), (func() int {
			if localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR().GetLine()
			}
		}()), localctx.(*DeclaracionContext).Get_TK_IDENTIFICADOR().GetColumn())

	}

	return localctx
}

// IMutableContext is an interface to support dynamic dispatch.
type IMutableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetM returns the m attribute.
	GetM() bool

	// SetM sets the m attribute.
	SetM(bool)

	// IsMutableContext differentiates from other interfaces.
	IsMutableContext()
}

type MutableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	m      bool
}

func NewEmptyMutableContext() *MutableContext {
	var p = new(MutableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_mutable
	return p
}

func (*MutableContext) IsMutableContext() {}

func NewMutableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MutableContext {
	var p = new(MutableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_mutable

	return p
}

func (s *MutableContext) GetParser() antlr.Parser { return s.parser }

func (s *MutableContext) GetM() bool { return s.m }

func (s *MutableContext) SetM(v bool) { s.m = v }

func (s *MutableContext) TK_MUT() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_MUT, 0)
}

func (s *MutableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MutableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MutableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterMutable(s)
	}
}

func (s *MutableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitMutable(s)
	}
}

func (p *db_rustparser) Mutable() (localctx IMutableContext) {
	localctx = NewMutableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, db_rustparserRULE_mutable)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(538)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case db_rustparserTK_MUT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(535)
			p.Match(db_rustparserTK_MUT)
		}
		localctx.(*MutableContext).m = true

	case db_rustparserTK_IDENTIFICADOR:
		p.EnterOuterAlt(localctx, 2)
		localctx.(*MutableContext).m = false

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITamvectorContext is an interface to support dynamic dispatch.
type ITamvectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_TK_MAYOR returns the _TK_MAYOR token.
	Get_TK_MAYOR() antlr.Token

	// Set_TK_MAYOR sets the _TK_MAYOR token.
	Set_TK_MAYOR(antlr.Token)

	// GetTv returns the tv rule contexts.
	GetTv() ITamvectorContext

	// Get_tipos_vectorarre returns the _tipos_vectorarre rule contexts.
	Get_tipos_vectorarre() ITipos_vectorarreContext

	// SetTv sets the tv rule contexts.
	SetTv(ITamvectorContext)

	// Set_tipos_vectorarre sets the _tipos_vectorarre rule contexts.
	Set_tipos_vectorarre(ITipos_vectorarreContext)

	// GetTam_vect returns the tam_vect attribute.
	GetTam_vect() *arrayList.List

	// SetTam_vect sets the tam_vect attribute.
	SetTam_vect(*arrayList.List)

	// IsTamvectorContext differentiates from other interfaces.
	IsTamvectorContext()
}

type TamvectorContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	tam_vect          *arrayList.List
	tv                ITamvectorContext
	_TK_MAYOR         antlr.Token
	_tipos_vectorarre ITipos_vectorarreContext
}

func NewEmptyTamvectorContext() *TamvectorContext {
	var p = new(TamvectorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_tamvector
	return p
}

func (*TamvectorContext) IsTamvectorContext() {}

func NewTamvectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TamvectorContext {
	var p = new(TamvectorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_tamvector

	return p
}

func (s *TamvectorContext) GetParser() antlr.Parser { return s.parser }

func (s *TamvectorContext) Get_TK_MAYOR() antlr.Token { return s._TK_MAYOR }

func (s *TamvectorContext) Set_TK_MAYOR(v antlr.Token) { s._TK_MAYOR = v }

func (s *TamvectorContext) GetTv() ITamvectorContext { return s.tv }

func (s *TamvectorContext) Get_tipos_vectorarre() ITipos_vectorarreContext {
	return s._tipos_vectorarre
}

func (s *TamvectorContext) SetTv(v ITamvectorContext) { s.tv = v }

func (s *TamvectorContext) Set_tipos_vectorarre(v ITipos_vectorarreContext) { s._tipos_vectorarre = v }

func (s *TamvectorContext) GetTam_vect() *arrayList.List { return s.tam_vect }

func (s *TamvectorContext) SetTam_vect(v *arrayList.List) { s.tam_vect = v }

func (s *TamvectorContext) TK_VECTOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_VECTOR, 0)
}

func (s *TamvectorContext) TK_MENOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_MENOR, 0)
}

func (s *TamvectorContext) TK_MAYOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_MAYOR, 0)
}

func (s *TamvectorContext) Tamvector() ITamvectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITamvectorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITamvectorContext)
}

func (s *TamvectorContext) Tipos_vectorarre() ITipos_vectorarreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipos_vectorarreContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipos_vectorarreContext)
}

func (s *TamvectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TamvectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TamvectorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterTamvector(s)
	}
}

func (s *TamvectorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitTamvector(s)
	}
}

func (p *db_rustparser) Tamvector() (localctx ITamvectorContext) {
	localctx = NewTamvectorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, db_rustparserRULE_tamvector)

	localctx.(*TamvectorContext).tam_vect = arrayList.New()

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(552)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(540)
			p.Match(db_rustparserTK_VECTOR)
		}
		{
			p.SetState(541)
			p.Match(db_rustparserTK_MENOR)
		}
		{
			p.SetState(542)

			var _x = p.Tamvector()

			localctx.(*TamvectorContext).tv = _x
		}
		{
			p.SetState(543)

			var _m = p.Match(db_rustparserTK_MAYOR)

			localctx.(*TamvectorContext)._TK_MAYOR = _m
		}

		localctx.(*TamvectorContext).GetTv().GetTam_vect().Add((func() string {
			if localctx.(*TamvectorContext).Get_TK_MAYOR() == nil {
				return ""
			} else {
				return localctx.(*TamvectorContext).Get_TK_MAYOR().GetText()
			}
		}()))
		localctx.(*TamvectorContext).tam_vect = localctx.(*TamvectorContext).GetTv().GetTam_vect()

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(546)
			p.Match(db_rustparserTK_VECTOR)
		}
		{
			p.SetState(547)
			p.Match(db_rustparserTK_MENOR)
		}
		{
			p.SetState(548)

			var _x = p.Tipos_vectorarre()

			localctx.(*TamvectorContext)._tipos_vectorarre = _x
		}
		{
			p.SetState(549)
			p.Match(db_rustparserTK_MAYOR)
		}

		localctx.(*TamvectorContext).tam_vect.Add(localctx.(*TamvectorContext).Get_tipos_vectorarre().GetP())

	}

	return localctx
}

// ITamarreContext is an interface to support dynamic dispatch.
type ITamarreContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetL returns the l rule contexts.
	GetL() ITamarreContext

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Get_tipos_vectorarre returns the _tipos_vectorarre rule contexts.
	Get_tipos_vectorarre() ITipos_vectorarreContext

	// SetL sets the l rule contexts.
	SetL(ITamarreContext)

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// Set_tipos_vectorarre sets the _tipos_vectorarre rule contexts.
	Set_tipos_vectorarre(ITipos_vectorarreContext)

	// GetTam_arre returns the tam_arre attribute.
	GetTam_arre() *arrayList.List

	// SetTam_arre sets the tam_arre attribute.
	SetTam_arre(*arrayList.List)

	// IsTamarreContext differentiates from other interfaces.
	IsTamarreContext()
}

type TamarreContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	tam_arre          *arrayList.List
	l                 ITamarreContext
	_expression       IExpressionContext
	_tipos_vectorarre ITipos_vectorarreContext
}

func NewEmptyTamarreContext() *TamarreContext {
	var p = new(TamarreContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_tamarre
	return p
}

func (*TamarreContext) IsTamarreContext() {}

func NewTamarreContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TamarreContext {
	var p = new(TamarreContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_tamarre

	return p
}

func (s *TamarreContext) GetParser() antlr.Parser { return s.parser }

func (s *TamarreContext) GetL() ITamarreContext { return s.l }

func (s *TamarreContext) Get_expression() IExpressionContext { return s._expression }

func (s *TamarreContext) Get_tipos_vectorarre() ITipos_vectorarreContext { return s._tipos_vectorarre }

func (s *TamarreContext) SetL(v ITamarreContext) { s.l = v }

func (s *TamarreContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *TamarreContext) Set_tipos_vectorarre(v ITipos_vectorarreContext) { s._tipos_vectorarre = v }

func (s *TamarreContext) GetTam_arre() *arrayList.List { return s.tam_arre }

func (s *TamarreContext) SetTam_arre(v *arrayList.List) { s.tam_arre = v }

func (s *TamarreContext) TK_CI() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_CI, 0)
}

func (s *TamarreContext) TK_PYC() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PYC, 0)
}

func (s *TamarreContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TamarreContext) TK_CD() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_CD, 0)
}

func (s *TamarreContext) Tamarre() ITamarreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITamarreContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITamarreContext)
}

func (s *TamarreContext) Tipos_vectorarre() ITipos_vectorarreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipos_vectorarreContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipos_vectorarreContext)
}

func (s *TamarreContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TamarreContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TamarreContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterTamarre(s)
	}
}

func (s *TamarreContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitTamarre(s)
	}
}

func (p *db_rustparser) Tamarre() (localctx ITamarreContext) {
	localctx = NewTamarreContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, db_rustparserRULE_tamarre)

	localctx.(*TamarreContext).tam_arre = arrayList.New()

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(568)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 20, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(554)
			p.Match(db_rustparserTK_CI)
		}
		{
			p.SetState(555)

			var _x = p.Tamarre()

			localctx.(*TamarreContext).l = _x
		}
		{
			p.SetState(556)
			p.Match(db_rustparserTK_PYC)
		}
		{
			p.SetState(557)

			var _x = p.Expression()

			localctx.(*TamarreContext)._expression = _x
		}
		{
			p.SetState(558)
			p.Match(db_rustparserTK_CD)
		}

		localctx.(*TamarreContext).GetL().GetTam_arre().Add(localctx.(*TamarreContext).Get_expression().GetP())
		localctx.(*TamarreContext).tam_arre = localctx.(*TamarreContext).GetL().GetTam_arre()

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(561)
			p.Match(db_rustparserTK_CI)
		}
		{
			p.SetState(562)

			var _x = p.Tipos_vectorarre()

			localctx.(*TamarreContext)._tipos_vectorarre = _x
		}
		{
			p.SetState(563)
			p.Match(db_rustparserTK_PYC)
		}
		{
			p.SetState(564)

			var _x = p.Expression()

			localctx.(*TamarreContext)._expression = _x
		}
		{
			p.SetState(565)
			p.Match(db_rustparserTK_CD)
		}

		guardar := declaracionarre.Ntipodeclarre(localctx.(*TamarreContext).Get_tipos_vectorarre().GetP(), localctx.(*TamarreContext).Get_expression().GetP())
		localctx.(*TamarreContext).tam_arre.Add(guardar)

	}

	return localctx
}

// ITipadoContext is an interface to support dynamic dispatch.
type ITipadoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTip returns the tip attribute.
	GetTip() simbolos.TipoExpresion

	// SetTip sets the tip attribute.
	SetTip(simbolos.TipoExpresion)

	// IsTipadoContext differentiates from other interfaces.
	IsTipadoContext()
}

type TipadoContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	tip    simbolos.TipoExpresion
}

func NewEmptyTipadoContext() *TipadoContext {
	var p = new(TipadoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_tipado
	return p
}

func (*TipadoContext) IsTipadoContext() {}

func NewTipadoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TipadoContext {
	var p = new(TipadoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_tipado

	return p
}

func (s *TipadoContext) GetParser() antlr.Parser { return s.parser }

func (s *TipadoContext) GetTip() simbolos.TipoExpresion { return s.tip }

func (s *TipadoContext) SetTip(v simbolos.TipoExpresion) { s.tip = v }

func (s *TipadoContext) TK_DP() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_DP, 0)
}

func (s *TipadoContext) TK_TIPOINT() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_TIPOINT, 0)
}

func (s *TipadoContext) TK_TIPOFLOAT() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_TIPOFLOAT, 0)
}

func (s *TipadoContext) TK_TIPOBOOL() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_TIPOBOOL, 0)
}

func (s *TipadoContext) TK_TIPOCHAR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_TIPOCHAR, 0)
}

func (s *TipadoContext) TK_TIPOSTRING() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_TIPOSTRING, 0)
}

func (s *TipadoContext) TK_DIRSTRING() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_DIRSTRING, 0)
}

func (s *TipadoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TipadoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TipadoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterTipado(s)
	}
}

func (s *TipadoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitTipado(s)
	}
}

func (p *db_rustparser) Tipado() (localctx ITipadoContext) {
	localctx = NewTipadoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, db_rustparserRULE_tipado)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(589)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 21, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(570)
			p.Match(db_rustparserTK_DP)
		}
		{
			p.SetState(571)
			p.Match(db_rustparserTK_TIPOINT)
		}
		localctx.(*TipadoContext).tip = simbolos.INTEGER

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(573)
			p.Match(db_rustparserTK_DP)
		}
		{
			p.SetState(574)
			p.Match(db_rustparserTK_TIPOFLOAT)
		}
		localctx.(*TipadoContext).tip = simbolos.FLOAT

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(576)
			p.Match(db_rustparserTK_DP)
		}
		{
			p.SetState(577)
			p.Match(db_rustparserTK_TIPOBOOL)
		}
		localctx.(*TipadoContext).tip = simbolos.BOOLEAN

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(579)
			p.Match(db_rustparserTK_DP)
		}
		{
			p.SetState(580)
			p.Match(db_rustparserTK_TIPOCHAR)
		}
		localctx.(*TipadoContext).tip = simbolos.CHAR

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(582)
			p.Match(db_rustparserTK_DP)
		}
		{
			p.SetState(583)
			p.Match(db_rustparserTK_TIPOSTRING)
		}
		localctx.(*TipadoContext).tip = simbolos.TEXTO

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(585)
			p.Match(db_rustparserTK_DP)
		}
		{
			p.SetState(586)
			p.Match(db_rustparserTK_DIRSTRING)
		}
		localctx.(*TipadoContext).tip = simbolos.YTEXTO

	case 7:
		p.EnterOuterAlt(localctx, 7)
		localctx.(*TipadoContext).tip = simbolos.NULL

	}

	return localctx
}

// ITipos_vectorarreContext is an interface to support dynamic dispatch.
type ITipos_vectorarreContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_TK_IDENTIFICADOR returns the _TK_IDENTIFICADOR token.
	Get_TK_IDENTIFICADOR() antlr.Token

	// Set_TK_IDENTIFICADOR sets the _TK_IDENTIFICADOR token.
	Set_TK_IDENTIFICADOR(antlr.Token)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsTipos_vectorarreContext differentiates from other interfaces.
	IsTipos_vectorarreContext()
}

type Tipos_vectorarreContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	p                 interfaces.Expresion
	_TK_IDENTIFICADOR antlr.Token
}

func NewEmptyTipos_vectorarreContext() *Tipos_vectorarreContext {
	var p = new(Tipos_vectorarreContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_tipos_vectorarre
	return p
}

func (*Tipos_vectorarreContext) IsTipos_vectorarreContext() {}

func NewTipos_vectorarreContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tipos_vectorarreContext {
	var p = new(Tipos_vectorarreContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_tipos_vectorarre

	return p
}

func (s *Tipos_vectorarreContext) GetParser() antlr.Parser { return s.parser }

func (s *Tipos_vectorarreContext) Get_TK_IDENTIFICADOR() antlr.Token { return s._TK_IDENTIFICADOR }

func (s *Tipos_vectorarreContext) Set_TK_IDENTIFICADOR(v antlr.Token) { s._TK_IDENTIFICADOR = v }

func (s *Tipos_vectorarreContext) GetP() interfaces.Expresion { return s.p }

func (s *Tipos_vectorarreContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Tipos_vectorarreContext) TK_TIPOINT() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_TIPOINT, 0)
}

func (s *Tipos_vectorarreContext) TK_TIPOFLOAT() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_TIPOFLOAT, 0)
}

func (s *Tipos_vectorarreContext) TK_TIPOBOOL() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_TIPOBOOL, 0)
}

func (s *Tipos_vectorarreContext) TK_TIPOCHAR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_TIPOCHAR, 0)
}

func (s *Tipos_vectorarreContext) TK_TIPOSTRING() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_TIPOSTRING, 0)
}

func (s *Tipos_vectorarreContext) TK_DIRSTRING() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_DIRSTRING, 0)
}

func (s *Tipos_vectorarreContext) TK_IDENTIFICADOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_IDENTIFICADOR, 0)
}

func (s *Tipos_vectorarreContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tipos_vectorarreContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tipos_vectorarreContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterTipos_vectorarre(s)
	}
}

func (s *Tipos_vectorarreContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitTipos_vectorarre(s)
	}
}

func (p *db_rustparser) Tipos_vectorarre() (localctx ITipos_vectorarreContext) {
	localctx = NewTipos_vectorarreContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, db_rustparserRULE_tipos_vectorarre)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(606)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 22, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(591)
			p.Match(db_rustparserTK_TIPOINT)
		}

		localctx.(*Tipos_vectorarreContext).p = primitivo.Nuevo_Dato_Primitivo(0, simbolos.INTEGER)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(593)
			p.Match(db_rustparserTK_TIPOFLOAT)
		}

		localctx.(*Tipos_vectorarreContext).p = primitivo.Nuevo_Dato_Primitivo(0.0, simbolos.FLOAT)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(595)
			p.Match(db_rustparserTK_TIPOBOOL)
		}

		localctx.(*Tipos_vectorarreContext).p = primitivo.Nuevo_Dato_Primitivo(true, simbolos.BOOLEAN)

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(597)
			p.Match(db_rustparserTK_TIPOCHAR)
		}

		localctx.(*Tipos_vectorarreContext).p = primitivo.Nuevo_Dato_Primitivo(0, simbolos.CHAR)

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(599)
			p.Match(db_rustparserTK_TIPOSTRING)
		}

		localctx.(*Tipos_vectorarreContext).p = primitivo.Nuevo_Dato_Primitivo("", simbolos.TEXTO)

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(601)
			p.Match(db_rustparserTK_DIRSTRING)
		}

		localctx.(*Tipos_vectorarreContext).p = primitivo.Nuevo_Dato_Primitivo("", simbolos.YTEXTO)

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(603)

			var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

			localctx.(*Tipos_vectorarreContext)._TK_IDENTIFICADOR = _m
		}

		localctx.(*Tipos_vectorarreContext).p = primitivo.Nuevo_Dato_Primitivo((func() string {
			if localctx.(*Tipos_vectorarreContext).Get_TK_IDENTIFICADOR() == nil {
				return ""
			} else {
				return localctx.(*Tipos_vectorarreContext).Get_TK_IDENTIFICADOR().GetText()
			}
		}()), simbolos.STRUCT)

	case 8:
		p.EnterOuterAlt(localctx, 8)

		localctx.(*Tipos_vectorarreContext).p = primitivo.Nuevo_Dato_Primitivo("", simbolos.NULL)

	}

	return localctx
}

// ITiposContext is an interface to support dynamic dispatch.
type ITiposContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTip returns the tip attribute.
	GetTip() simbolos.TipoExpresion

	// SetTip sets the tip attribute.
	SetTip(simbolos.TipoExpresion)

	// IsTiposContext differentiates from other interfaces.
	IsTiposContext()
}

type TiposContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	tip    simbolos.TipoExpresion
}

func NewEmptyTiposContext() *TiposContext {
	var p = new(TiposContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_tipos
	return p
}

func (*TiposContext) IsTiposContext() {}

func NewTiposContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TiposContext {
	var p = new(TiposContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_tipos

	return p
}

func (s *TiposContext) GetParser() antlr.Parser { return s.parser }

func (s *TiposContext) GetTip() simbolos.TipoExpresion { return s.tip }

func (s *TiposContext) SetTip(v simbolos.TipoExpresion) { s.tip = v }

func (s *TiposContext) TK_TIPOINT() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_TIPOINT, 0)
}

func (s *TiposContext) TK_TIPOFLOAT() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_TIPOFLOAT, 0)
}

func (s *TiposContext) TK_TIPOBOOL() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_TIPOBOOL, 0)
}

func (s *TiposContext) TK_TIPOCHAR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_TIPOCHAR, 0)
}

func (s *TiposContext) TK_TIPOSTRING() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_TIPOSTRING, 0)
}

func (s *TiposContext) TK_DIRSTRING() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_DIRSTRING, 0)
}

func (s *TiposContext) TK_IDENTIFICADOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_IDENTIFICADOR, 0)
}

func (s *TiposContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TiposContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TiposContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterTipos(s)
	}
}

func (s *TiposContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitTipos(s)
	}
}

func (p *db_rustparser) Tipos() (localctx ITiposContext) {
	localctx = NewTiposContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, db_rustparserRULE_tipos)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(623)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 23, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(608)
			p.Match(db_rustparserTK_TIPOINT)
		}
		localctx.(*TiposContext).tip = simbolos.INTEGER

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(610)
			p.Match(db_rustparserTK_TIPOFLOAT)
		}
		localctx.(*TiposContext).tip = simbolos.FLOAT

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(612)
			p.Match(db_rustparserTK_TIPOBOOL)
		}
		localctx.(*TiposContext).tip = simbolos.BOOLEAN

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(614)
			p.Match(db_rustparserTK_TIPOCHAR)
		}
		localctx.(*TiposContext).tip = simbolos.CHAR

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(616)
			p.Match(db_rustparserTK_TIPOSTRING)
		}
		localctx.(*TiposContext).tip = simbolos.TEXTO

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(618)
			p.Match(db_rustparserTK_DIRSTRING)
		}
		localctx.(*TiposContext).tip = simbolos.YTEXTO

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(620)
			p.Match(db_rustparserTK_IDENTIFICADOR)
		}
		localctx.(*TiposContext).tip = simbolos.STRUCT

	case 8:
		p.EnterOuterAlt(localctx, 8)
		localctx.(*TiposContext).tip = simbolos.NULL

	}

	return localctx
}

// IL_asigstructContext is an interface to support dynamic dispatch.
type IL_asigstructContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLa returns the la rule contexts.
	GetLa() IL_asigstructContext

	// Get_asignacionstruct returns the _asignacionstruct rule contexts.
	Get_asignacionstruct() IAsignacionstructContext

	// SetLa sets the la rule contexts.
	SetLa(IL_asigstructContext)

	// Set_asignacionstruct sets the _asignacionstruct rule contexts.
	Set_asignacionstruct(IAsignacionstructContext)

	// GetOtralista returns the otralista attribute.
	GetOtralista() *arrayList.List

	// SetOtralista sets the otralista attribute.
	SetOtralista(*arrayList.List)

	// IsL_asigstructContext differentiates from other interfaces.
	IsL_asigstructContext()
}

type L_asigstructContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	otralista         *arrayList.List
	la                IL_asigstructContext
	_asignacionstruct IAsignacionstructContext
}

func NewEmptyL_asigstructContext() *L_asigstructContext {
	var p = new(L_asigstructContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_l_asigstruct
	return p
}

func (*L_asigstructContext) IsL_asigstructContext() {}

func NewL_asigstructContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *L_asigstructContext {
	var p = new(L_asigstructContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_l_asigstruct

	return p
}

func (s *L_asigstructContext) GetParser() antlr.Parser { return s.parser }

func (s *L_asigstructContext) GetLa() IL_asigstructContext { return s.la }

func (s *L_asigstructContext) Get_asignacionstruct() IAsignacionstructContext {
	return s._asignacionstruct
}

func (s *L_asigstructContext) SetLa(v IL_asigstructContext) { s.la = v }

func (s *L_asigstructContext) Set_asignacionstruct(v IAsignacionstructContext) {
	s._asignacionstruct = v
}

func (s *L_asigstructContext) GetOtralista() *arrayList.List { return s.otralista }

func (s *L_asigstructContext) SetOtralista(v *arrayList.List) { s.otralista = v }

func (s *L_asigstructContext) Asignacionstruct() IAsignacionstructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsignacionstructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsignacionstructContext)
}

func (s *L_asigstructContext) TK_COMA() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_COMA, 0)
}

func (s *L_asigstructContext) L_asigstruct() IL_asigstructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IL_asigstructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IL_asigstructContext)
}

func (s *L_asigstructContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *L_asigstructContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *L_asigstructContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterL_asigstruct(s)
	}
}

func (s *L_asigstructContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitL_asigstruct(s)
	}
}

func (p *db_rustparser) L_asigstruct() (localctx IL_asigstructContext) {
	return p.l_asigstruct(0)
}

func (p *db_rustparser) l_asigstruct(_p int) (localctx IL_asigstructContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewL_asigstructContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IL_asigstructContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 64
	p.EnterRecursionRule(localctx, 64, db_rustparserRULE_l_asigstruct, _p)

	localctx.(*L_asigstructContext).otralista = arrayList.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(626)

		var _x = p.Asignacionstruct()

		localctx.(*L_asigstructContext)._asignacionstruct = _x
	}
	localctx.(*L_asigstructContext).otralista.Add(localctx.(*L_asigstructContext).Get_asignacionstruct().GetAstru())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(636)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 24, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewL_asigstructContext(p, _parentctx, _parentState)
			localctx.(*L_asigstructContext).la = _prevctx
			p.PushNewRecursionContext(localctx, _startState, db_rustparserRULE_l_asigstruct)
			p.SetState(629)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(630)
				p.Match(db_rustparserTK_COMA)
			}
			{
				p.SetState(631)

				var _x = p.Asignacionstruct()

				localctx.(*L_asigstructContext)._asignacionstruct = _x
			}

			localctx.(*L_asigstructContext).GetLa().GetOtralista().Add(localctx.(*L_asigstructContext).Get_asignacionstruct().GetAstru())
			localctx.(*L_asigstructContext).otralista = localctx.(*L_asigstructContext).GetLa().GetOtralista()

		}
		p.SetState(638)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 24, p.GetParserRuleContext())
	}

	return localctx
}

// IAsignacionstructContext is an interface to support dynamic dispatch.
type IAsignacionstructContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_TK_IDENTIFICADOR returns the _TK_IDENTIFICADOR token.
	Get_TK_IDENTIFICADOR() antlr.Token

	// Set_TK_IDENTIFICADOR sets the _TK_IDENTIFICADOR token.
	Set_TK_IDENTIFICADOR(antlr.Token)

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetAstru returns the astru attribute.
	GetAstru() declaraciones.AsigStruct

	// SetAstru sets the astru attribute.
	SetAstru(declaraciones.AsigStruct)

	// IsAsignacionstructContext differentiates from other interfaces.
	IsAsignacionstructContext()
}

type AsignacionstructContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	astru             declaraciones.AsigStruct
	_TK_IDENTIFICADOR antlr.Token
	_expression       IExpressionContext
}

func NewEmptyAsignacionstructContext() *AsignacionstructContext {
	var p = new(AsignacionstructContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_asignacionstruct
	return p
}

func (*AsignacionstructContext) IsAsignacionstructContext() {}

func NewAsignacionstructContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsignacionstructContext {
	var p = new(AsignacionstructContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_asignacionstruct

	return p
}

func (s *AsignacionstructContext) GetParser() antlr.Parser { return s.parser }

func (s *AsignacionstructContext) Get_TK_IDENTIFICADOR() antlr.Token { return s._TK_IDENTIFICADOR }

func (s *AsignacionstructContext) Set_TK_IDENTIFICADOR(v antlr.Token) { s._TK_IDENTIFICADOR = v }

func (s *AsignacionstructContext) Get_expression() IExpressionContext { return s._expression }

func (s *AsignacionstructContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *AsignacionstructContext) GetAstru() declaraciones.AsigStruct { return s.astru }

func (s *AsignacionstructContext) SetAstru(v declaraciones.AsigStruct) { s.astru = v }

func (s *AsignacionstructContext) TK_IDENTIFICADOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_IDENTIFICADOR, 0)
}

func (s *AsignacionstructContext) TK_DP() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_DP, 0)
}

func (s *AsignacionstructContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AsignacionstructContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsignacionstructContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsignacionstructContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterAsignacionstruct(s)
	}
}

func (s *AsignacionstructContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitAsignacionstruct(s)
	}
}

func (p *db_rustparser) Asignacionstruct() (localctx IAsignacionstructContext) {
	localctx = NewAsignacionstructContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, db_rustparserRULE_asignacionstruct)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(639)

		var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

		localctx.(*AsignacionstructContext)._TK_IDENTIFICADOR = _m
	}
	{
		p.SetState(640)
		p.Match(db_rustparserTK_DP)
	}
	{
		p.SetState(641)

		var _x = p.Expression()

		localctx.(*AsignacionstructContext)._expression = _x
	}

	localctx.(*AsignacionstructContext).astru = declaraciones.Nasigstruct((func() string {
		if localctx.(*AsignacionstructContext).Get_TK_IDENTIFICADOR() == nil {
			return ""
		} else {
			return localctx.(*AsignacionstructContext).Get_TK_IDENTIFICADOR().GetText()
		}
	}()), localctx.(*AsignacionstructContext).Get_expression().GetP())

	return localctx
}

// IFn_vectorContext is an interface to support dynamic dispatch.
type IFn_vectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_TK_IDENTIFICADOR returns the _TK_IDENTIFICADOR token.
	Get_TK_IDENTIFICADOR() antlr.Token

	// Set_TK_IDENTIFICADOR sets the _TK_IDENTIFICADOR token.
	Set_TK_IDENTIFICADOR(antlr.Token)

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// GetPos returns the pos rule contexts.
	GetPos() IExpressionContext

	// GetVal returns the val rule contexts.
	GetVal() IExpressionContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// SetPos sets the pos rule contexts.
	SetPos(IExpressionContext)

	// SetVal sets the val rule contexts.
	SetVal(IExpressionContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruccion

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruccion)

	// IsFn_vectorContext differentiates from other interfaces.
	IsFn_vectorContext()
}

type Fn_vectorContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	instr             interfaces.Instruccion
	_TK_IDENTIFICADOR antlr.Token
	_expression       IExpressionContext
	pos               IExpressionContext
	val               IExpressionContext
}

func NewEmptyFn_vectorContext() *Fn_vectorContext {
	var p = new(Fn_vectorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_fn_vector
	return p
}

func (*Fn_vectorContext) IsFn_vectorContext() {}

func NewFn_vectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Fn_vectorContext {
	var p = new(Fn_vectorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_fn_vector

	return p
}

func (s *Fn_vectorContext) GetParser() antlr.Parser { return s.parser }

func (s *Fn_vectorContext) Get_TK_IDENTIFICADOR() antlr.Token { return s._TK_IDENTIFICADOR }

func (s *Fn_vectorContext) Set_TK_IDENTIFICADOR(v antlr.Token) { s._TK_IDENTIFICADOR = v }

func (s *Fn_vectorContext) Get_expression() IExpressionContext { return s._expression }

func (s *Fn_vectorContext) GetPos() IExpressionContext { return s.pos }

func (s *Fn_vectorContext) GetVal() IExpressionContext { return s.val }

func (s *Fn_vectorContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *Fn_vectorContext) SetPos(v IExpressionContext) { s.pos = v }

func (s *Fn_vectorContext) SetVal(v IExpressionContext) { s.val = v }

func (s *Fn_vectorContext) GetInstr() interfaces.Instruccion { return s.instr }

func (s *Fn_vectorContext) SetInstr(v interfaces.Instruccion) { s.instr = v }

func (s *Fn_vectorContext) TK_IDENTIFICADOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_IDENTIFICADOR, 0)
}

func (s *Fn_vectorContext) TK_PUNTO() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PUNTO, 0)
}

func (s *Fn_vectorContext) TK_PUSH() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PUSH, 0)
}

func (s *Fn_vectorContext) TK_PI() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PI, 0)
}

func (s *Fn_vectorContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Fn_vectorContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Fn_vectorContext) TK_PD() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PD, 0)
}

func (s *Fn_vectorContext) TK_PYC() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PYC, 0)
}

func (s *Fn_vectorContext) TK_INSERT() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_INSERT, 0)
}

func (s *Fn_vectorContext) TK_COMA() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_COMA, 0)
}

func (s *Fn_vectorContext) TK_REMOVE() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_REMOVE, 0)
}

func (s *Fn_vectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Fn_vectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Fn_vectorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterFn_vector(s)
	}
}

func (s *Fn_vectorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitFn_vector(s)
	}
}

func (p *db_rustparser) Fn_vector() (localctx IFn_vectorContext) {
	localctx = NewFn_vectorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, db_rustparserRULE_fn_vector)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(673)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 25, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(644)

			var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

			localctx.(*Fn_vectorContext)._TK_IDENTIFICADOR = _m
		}
		{
			p.SetState(645)
			p.Match(db_rustparserTK_PUNTO)
		}
		{
			p.SetState(646)
			p.Match(db_rustparserTK_PUSH)
		}
		{
			p.SetState(647)
			p.Match(db_rustparserTK_PI)
		}
		{
			p.SetState(648)

			var _x = p.Expression()

			localctx.(*Fn_vectorContext)._expression = _x
		}
		{
			p.SetState(649)
			p.Match(db_rustparserTK_PD)
		}
		{
			p.SetState(650)
			p.Match(db_rustparserTK_PYC)
		}

		localctx.(*Fn_vectorContext).instr = funnatvect.Npushvect((func() string {
			if localctx.(*Fn_vectorContext).Get_TK_IDENTIFICADOR() == nil {
				return ""
			} else {
				return localctx.(*Fn_vectorContext).Get_TK_IDENTIFICADOR().GetText()
			}
		}()), localctx.(*Fn_vectorContext).Get_expression().GetP(), (func() int {
			if localctx.(*Fn_vectorContext).Get_TK_IDENTIFICADOR() == nil {
				return 0
			} else {
				return localctx.(*Fn_vectorContext).Get_TK_IDENTIFICADOR().GetLine()
			}
		}()), localctx.(*Fn_vectorContext).Get_TK_IDENTIFICADOR().GetColumn())

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(653)

			var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

			localctx.(*Fn_vectorContext)._TK_IDENTIFICADOR = _m
		}
		{
			p.SetState(654)
			p.Match(db_rustparserTK_PUNTO)
		}
		{
			p.SetState(655)
			p.Match(db_rustparserTK_INSERT)
		}
		{
			p.SetState(656)
			p.Match(db_rustparserTK_PI)
		}
		{
			p.SetState(657)

			var _x = p.Expression()

			localctx.(*Fn_vectorContext).pos = _x
		}
		{
			p.SetState(658)
			p.Match(db_rustparserTK_COMA)
		}
		{
			p.SetState(659)

			var _x = p.Expression()

			localctx.(*Fn_vectorContext).val = _x
		}
		{
			p.SetState(660)
			p.Match(db_rustparserTK_PD)
		}
		{
			p.SetState(661)
			p.Match(db_rustparserTK_PYC)
		}

		localctx.(*Fn_vectorContext).instr = funnatvect.Ninsertvect((func() string {
			if localctx.(*Fn_vectorContext).Get_TK_IDENTIFICADOR() == nil {
				return ""
			} else {
				return localctx.(*Fn_vectorContext).Get_TK_IDENTIFICADOR().GetText()
			}
		}()), localctx.(*Fn_vectorContext).GetPos().GetP(), localctx.(*Fn_vectorContext).GetVal().GetP(), (func() int {
			if localctx.(*Fn_vectorContext).Get_TK_IDENTIFICADOR() == nil {
				return 0
			} else {
				return localctx.(*Fn_vectorContext).Get_TK_IDENTIFICADOR().GetLine()
			}
		}()), localctx.(*Fn_vectorContext).Get_TK_IDENTIFICADOR().GetColumn())

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(664)

			var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

			localctx.(*Fn_vectorContext)._TK_IDENTIFICADOR = _m
		}
		{
			p.SetState(665)
			p.Match(db_rustparserTK_PUNTO)
		}
		{
			p.SetState(666)
			p.Match(db_rustparserTK_REMOVE)
		}
		{
			p.SetState(667)
			p.Match(db_rustparserTK_PI)
		}
		{
			p.SetState(668)

			var _x = p.Expression()

			localctx.(*Fn_vectorContext)._expression = _x
		}
		{
			p.SetState(669)
			p.Match(db_rustparserTK_PD)
		}
		{
			p.SetState(670)
			p.Match(db_rustparserTK_PYC)
		}

		localctx.(*Fn_vectorContext).instr = funnatvect.Nremovevect((func() string {
			if localctx.(*Fn_vectorContext).Get_TK_IDENTIFICADOR() == nil {
				return ""
			} else {
				return localctx.(*Fn_vectorContext).Get_TK_IDENTIFICADOR().GetText()
			}
		}()), localctx.(*Fn_vectorContext).Get_expression().GetP(), (func() int {
			if localctx.(*Fn_vectorContext).Get_TK_IDENTIFICADOR() == nil {
				return 0
			} else {
				return localctx.(*Fn_vectorContext).Get_TK_IDENTIFICADOR().GetLine()
			}
		}()), localctx.(*Fn_vectorContext).Get_TK_IDENTIFICADOR().GetColumn())

	}

	return localctx
}

// IAsignacionContext is an interface to support dynamic dispatch.
type IAsignacionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_TK_IDENTIFICADOR returns the _TK_IDENTIFICADOR token.
	Get_TK_IDENTIFICADOR() antlr.Token

	// Set_TK_IDENTIFICADOR sets the _TK_IDENTIFICADOR token.
	Set_TK_IDENTIFICADOR(antlr.Token)

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruccion

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruccion)

	// IsAsignacionContext differentiates from other interfaces.
	IsAsignacionContext()
}

type AsignacionContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	instr             interfaces.Instruccion
	_TK_IDENTIFICADOR antlr.Token
	_expression       IExpressionContext
}

func NewEmptyAsignacionContext() *AsignacionContext {
	var p = new(AsignacionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_asignacion
	return p
}

func (*AsignacionContext) IsAsignacionContext() {}

func NewAsignacionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsignacionContext {
	var p = new(AsignacionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_asignacion

	return p
}

func (s *AsignacionContext) GetParser() antlr.Parser { return s.parser }

func (s *AsignacionContext) Get_TK_IDENTIFICADOR() antlr.Token { return s._TK_IDENTIFICADOR }

func (s *AsignacionContext) Set_TK_IDENTIFICADOR(v antlr.Token) { s._TK_IDENTIFICADOR = v }

func (s *AsignacionContext) Get_expression() IExpressionContext { return s._expression }

func (s *AsignacionContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *AsignacionContext) GetInstr() interfaces.Instruccion { return s.instr }

func (s *AsignacionContext) SetInstr(v interfaces.Instruccion) { s.instr = v }

func (s *AsignacionContext) TK_IDENTIFICADOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_IDENTIFICADOR, 0)
}

func (s *AsignacionContext) TK_IGUAL() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_IGUAL, 0)
}

func (s *AsignacionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AsignacionContext) TK_PYC() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PYC, 0)
}

func (s *AsignacionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsignacionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsignacionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterAsignacion(s)
	}
}

func (s *AsignacionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitAsignacion(s)
	}
}

func (p *db_rustparser) Asignacion() (localctx IAsignacionContext) {
	localctx = NewAsignacionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, db_rustparserRULE_asignacion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(675)

		var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

		localctx.(*AsignacionContext)._TK_IDENTIFICADOR = _m
	}
	{
		p.SetState(676)
		p.Match(db_rustparserTK_IGUAL)
	}
	{
		p.SetState(677)

		var _x = p.Expression()

		localctx.(*AsignacionContext)._expression = _x
	}
	{
		p.SetState(678)
		p.Match(db_rustparserTK_PYC)
	}

	str := (func() string {
		if localctx.(*AsignacionContext).Get_TK_IDENTIFICADOR() == nil {
			return ""
		} else {
			return localctx.(*AsignacionContext).Get_TK_IDENTIFICADOR().GetText()
		}
	}())[0:len((func() string {
		if localctx.(*AsignacionContext).Get_TK_IDENTIFICADOR() == nil {
			return ""
		} else {
			return localctx.(*AsignacionContext).Get_TK_IDENTIFICADOR().GetText()
		}
	}()))]
	localctx.(*AsignacionContext).instr = asignaciones.Nasignacion(str, localctx.(*AsignacionContext).Get_expression().GetP(), (func() int {
		if localctx.(*AsignacionContext).Get_TK_IDENTIFICADOR() == nil {
			return 0
		} else {
			return localctx.(*AsignacionContext).Get_TK_IDENTIFICADOR().GetLine()
		}
	}()), localctx.(*AsignacionContext).Get_TK_IDENTIFICADOR().GetColumn())

	return localctx
}

// IAsignar_struct_mutableContext is an interface to support dynamic dispatch.
type IAsignar_struct_mutableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_TK_IDENTIFICADOR returns the _TK_IDENTIFICADOR token.
	Get_TK_IDENTIFICADOR() antlr.Token

	// GetNom returns the nom token.
	GetNom() antlr.Token

	// Set_TK_IDENTIFICADOR sets the _TK_IDENTIFICADOR token.
	Set_TK_IDENTIFICADOR(antlr.Token)

	// SetNom sets the nom token.
	SetNom(antlr.Token)

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruccion

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruccion)

	// IsAsignar_struct_mutableContext differentiates from other interfaces.
	IsAsignar_struct_mutableContext()
}

type Asignar_struct_mutableContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	instr             interfaces.Instruccion
	_TK_IDENTIFICADOR antlr.Token
	nom               antlr.Token
	_expression       IExpressionContext
}

func NewEmptyAsignar_struct_mutableContext() *Asignar_struct_mutableContext {
	var p = new(Asignar_struct_mutableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_asignar_struct_mutable
	return p
}

func (*Asignar_struct_mutableContext) IsAsignar_struct_mutableContext() {}

func NewAsignar_struct_mutableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Asignar_struct_mutableContext {
	var p = new(Asignar_struct_mutableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_asignar_struct_mutable

	return p
}

func (s *Asignar_struct_mutableContext) GetParser() antlr.Parser { return s.parser }

func (s *Asignar_struct_mutableContext) Get_TK_IDENTIFICADOR() antlr.Token {
	return s._TK_IDENTIFICADOR
}

func (s *Asignar_struct_mutableContext) GetNom() antlr.Token { return s.nom }

func (s *Asignar_struct_mutableContext) Set_TK_IDENTIFICADOR(v antlr.Token) { s._TK_IDENTIFICADOR = v }

func (s *Asignar_struct_mutableContext) SetNom(v antlr.Token) { s.nom = v }

func (s *Asignar_struct_mutableContext) Get_expression() IExpressionContext { return s._expression }

func (s *Asignar_struct_mutableContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *Asignar_struct_mutableContext) GetInstr() interfaces.Instruccion { return s.instr }

func (s *Asignar_struct_mutableContext) SetInstr(v interfaces.Instruccion) { s.instr = v }

func (s *Asignar_struct_mutableContext) AllTK_IDENTIFICADOR() []antlr.TerminalNode {
	return s.GetTokens(db_rustparserTK_IDENTIFICADOR)
}

func (s *Asignar_struct_mutableContext) TK_IDENTIFICADOR(i int) antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_IDENTIFICADOR, i)
}

func (s *Asignar_struct_mutableContext) TK_PUNTO() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PUNTO, 0)
}

func (s *Asignar_struct_mutableContext) TK_IGUAL() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_IGUAL, 0)
}

func (s *Asignar_struct_mutableContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Asignar_struct_mutableContext) TK_PYC() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PYC, 0)
}

func (s *Asignar_struct_mutableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Asignar_struct_mutableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Asignar_struct_mutableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterAsignar_struct_mutable(s)
	}
}

func (s *Asignar_struct_mutableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitAsignar_struct_mutable(s)
	}
}

func (p *db_rustparser) Asignar_struct_mutable() (localctx IAsignar_struct_mutableContext) {
	localctx = NewAsignar_struct_mutableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, db_rustparserRULE_asignar_struct_mutable)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(681)

		var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

		localctx.(*Asignar_struct_mutableContext)._TK_IDENTIFICADOR = _m
	}
	{
		p.SetState(682)
		p.Match(db_rustparserTK_PUNTO)
	}
	{
		p.SetState(683)

		var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

		localctx.(*Asignar_struct_mutableContext).nom = _m
	}
	{
		p.SetState(684)
		p.Match(db_rustparserTK_IGUAL)
	}
	{
		p.SetState(685)

		var _x = p.Expression()

		localctx.(*Asignar_struct_mutableContext)._expression = _x
	}
	{
		p.SetState(686)
		p.Match(db_rustparserTK_PYC)
	}

	localctx.(*Asignar_struct_mutableContext).instr = asignaciones.Nasigstruct((func() string {
		if localctx.(*Asignar_struct_mutableContext).Get_TK_IDENTIFICADOR() == nil {
			return ""
		} else {
			return localctx.(*Asignar_struct_mutableContext).Get_TK_IDENTIFICADOR().GetText()
		}
	}()), (func() string {
		if localctx.(*Asignar_struct_mutableContext).GetNom() == nil {
			return ""
		} else {
			return localctx.(*Asignar_struct_mutableContext).GetNom().GetText()
		}
	}()), localctx.(*Asignar_struct_mutableContext).Get_expression().GetP(), (func() int {
		if localctx.(*Asignar_struct_mutableContext).Get_TK_IDENTIFICADOR() == nil {
			return 0
		} else {
			return localctx.(*Asignar_struct_mutableContext).Get_TK_IDENTIFICADOR().GetLine()
		}
	}()), localctx.(*Asignar_struct_mutableContext).Get_TK_IDENTIFICADOR().GetColumn())

	return localctx
}

// ILlamadaContext is an interface to support dynamic dispatch.
type ILlamadaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_TK_IDENTIFICADOR returns the _TK_IDENTIFICADOR token.
	Get_TK_IDENTIFICADOR() antlr.Token

	// Set_TK_IDENTIFICADOR sets the _TK_IDENTIFICADOR token.
	Set_TK_IDENTIFICADOR(antlr.Token)

	// Get_list_expres returns the _list_expres rule contexts.
	Get_list_expres() IList_expresContext

	// Set_list_expres sets the _list_expres rule contexts.
	Set_list_expres(IList_expresContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruccion

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruccion)

	// IsLlamadaContext differentiates from other interfaces.
	IsLlamadaContext()
}

type LlamadaContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	instr             interfaces.Instruccion
	_TK_IDENTIFICADOR antlr.Token
	_list_expres      IList_expresContext
}

func NewEmptyLlamadaContext() *LlamadaContext {
	var p = new(LlamadaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_llamada
	return p
}

func (*LlamadaContext) IsLlamadaContext() {}

func NewLlamadaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LlamadaContext {
	var p = new(LlamadaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_llamada

	return p
}

func (s *LlamadaContext) GetParser() antlr.Parser { return s.parser }

func (s *LlamadaContext) Get_TK_IDENTIFICADOR() antlr.Token { return s._TK_IDENTIFICADOR }

func (s *LlamadaContext) Set_TK_IDENTIFICADOR(v antlr.Token) { s._TK_IDENTIFICADOR = v }

func (s *LlamadaContext) Get_list_expres() IList_expresContext { return s._list_expres }

func (s *LlamadaContext) Set_list_expres(v IList_expresContext) { s._list_expres = v }

func (s *LlamadaContext) GetInstr() interfaces.Instruccion { return s.instr }

func (s *LlamadaContext) SetInstr(v interfaces.Instruccion) { s.instr = v }

func (s *LlamadaContext) TK_IDENTIFICADOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_IDENTIFICADOR, 0)
}

func (s *LlamadaContext) TK_PI() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PI, 0)
}

func (s *LlamadaContext) List_expres() IList_expresContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_expresContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_expresContext)
}

func (s *LlamadaContext) TK_PD() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PD, 0)
}

func (s *LlamadaContext) TK_PYC() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PYC, 0)
}

func (s *LlamadaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LlamadaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LlamadaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterLlamada(s)
	}
}

func (s *LlamadaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitLlamada(s)
	}
}

func (p *db_rustparser) Llamada() (localctx ILlamadaContext) {
	localctx = NewLlamadaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, db_rustparserRULE_llamada)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(689)

		var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

		localctx.(*LlamadaContext)._TK_IDENTIFICADOR = _m
	}
	{
		p.SetState(690)
		p.Match(db_rustparserTK_PI)
	}
	{
		p.SetState(691)

		var _x = p.list_expres(0)

		localctx.(*LlamadaContext)._list_expres = _x
	}
	{
		p.SetState(692)
		p.Match(db_rustparserTK_PD)
	}
	{
		p.SetState(693)
		p.Match(db_rustparserTK_PYC)
	}

	str := (func() string {
		if localctx.(*LlamadaContext).Get_TK_IDENTIFICADOR() == nil {
			return ""
		} else {
			return localctx.(*LlamadaContext).Get_TK_IDENTIFICADOR().GetText()
		}
	}())[0:len((func() string {
		if localctx.(*LlamadaContext).Get_TK_IDENTIFICADOR() == nil {
			return ""
		} else {
			return localctx.(*LlamadaContext).Get_TK_IDENTIFICADOR().GetText()
		}
	}()))]
	localctx.(*LlamadaContext).instr = funciones.Nllamada(str, localctx.(*LlamadaContext).Get_list_expres().GetLis_expres(), (func() int {
		if localctx.(*LlamadaContext).Get_TK_IDENTIFICADOR() == nil {
			return 0
		} else {
			return localctx.(*LlamadaContext).Get_TK_IDENTIFICADOR().GetLine()
		}
	}()), localctx.(*LlamadaContext).Get_TK_IDENTIFICADOR().GetColumn())

	return localctx
}

// ITransferenciaContext is an interface to support dynamic dispatch.
type ITransferenciaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_retorno returns the _retorno rule contexts.
	Get_retorno() IRetornoContext

	// Get_romper returns the _romper rule contexts.
	Get_romper() IRomperContext

	// Get_continuar returns the _continuar rule contexts.
	Get_continuar() IContinuarContext

	// Set_retorno sets the _retorno rule contexts.
	Set_retorno(IRetornoContext)

	// Set_romper sets the _romper rule contexts.
	Set_romper(IRomperContext)

	// Set_continuar sets the _continuar rule contexts.
	Set_continuar(IContinuarContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruccion

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruccion)

	// IsTransferenciaContext differentiates from other interfaces.
	IsTransferenciaContext()
}

type TransferenciaContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	instr      interfaces.Instruccion
	_retorno   IRetornoContext
	_romper    IRomperContext
	_continuar IContinuarContext
}

func NewEmptyTransferenciaContext() *TransferenciaContext {
	var p = new(TransferenciaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_transferencia
	return p
}

func (*TransferenciaContext) IsTransferenciaContext() {}

func NewTransferenciaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TransferenciaContext {
	var p = new(TransferenciaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_transferencia

	return p
}

func (s *TransferenciaContext) GetParser() antlr.Parser { return s.parser }

func (s *TransferenciaContext) Get_retorno() IRetornoContext { return s._retorno }

func (s *TransferenciaContext) Get_romper() IRomperContext { return s._romper }

func (s *TransferenciaContext) Get_continuar() IContinuarContext { return s._continuar }

func (s *TransferenciaContext) Set_retorno(v IRetornoContext) { s._retorno = v }

func (s *TransferenciaContext) Set_romper(v IRomperContext) { s._romper = v }

func (s *TransferenciaContext) Set_continuar(v IContinuarContext) { s._continuar = v }

func (s *TransferenciaContext) GetInstr() interfaces.Instruccion { return s.instr }

func (s *TransferenciaContext) SetInstr(v interfaces.Instruccion) { s.instr = v }

func (s *TransferenciaContext) Retorno() IRetornoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRetornoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRetornoContext)
}

func (s *TransferenciaContext) Romper() IRomperContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRomperContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRomperContext)
}

func (s *TransferenciaContext) Continuar() IContinuarContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContinuarContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContinuarContext)
}

func (s *TransferenciaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TransferenciaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TransferenciaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterTransferencia(s)
	}
}

func (s *TransferenciaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitTransferencia(s)
	}
}

func (p *db_rustparser) Transferencia() (localctx ITransferenciaContext) {
	localctx = NewTransferenciaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, db_rustparserRULE_transferencia)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(705)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case db_rustparserTK_TIPOINT, db_rustparserTK_TIPOFLOAT, db_rustparserTK_VECT, db_rustparserTK_IF, db_rustparserTK_MATCH, db_rustparserTK_LOOP, db_rustparserTK_RETURN, db_rustparserTK_TRUE, db_rustparserTK_FALSE, db_rustparserTK_FLOAT, db_rustparserTK_ENTERO, db_rustparserTK_CADENA, db_rustparserTK_CARACTER, db_rustparserTK_IDENTIFICADOR, db_rustparserTK_RESTA, db_rustparserTK_NOT, db_rustparserTK_CI, db_rustparserTK_PI:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(696)

			var _x = p.Retorno()

			localctx.(*TransferenciaContext)._retorno = _x
		}
		localctx.(*TransferenciaContext).instr = localctx.(*TransferenciaContext).Get_retorno().GetInstr()

	case db_rustparserTK_BREAK:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(699)

			var _x = p.Romper()

			localctx.(*TransferenciaContext)._romper = _x
		}
		localctx.(*TransferenciaContext).instr = localctx.(*TransferenciaContext).Get_romper().GetInstr()

	case db_rustparserTK_CONTINUE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(702)

			var _x = p.Continuar()

			localctx.(*TransferenciaContext)._continuar = _x
		}
		localctx.(*TransferenciaContext).instr = localctx.(*TransferenciaContext).Get_continuar().GetInstr()

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IRetornoContext is an interface to support dynamic dispatch.
type IRetornoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruccion

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruccion)

	// IsRetornoContext differentiates from other interfaces.
	IsRetornoContext()
}

type RetornoContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	instr       interfaces.Instruccion
	_expression IExpressionContext
}

func NewEmptyRetornoContext() *RetornoContext {
	var p = new(RetornoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_retorno
	return p
}

func (*RetornoContext) IsRetornoContext() {}

func NewRetornoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RetornoContext {
	var p = new(RetornoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_retorno

	return p
}

func (s *RetornoContext) GetParser() antlr.Parser { return s.parser }

func (s *RetornoContext) Get_expression() IExpressionContext { return s._expression }

func (s *RetornoContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *RetornoContext) GetInstr() interfaces.Instruccion { return s.instr }

func (s *RetornoContext) SetInstr(v interfaces.Instruccion) { s.instr = v }

func (s *RetornoContext) TK_RETURN() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_RETURN, 0)
}

func (s *RetornoContext) TK_PYC() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PYC, 0)
}

func (s *RetornoContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *RetornoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RetornoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RetornoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterRetorno(s)
	}
}

func (s *RetornoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitRetorno(s)
	}
}

func (p *db_rustparser) Retorno() (localctx IRetornoContext) {
	localctx = NewRetornoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, db_rustparserRULE_retorno)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(719)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(707)
			p.Match(db_rustparserTK_RETURN)
		}
		{
			p.SetState(708)
			p.Match(db_rustparserTK_PYC)
		}

		localctx.(*RetornoContext).instr = stransferencia.Nretorno(simbolos.METODO, nil)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(710)
			p.Match(db_rustparserTK_RETURN)
		}
		{
			p.SetState(711)

			var _x = p.Expression()

			localctx.(*RetornoContext)._expression = _x
		}
		{
			p.SetState(712)
			p.Match(db_rustparserTK_PYC)
		}

		localctx.(*RetornoContext).instr = stransferencia.Nretorno(simbolos.NULL, localctx.(*RetornoContext).Get_expression().GetP())

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(715)

			var _x = p.Expression()

			localctx.(*RetornoContext)._expression = _x
		}
		{
			p.SetState(716)
			p.Match(db_rustparserTK_PYC)
		}

		localctx.(*RetornoContext).instr = stransferencia.Nretorno(simbolos.NULL, localctx.(*RetornoContext).Get_expression().GetP())

	}

	return localctx
}

// IRomperContext is an interface to support dynamic dispatch.
type IRomperContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruccion

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruccion)

	// IsRomperContext differentiates from other interfaces.
	IsRomperContext()
}

type RomperContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	instr       interfaces.Instruccion
	_expression IExpressionContext
}

func NewEmptyRomperContext() *RomperContext {
	var p = new(RomperContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_romper
	return p
}

func (*RomperContext) IsRomperContext() {}

func NewRomperContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RomperContext {
	var p = new(RomperContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_romper

	return p
}

func (s *RomperContext) GetParser() antlr.Parser { return s.parser }

func (s *RomperContext) Get_expression() IExpressionContext { return s._expression }

func (s *RomperContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *RomperContext) GetInstr() interfaces.Instruccion { return s.instr }

func (s *RomperContext) SetInstr(v interfaces.Instruccion) { s.instr = v }

func (s *RomperContext) TK_BREAK() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_BREAK, 0)
}

func (s *RomperContext) TK_PYC() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PYC, 0)
}

func (s *RomperContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *RomperContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RomperContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RomperContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterRomper(s)
	}
}

func (s *RomperContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitRomper(s)
	}
}

func (p *db_rustparser) Romper() (localctx IRomperContext) {
	localctx = NewRomperContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, db_rustparserRULE_romper)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(729)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 28, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(721)
			p.Match(db_rustparserTK_BREAK)
		}
		{
			p.SetState(722)
			p.Match(db_rustparserTK_PYC)
		}

		localctx.(*RomperContext).instr = stransferencia.Nromper(simbolos.METODO, nil)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(724)
			p.Match(db_rustparserTK_BREAK)
		}
		{
			p.SetState(725)

			var _x = p.Expression()

			localctx.(*RomperContext)._expression = _x
		}
		{
			p.SetState(726)
			p.Match(db_rustparserTK_PYC)
		}

		localctx.(*RomperContext).instr = stransferencia.Nromper(simbolos.NULL, localctx.(*RomperContext).Get_expression().GetP())

	}

	return localctx
}

// IContinuarContext is an interface to support dynamic dispatch.
type IContinuarContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruccion

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruccion)

	// IsContinuarContext differentiates from other interfaces.
	IsContinuarContext()
}

type ContinuarContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	instr  interfaces.Instruccion
}

func NewEmptyContinuarContext() *ContinuarContext {
	var p = new(ContinuarContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_continuar
	return p
}

func (*ContinuarContext) IsContinuarContext() {}

func NewContinuarContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContinuarContext {
	var p = new(ContinuarContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_continuar

	return p
}

func (s *ContinuarContext) GetParser() antlr.Parser { return s.parser }

func (s *ContinuarContext) GetInstr() interfaces.Instruccion { return s.instr }

func (s *ContinuarContext) SetInstr(v interfaces.Instruccion) { s.instr = v }

func (s *ContinuarContext) TK_CONTINUE() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_CONTINUE, 0)
}

func (s *ContinuarContext) TK_PYC() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PYC, 0)
}

func (s *ContinuarContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContinuarContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ContinuarContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterContinuar(s)
	}
}

func (s *ContinuarContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitContinuar(s)
	}
}

func (p *db_rustparser) Continuar() (localctx IContinuarContext) {
	localctx = NewContinuarContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, db_rustparserRULE_continuar)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(731)
		p.Match(db_rustparserTK_CONTINUE)
	}
	{
		p.SetState(732)
		p.Match(db_rustparserTK_PYC)
	}

	localctx.(*ContinuarContext).instr = stransferencia.Ncontinuar(simbolos.METODO)

	return localctx
}

// IL_bloqueContext is an interface to support dynamic dispatch.
type IL_bloqueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetBlock returns the block rule contexts.
	GetBlock() IL_bloqueContext

	// Get_bloque returns the _bloque rule contexts.
	Get_bloque() IBloqueContext

	// SetBlock sets the block rule contexts.
	SetBlock(IL_bloqueContext)

	// Set_bloque sets the _bloque rule contexts.
	Set_bloque(IBloqueContext)

	// GetLbloque returns the lbloque attribute.
	GetLbloque() *arrayList.List

	// SetLbloque sets the lbloque attribute.
	SetLbloque(*arrayList.List)

	// IsL_bloqueContext differentiates from other interfaces.
	IsL_bloqueContext()
}

type L_bloqueContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	lbloque *arrayList.List
	block   IL_bloqueContext
	_bloque IBloqueContext
}

func NewEmptyL_bloqueContext() *L_bloqueContext {
	var p = new(L_bloqueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_l_bloque
	return p
}

func (*L_bloqueContext) IsL_bloqueContext() {}

func NewL_bloqueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *L_bloqueContext {
	var p = new(L_bloqueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_l_bloque

	return p
}

func (s *L_bloqueContext) GetParser() antlr.Parser { return s.parser }

func (s *L_bloqueContext) GetBlock() IL_bloqueContext { return s.block }

func (s *L_bloqueContext) Get_bloque() IBloqueContext { return s._bloque }

func (s *L_bloqueContext) SetBlock(v IL_bloqueContext) { s.block = v }

func (s *L_bloqueContext) Set_bloque(v IBloqueContext) { s._bloque = v }

func (s *L_bloqueContext) GetLbloque() *arrayList.List { return s.lbloque }

func (s *L_bloqueContext) SetLbloque(v *arrayList.List) { s.lbloque = v }

func (s *L_bloqueContext) Bloque() IBloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloqueContext)
}

func (s *L_bloqueContext) L_bloque() IL_bloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IL_bloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IL_bloqueContext)
}

func (s *L_bloqueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *L_bloqueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *L_bloqueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterL_bloque(s)
	}
}

func (s *L_bloqueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitL_bloque(s)
	}
}

func (p *db_rustparser) L_bloque() (localctx IL_bloqueContext) {
	return p.l_bloque(0)
}

func (p *db_rustparser) l_bloque(_p int) (localctx IL_bloqueContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewL_bloqueContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IL_bloqueContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 84
	p.EnterRecursionRule(localctx, 84, db_rustparserRULE_l_bloque, _p)

	localctx.(*L_bloqueContext).lbloque = arrayList.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(736)

		var _x = p.Bloque()

		localctx.(*L_bloqueContext)._bloque = _x
	}
	localctx.(*L_bloqueContext).lbloque.Add(localctx.(*L_bloqueContext).Get_bloque().GetInstr())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(745)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 29, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewL_bloqueContext(p, _parentctx, _parentState)
			localctx.(*L_bloqueContext).block = _prevctx
			p.PushNewRecursionContext(localctx, _startState, db_rustparserRULE_l_bloque)
			p.SetState(739)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(740)

				var _x = p.Bloque()

				localctx.(*L_bloqueContext)._bloque = _x
			}

			localctx.(*L_bloqueContext).GetBlock().GetLbloque().Add(localctx.(*L_bloqueContext).Get_bloque().GetInstr())
			localctx.(*L_bloqueContext).lbloque = localctx.(*L_bloqueContext).GetBlock().GetLbloque()

		}
		p.SetState(747)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 29, p.GetParserRuleContext())
	}

	return localctx
}

// IBloqueContext is an interface to support dynamic dispatch.
type IBloqueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_imprimir returns the _imprimir rule contexts.
	Get_imprimir() IImprimirContext

	// Get_sent_if returns the _sent_if rule contexts.
	Get_sent_if() ISent_ifContext

	// Get_sent_match returns the _sent_match rule contexts.
	Get_sent_match() ISent_matchContext

	// Get_loop returns the _loop rule contexts.
	Get_loop() ILoopContext

	// Get_c_while returns the _c_while rule contexts.
	Get_c_while() IC_whileContext

	// Get_declaracion returns the _declaracion rule contexts.
	Get_declaracion() IDeclaracionContext

	// Get_asignacion returns the _asignacion rule contexts.
	Get_asignacion() IAsignacionContext

	// Get_asignar_struct_mutable returns the _asignar_struct_mutable rule contexts.
	Get_asignar_struct_mutable() IAsignar_struct_mutableContext

	// Get_transferencia returns the _transferencia rule contexts.
	Get_transferencia() ITransferenciaContext

	// Get_llamada returns the _llamada rule contexts.
	Get_llamada() ILlamadaContext

	// Get_fn_vector returns the _fn_vector rule contexts.
	Get_fn_vector() IFn_vectorContext

	// Set_imprimir sets the _imprimir rule contexts.
	Set_imprimir(IImprimirContext)

	// Set_sent_if sets the _sent_if rule contexts.
	Set_sent_if(ISent_ifContext)

	// Set_sent_match sets the _sent_match rule contexts.
	Set_sent_match(ISent_matchContext)

	// Set_loop sets the _loop rule contexts.
	Set_loop(ILoopContext)

	// Set_c_while sets the _c_while rule contexts.
	Set_c_while(IC_whileContext)

	// Set_declaracion sets the _declaracion rule contexts.
	Set_declaracion(IDeclaracionContext)

	// Set_asignacion sets the _asignacion rule contexts.
	Set_asignacion(IAsignacionContext)

	// Set_asignar_struct_mutable sets the _asignar_struct_mutable rule contexts.
	Set_asignar_struct_mutable(IAsignar_struct_mutableContext)

	// Set_transferencia sets the _transferencia rule contexts.
	Set_transferencia(ITransferenciaContext)

	// Set_llamada sets the _llamada rule contexts.
	Set_llamada(ILlamadaContext)

	// Set_fn_vector sets the _fn_vector rule contexts.
	Set_fn_vector(IFn_vectorContext)

	// GetInstr returns the instr attribute.
	GetInstr() interfaces.Instruccion

	// SetInstr sets the instr attribute.
	SetInstr(interfaces.Instruccion)

	// IsBloqueContext differentiates from other interfaces.
	IsBloqueContext()
}

type BloqueContext struct {
	*antlr.BaseParserRuleContext
	parser                  antlr.Parser
	instr                   interfaces.Instruccion
	_imprimir               IImprimirContext
	_sent_if                ISent_ifContext
	_sent_match             ISent_matchContext
	_loop                   ILoopContext
	_c_while                IC_whileContext
	_declaracion            IDeclaracionContext
	_asignacion             IAsignacionContext
	_asignar_struct_mutable IAsignar_struct_mutableContext
	_transferencia          ITransferenciaContext
	_llamada                ILlamadaContext
	_fn_vector              IFn_vectorContext
}

func NewEmptyBloqueContext() *BloqueContext {
	var p = new(BloqueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_bloque
	return p
}

func (*BloqueContext) IsBloqueContext() {}

func NewBloqueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BloqueContext {
	var p = new(BloqueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_bloque

	return p
}

func (s *BloqueContext) GetParser() antlr.Parser { return s.parser }

func (s *BloqueContext) Get_imprimir() IImprimirContext { return s._imprimir }

func (s *BloqueContext) Get_sent_if() ISent_ifContext { return s._sent_if }

func (s *BloqueContext) Get_sent_match() ISent_matchContext { return s._sent_match }

func (s *BloqueContext) Get_loop() ILoopContext { return s._loop }

func (s *BloqueContext) Get_c_while() IC_whileContext { return s._c_while }

func (s *BloqueContext) Get_declaracion() IDeclaracionContext { return s._declaracion }

func (s *BloqueContext) Get_asignacion() IAsignacionContext { return s._asignacion }

func (s *BloqueContext) Get_asignar_struct_mutable() IAsignar_struct_mutableContext {
	return s._asignar_struct_mutable
}

func (s *BloqueContext) Get_transferencia() ITransferenciaContext { return s._transferencia }

func (s *BloqueContext) Get_llamada() ILlamadaContext { return s._llamada }

func (s *BloqueContext) Get_fn_vector() IFn_vectorContext { return s._fn_vector }

func (s *BloqueContext) Set_imprimir(v IImprimirContext) { s._imprimir = v }

func (s *BloqueContext) Set_sent_if(v ISent_ifContext) { s._sent_if = v }

func (s *BloqueContext) Set_sent_match(v ISent_matchContext) { s._sent_match = v }

func (s *BloqueContext) Set_loop(v ILoopContext) { s._loop = v }

func (s *BloqueContext) Set_c_while(v IC_whileContext) { s._c_while = v }

func (s *BloqueContext) Set_declaracion(v IDeclaracionContext) { s._declaracion = v }

func (s *BloqueContext) Set_asignacion(v IAsignacionContext) { s._asignacion = v }

func (s *BloqueContext) Set_asignar_struct_mutable(v IAsignar_struct_mutableContext) {
	s._asignar_struct_mutable = v
}

func (s *BloqueContext) Set_transferencia(v ITransferenciaContext) { s._transferencia = v }

func (s *BloqueContext) Set_llamada(v ILlamadaContext) { s._llamada = v }

func (s *BloqueContext) Set_fn_vector(v IFn_vectorContext) { s._fn_vector = v }

func (s *BloqueContext) GetInstr() interfaces.Instruccion { return s.instr }

func (s *BloqueContext) SetInstr(v interfaces.Instruccion) { s.instr = v }

func (s *BloqueContext) Imprimir() IImprimirContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImprimirContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImprimirContext)
}

func (s *BloqueContext) Sent_if() ISent_ifContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISent_ifContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISent_ifContext)
}

func (s *BloqueContext) Sent_match() ISent_matchContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISent_matchContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISent_matchContext)
}

func (s *BloqueContext) Loop() ILoopContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopContext)
}

func (s *BloqueContext) C_while() IC_whileContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IC_whileContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IC_whileContext)
}

func (s *BloqueContext) Declaracion() IDeclaracionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaracionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaracionContext)
}

func (s *BloqueContext) Asignacion() IAsignacionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsignacionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsignacionContext)
}

func (s *BloqueContext) Asignar_struct_mutable() IAsignar_struct_mutableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsignar_struct_mutableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsignar_struct_mutableContext)
}

func (s *BloqueContext) Transferencia() ITransferenciaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransferenciaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITransferenciaContext)
}

func (s *BloqueContext) Llamada() ILlamadaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILlamadaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILlamadaContext)
}

func (s *BloqueContext) Fn_vector() IFn_vectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFn_vectorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFn_vectorContext)
}

func (s *BloqueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BloqueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BloqueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterBloque(s)
	}
}

func (s *BloqueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitBloque(s)
	}
}

func (p *db_rustparser) Bloque() (localctx IBloqueContext) {
	localctx = NewBloqueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, db_rustparserRULE_bloque)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(781)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 30, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(748)

			var _x = p.Imprimir()

			localctx.(*BloqueContext)._imprimir = _x
		}
		localctx.(*BloqueContext).instr = localctx.(*BloqueContext).Get_imprimir().GetInstr()

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(751)

			var _x = p.Sent_if()

			localctx.(*BloqueContext)._sent_if = _x
		}
		localctx.(*BloqueContext).instr = localctx.(*BloqueContext).Get_sent_if().GetInstr()

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(754)

			var _x = p.Sent_match()

			localctx.(*BloqueContext)._sent_match = _x
		}
		localctx.(*BloqueContext).instr = localctx.(*BloqueContext).Get_sent_match().GetInstr()

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(757)

			var _x = p.Loop()

			localctx.(*BloqueContext)._loop = _x
		}
		localctx.(*BloqueContext).instr = localctx.(*BloqueContext).Get_loop().GetInstr()

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(760)

			var _x = p.C_while()

			localctx.(*BloqueContext)._c_while = _x
		}
		localctx.(*BloqueContext).instr = localctx.(*BloqueContext).Get_c_while().GetInstr()

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(763)

			var _x = p.Declaracion()

			localctx.(*BloqueContext)._declaracion = _x
		}
		localctx.(*BloqueContext).instr = localctx.(*BloqueContext).Get_declaracion().GetInstr()

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(766)

			var _x = p.Asignacion()

			localctx.(*BloqueContext)._asignacion = _x
		}
		localctx.(*BloqueContext).instr = localctx.(*BloqueContext).Get_asignacion().GetInstr()

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(769)

			var _x = p.Asignar_struct_mutable()

			localctx.(*BloqueContext)._asignar_struct_mutable = _x
		}
		localctx.(*BloqueContext).instr = localctx.(*BloqueContext).Get_asignar_struct_mutable().GetInstr()

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(772)

			var _x = p.Transferencia()

			localctx.(*BloqueContext)._transferencia = _x
		}
		localctx.(*BloqueContext).instr = localctx.(*BloqueContext).Get_transferencia().GetInstr()

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(775)

			var _x = p.Llamada()

			localctx.(*BloqueContext)._llamada = _x
		}
		localctx.(*BloqueContext).instr = localctx.(*BloqueContext).Get_llamada().GetInstr()

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(778)

			var _x = p.Fn_vector()

			localctx.(*BloqueContext)._fn_vector = _x
		}
		localctx.(*BloqueContext).instr = localctx.(*BloqueContext).Get_fn_vector().GetInstr()

	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_fun_nativas returns the _fun_nativas rule contexts.
	Get_fun_nativas() IFun_nativasContext

	// Get_nativas_vector returns the _nativas_vector rule contexts.
	Get_nativas_vector() INativas_vectorContext

	// Get_expre_logica returns the _expre_logica rule contexts.
	Get_expre_logica() IExpre_logicaContext

	// Get_expre_relacional returns the _expre_relacional rule contexts.
	Get_expre_relacional() IExpre_relacionalContext

	// Get_expre_aritmetica returns the _expre_aritmetica rule contexts.
	Get_expre_aritmetica() IExpre_aritmeticaContext

	// Get_sent_if returns the _sent_if rule contexts.
	Get_sent_if() ISent_ifContext

	// Get_sent_match returns the _sent_match rule contexts.
	Get_sent_match() ISent_matchContext

	// Get_loop returns the _loop rule contexts.
	Get_loop() ILoopContext

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Get_vectores_inicio returns the _vectores_inicio rule contexts.
	Get_vectores_inicio() IVectores_inicioContext

	// Get_arreglos_inicio returns the _arreglos_inicio rule contexts.
	Get_arreglos_inicio() IArreglos_inicioContext

	// Get_accesso_arreglo returns the _accesso_arreglo rule contexts.
	Get_accesso_arreglo() IAccesso_arregloContext

	// Get_acceso_vector returns the _acceso_vector rule contexts.
	Get_acceso_vector() IAcceso_vectorContext

	// Get_ingreso_struct returns the _ingreso_struct rule contexts.
	Get_ingreso_struct() IIngreso_structContext

	// Get_valores returns the _valores rule contexts.
	Get_valores() IValoresContext

	// Set_fun_nativas sets the _fun_nativas rule contexts.
	Set_fun_nativas(IFun_nativasContext)

	// Set_nativas_vector sets the _nativas_vector rule contexts.
	Set_nativas_vector(INativas_vectorContext)

	// Set_expre_logica sets the _expre_logica rule contexts.
	Set_expre_logica(IExpre_logicaContext)

	// Set_expre_relacional sets the _expre_relacional rule contexts.
	Set_expre_relacional(IExpre_relacionalContext)

	// Set_expre_aritmetica sets the _expre_aritmetica rule contexts.
	Set_expre_aritmetica(IExpre_aritmeticaContext)

	// Set_sent_if sets the _sent_if rule contexts.
	Set_sent_if(ISent_ifContext)

	// Set_sent_match sets the _sent_match rule contexts.
	Set_sent_match(ISent_matchContext)

	// Set_loop sets the _loop rule contexts.
	Set_loop(ILoopContext)

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// Set_vectores_inicio sets the _vectores_inicio rule contexts.
	Set_vectores_inicio(IVectores_inicioContext)

	// Set_arreglos_inicio sets the _arreglos_inicio rule contexts.
	Set_arreglos_inicio(IArreglos_inicioContext)

	// Set_accesso_arreglo sets the _accesso_arreglo rule contexts.
	Set_accesso_arreglo(IAccesso_arregloContext)

	// Set_acceso_vector sets the _acceso_vector rule contexts.
	Set_acceso_vector(IAcceso_vectorContext)

	// Set_ingreso_struct sets the _ingreso_struct rule contexts.
	Set_ingreso_struct(IIngreso_structContext)

	// Set_valores sets the _valores rule contexts.
	Set_valores(IValoresContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	p                 interfaces.Expresion
	_fun_nativas      IFun_nativasContext
	_nativas_vector   INativas_vectorContext
	_expre_logica     IExpre_logicaContext
	_expre_relacional IExpre_relacionalContext
	_expre_aritmetica IExpre_aritmeticaContext
	_sent_if          ISent_ifContext
	_sent_match       ISent_matchContext
	_loop             ILoopContext
	_expression       IExpressionContext
	_vectores_inicio  IVectores_inicioContext
	_arreglos_inicio  IArreglos_inicioContext
	_accesso_arreglo  IAccesso_arregloContext
	_acceso_vector    IAcceso_vectorContext
	_ingreso_struct   IIngreso_structContext
	_valores          IValoresContext
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) Get_fun_nativas() IFun_nativasContext { return s._fun_nativas }

func (s *ExpressionContext) Get_nativas_vector() INativas_vectorContext { return s._nativas_vector }

func (s *ExpressionContext) Get_expre_logica() IExpre_logicaContext { return s._expre_logica }

func (s *ExpressionContext) Get_expre_relacional() IExpre_relacionalContext {
	return s._expre_relacional
}

func (s *ExpressionContext) Get_expre_aritmetica() IExpre_aritmeticaContext {
	return s._expre_aritmetica
}

func (s *ExpressionContext) Get_sent_if() ISent_ifContext { return s._sent_if }

func (s *ExpressionContext) Get_sent_match() ISent_matchContext { return s._sent_match }

func (s *ExpressionContext) Get_loop() ILoopContext { return s._loop }

func (s *ExpressionContext) Get_expression() IExpressionContext { return s._expression }

func (s *ExpressionContext) Get_vectores_inicio() IVectores_inicioContext { return s._vectores_inicio }

func (s *ExpressionContext) Get_arreglos_inicio() IArreglos_inicioContext { return s._arreglos_inicio }

func (s *ExpressionContext) Get_accesso_arreglo() IAccesso_arregloContext { return s._accesso_arreglo }

func (s *ExpressionContext) Get_acceso_vector() IAcceso_vectorContext { return s._acceso_vector }

func (s *ExpressionContext) Get_ingreso_struct() IIngreso_structContext { return s._ingreso_struct }

func (s *ExpressionContext) Get_valores() IValoresContext { return s._valores }

func (s *ExpressionContext) Set_fun_nativas(v IFun_nativasContext) { s._fun_nativas = v }

func (s *ExpressionContext) Set_nativas_vector(v INativas_vectorContext) { s._nativas_vector = v }

func (s *ExpressionContext) Set_expre_logica(v IExpre_logicaContext) { s._expre_logica = v }

func (s *ExpressionContext) Set_expre_relacional(v IExpre_relacionalContext) { s._expre_relacional = v }

func (s *ExpressionContext) Set_expre_aritmetica(v IExpre_aritmeticaContext) { s._expre_aritmetica = v }

func (s *ExpressionContext) Set_sent_if(v ISent_ifContext) { s._sent_if = v }

func (s *ExpressionContext) Set_sent_match(v ISent_matchContext) { s._sent_match = v }

func (s *ExpressionContext) Set_loop(v ILoopContext) { s._loop = v }

func (s *ExpressionContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *ExpressionContext) Set_vectores_inicio(v IVectores_inicioContext) { s._vectores_inicio = v }

func (s *ExpressionContext) Set_arreglos_inicio(v IArreglos_inicioContext) { s._arreglos_inicio = v }

func (s *ExpressionContext) Set_accesso_arreglo(v IAccesso_arregloContext) { s._accesso_arreglo = v }

func (s *ExpressionContext) Set_acceso_vector(v IAcceso_vectorContext) { s._acceso_vector = v }

func (s *ExpressionContext) Set_ingreso_struct(v IIngreso_structContext) { s._ingreso_struct = v }

func (s *ExpressionContext) Set_valores(v IValoresContext) { s._valores = v }

func (s *ExpressionContext) GetP() interfaces.Expresion { return s.p }

func (s *ExpressionContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *ExpressionContext) Fun_nativas() IFun_nativasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFun_nativasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFun_nativasContext)
}

func (s *ExpressionContext) Nativas_vector() INativas_vectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INativas_vectorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INativas_vectorContext)
}

func (s *ExpressionContext) Expre_logica() IExpre_logicaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpre_logicaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpre_logicaContext)
}

func (s *ExpressionContext) Expre_relacional() IExpre_relacionalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpre_relacionalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpre_relacionalContext)
}

func (s *ExpressionContext) Expre_aritmetica() IExpre_aritmeticaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpre_aritmeticaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpre_aritmeticaContext)
}

func (s *ExpressionContext) Sent_if() ISent_ifContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISent_ifContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISent_ifContext)
}

func (s *ExpressionContext) Sent_match() ISent_matchContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISent_matchContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISent_matchContext)
}

func (s *ExpressionContext) Loop() ILoopContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopContext)
}

func (s *ExpressionContext) TK_PI() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PI, 0)
}

func (s *ExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionContext) TK_PD() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PD, 0)
}

func (s *ExpressionContext) Vectores_inicio() IVectores_inicioContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVectores_inicioContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVectores_inicioContext)
}

func (s *ExpressionContext) Arreglos_inicio() IArreglos_inicioContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArreglos_inicioContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArreglos_inicioContext)
}

func (s *ExpressionContext) Accesso_arreglo() IAccesso_arregloContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAccesso_arregloContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAccesso_arregloContext)
}

func (s *ExpressionContext) Acceso_vector() IAcceso_vectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAcceso_vectorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAcceso_vectorContext)
}

func (s *ExpressionContext) Ingreso_struct() IIngreso_structContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIngreso_structContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIngreso_structContext)
}

func (s *ExpressionContext) Valores() IValoresContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValoresContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValoresContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterExpression(s)
	}
}

func (s *ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitExpression(s)
	}
}

func (p *db_rustparser) Expression() (localctx IExpressionContext) {
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, db_rustparserRULE_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(830)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 31, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(783)

			var _x = p.fun_nativas(0)

			localctx.(*ExpressionContext)._fun_nativas = _x
		}
		localctx.(*ExpressionContext).p = localctx.(*ExpressionContext).Get_fun_nativas().GetP()

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(786)

			var _x = p.Nativas_vector()

			localctx.(*ExpressionContext)._nativas_vector = _x
		}
		localctx.(*ExpressionContext).p = localctx.(*ExpressionContext).Get_nativas_vector().GetP()

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(789)

			var _x = p.expre_logica(0)

			localctx.(*ExpressionContext)._expre_logica = _x
		}
		localctx.(*ExpressionContext).p = localctx.(*ExpressionContext).Get_expre_logica().GetP()

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(792)

			var _x = p.expre_relacional(0)

			localctx.(*ExpressionContext)._expre_relacional = _x
		}
		localctx.(*ExpressionContext).p = localctx.(*ExpressionContext).Get_expre_relacional().GetP()

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(795)

			var _x = p.expre_aritmetica(0)

			localctx.(*ExpressionContext)._expre_aritmetica = _x
		}
		localctx.(*ExpressionContext).p = localctx.(*ExpressionContext).Get_expre_aritmetica().GetP()

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(798)

			var _x = p.Sent_if()

			localctx.(*ExpressionContext)._sent_if = _x
		}
		localctx.(*ExpressionContext).p = localctx.(*ExpressionContext).Get_sent_if().GetP()

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(801)

			var _x = p.Sent_match()

			localctx.(*ExpressionContext)._sent_match = _x
		}
		localctx.(*ExpressionContext).p = localctx.(*ExpressionContext).Get_sent_match().GetP()

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(804)

			var _x = p.Loop()

			localctx.(*ExpressionContext)._loop = _x
		}
		localctx.(*ExpressionContext).p = localctx.(*ExpressionContext).Get_loop().GetP()

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(807)
			p.Match(db_rustparserTK_PI)
		}
		{
			p.SetState(808)

			var _x = p.Expression()

			localctx.(*ExpressionContext)._expression = _x
		}
		{
			p.SetState(809)
			p.Match(db_rustparserTK_PD)
		}
		localctx.(*ExpressionContext).p = localctx.(*ExpressionContext).Get_expression().GetP()

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(812)

			var _x = p.Vectores_inicio()

			localctx.(*ExpressionContext)._vectores_inicio = _x
		}
		localctx.(*ExpressionContext).p = localctx.(*ExpressionContext).Get_vectores_inicio().GetP()

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(815)

			var _x = p.Arreglos_inicio()

			localctx.(*ExpressionContext)._arreglos_inicio = _x
		}
		localctx.(*ExpressionContext).p = localctx.(*ExpressionContext).Get_arreglos_inicio().GetP()

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(818)

			var _x = p.Accesso_arreglo()

			localctx.(*ExpressionContext)._accesso_arreglo = _x
		}
		localctx.(*ExpressionContext).p = localctx.(*ExpressionContext).Get_accesso_arreglo().GetP()

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(821)

			var _x = p.Acceso_vector()

			localctx.(*ExpressionContext)._acceso_vector = _x
		}
		localctx.(*ExpressionContext).p = localctx.(*ExpressionContext).Get_acceso_vector().GetP()

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(824)

			var _x = p.Ingreso_struct()

			localctx.(*ExpressionContext)._ingreso_struct = _x
		}
		localctx.(*ExpressionContext).p = localctx.(*ExpressionContext).Get_ingreso_struct().GetP()

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(827)

			var _x = p.Valores()

			localctx.(*ExpressionContext)._valores = _x
		}
		localctx.(*ExpressionContext).p = localctx.(*ExpressionContext).Get_valores().GetP()

	}

	return localctx
}

// IList_expresContext is an interface to support dynamic dispatch.
type IList_expresContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetList returns the list rule contexts.
	GetList() IList_expresContext

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// SetList sets the list rule contexts.
	SetList(IList_expresContext)

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetLis_expres returns the lis_expres attribute.
	GetLis_expres() *arrayList.List

	// SetLis_expres sets the lis_expres attribute.
	SetLis_expres(*arrayList.List)

	// IsList_expresContext differentiates from other interfaces.
	IsList_expresContext()
}

type List_expresContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	lis_expres  *arrayList.List
	list        IList_expresContext
	_expression IExpressionContext
}

func NewEmptyList_expresContext() *List_expresContext {
	var p = new(List_expresContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_list_expres
	return p
}

func (*List_expresContext) IsList_expresContext() {}

func NewList_expresContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_expresContext {
	var p = new(List_expresContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_list_expres

	return p
}

func (s *List_expresContext) GetParser() antlr.Parser { return s.parser }

func (s *List_expresContext) GetList() IList_expresContext { return s.list }

func (s *List_expresContext) Get_expression() IExpressionContext { return s._expression }

func (s *List_expresContext) SetList(v IList_expresContext) { s.list = v }

func (s *List_expresContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *List_expresContext) GetLis_expres() *arrayList.List { return s.lis_expres }

func (s *List_expresContext) SetLis_expres(v *arrayList.List) { s.lis_expres = v }

func (s *List_expresContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *List_expresContext) TK_COMA() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_COMA, 0)
}

func (s *List_expresContext) List_expres() IList_expresContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_expresContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_expresContext)
}

func (s *List_expresContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_expresContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *List_expresContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterList_expres(s)
	}
}

func (s *List_expresContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitList_expres(s)
	}
}

func (p *db_rustparser) List_expres() (localctx IList_expresContext) {
	return p.list_expres(0)
}

func (p *db_rustparser) list_expres(_p int) (localctx IList_expresContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewList_expresContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IList_expresContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 90
	p.EnterRecursionRule(localctx, 90, db_rustparserRULE_list_expres, _p)

	localctx.(*List_expresContext).lis_expres = arrayList.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(833)

		var _x = p.Expression()

		localctx.(*List_expresContext)._expression = _x
	}
	localctx.(*List_expresContext).lis_expres.Add(localctx.(*List_expresContext).Get_expression().GetP())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(843)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewList_expresContext(p, _parentctx, _parentState)
			localctx.(*List_expresContext).list = _prevctx
			p.PushNewRecursionContext(localctx, _startState, db_rustparserRULE_list_expres)
			p.SetState(836)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(837)
				p.Match(db_rustparserTK_COMA)
			}
			{
				p.SetState(838)

				var _x = p.Expression()

				localctx.(*List_expresContext)._expression = _x
			}

			localctx.(*List_expresContext).GetList().GetLis_expres().Add(localctx.(*List_expresContext).Get_expression().GetP())
			localctx.(*List_expresContext).lis_expres = localctx.(*List_expresContext).GetList().GetLis_expres()

		}
		p.SetState(845)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext())
	}

	return localctx
}

// IVectores_inicioContext is an interface to support dynamic dispatch.
type IVectores_inicioContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_inicio_vect returns the _inicio_vect rule contexts.
	Get_inicio_vect() IInicio_vectContext

	// Get_resumen_vect returns the _resumen_vect rule contexts.
	Get_resumen_vect() IResumen_vectContext

	// Set_inicio_vect sets the _inicio_vect rule contexts.
	Set_inicio_vect(IInicio_vectContext)

	// Set_resumen_vect sets the _resumen_vect rule contexts.
	Set_resumen_vect(IResumen_vectContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsVectores_inicioContext differentiates from other interfaces.
	IsVectores_inicioContext()
}

type Vectores_inicioContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	p             interfaces.Expresion
	_inicio_vect  IInicio_vectContext
	_resumen_vect IResumen_vectContext
}

func NewEmptyVectores_inicioContext() *Vectores_inicioContext {
	var p = new(Vectores_inicioContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_vectores_inicio
	return p
}

func (*Vectores_inicioContext) IsVectores_inicioContext() {}

func NewVectores_inicioContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Vectores_inicioContext {
	var p = new(Vectores_inicioContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_vectores_inicio

	return p
}

func (s *Vectores_inicioContext) GetParser() antlr.Parser { return s.parser }

func (s *Vectores_inicioContext) Get_inicio_vect() IInicio_vectContext { return s._inicio_vect }

func (s *Vectores_inicioContext) Get_resumen_vect() IResumen_vectContext { return s._resumen_vect }

func (s *Vectores_inicioContext) Set_inicio_vect(v IInicio_vectContext) { s._inicio_vect = v }

func (s *Vectores_inicioContext) Set_resumen_vect(v IResumen_vectContext) { s._resumen_vect = v }

func (s *Vectores_inicioContext) GetP() interfaces.Expresion { return s.p }

func (s *Vectores_inicioContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Vectores_inicioContext) Inicio_vect() IInicio_vectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInicio_vectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInicio_vectContext)
}

func (s *Vectores_inicioContext) Resumen_vect() IResumen_vectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IResumen_vectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IResumen_vectContext)
}

func (s *Vectores_inicioContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Vectores_inicioContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Vectores_inicioContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterVectores_inicio(s)
	}
}

func (s *Vectores_inicioContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitVectores_inicio(s)
	}
}

func (p *db_rustparser) Vectores_inicio() (localctx IVectores_inicioContext) {
	localctx = NewVectores_inicioContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, db_rustparserRULE_vectores_inicio)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(852)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 33, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(846)

			var _x = p.Inicio_vect()

			localctx.(*Vectores_inicioContext)._inicio_vect = _x
		}
		localctx.(*Vectores_inicioContext).p = localctx.(*Vectores_inicioContext).Get_inicio_vect().GetP()

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(849)

			var _x = p.Resumen_vect()

			localctx.(*Vectores_inicioContext)._resumen_vect = _x
		}
		localctx.(*Vectores_inicioContext).p = localctx.(*Vectores_inicioContext).Get_resumen_vect().GetP()

	}

	return localctx
}

// IInicio_vectContext is an interface to support dynamic dispatch.
type IInicio_vectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_list_expres returns the _list_expres rule contexts.
	Get_list_expres() IList_expresContext

	// Set_list_expres sets the _list_expres rule contexts.
	Set_list_expres(IList_expresContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsInicio_vectContext differentiates from other interfaces.
	IsInicio_vectContext()
}

type Inicio_vectContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	p            interfaces.Expresion
	_list_expres IList_expresContext
}

func NewEmptyInicio_vectContext() *Inicio_vectContext {
	var p = new(Inicio_vectContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_inicio_vect
	return p
}

func (*Inicio_vectContext) IsInicio_vectContext() {}

func NewInicio_vectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Inicio_vectContext {
	var p = new(Inicio_vectContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_inicio_vect

	return p
}

func (s *Inicio_vectContext) GetParser() antlr.Parser { return s.parser }

func (s *Inicio_vectContext) Get_list_expres() IList_expresContext { return s._list_expres }

func (s *Inicio_vectContext) Set_list_expres(v IList_expresContext) { s._list_expres = v }

func (s *Inicio_vectContext) GetP() interfaces.Expresion { return s.p }

func (s *Inicio_vectContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Inicio_vectContext) TK_VECT() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_VECT, 0)
}

func (s *Inicio_vectContext) TK_CI() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_CI, 0)
}

func (s *Inicio_vectContext) List_expres() IList_expresContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_expresContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_expresContext)
}

func (s *Inicio_vectContext) TK_CD() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_CD, 0)
}

func (s *Inicio_vectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Inicio_vectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Inicio_vectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterInicio_vect(s)
	}
}

func (s *Inicio_vectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitInicio_vect(s)
	}
}

func (p *db_rustparser) Inicio_vect() (localctx IInicio_vectContext) {
	localctx = NewInicio_vectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, db_rustparserRULE_inicio_vect)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(854)
		p.Match(db_rustparserTK_VECT)
	}
	{
		p.SetState(855)
		p.Match(db_rustparserTK_CI)
	}
	{
		p.SetState(856)

		var _x = p.list_expres(0)

		localctx.(*Inicio_vectContext)._list_expres = _x
	}
	{
		p.SetState(857)
		p.Match(db_rustparserTK_CD)
	}

	localctx.(*Inicio_vectContext).p = iniciandovect.Nvalor_vector(localctx.(*Inicio_vectContext).Get_list_expres().GetLis_expres())

	return localctx
}

// IResumen_vectContext is an interface to support dynamic dispatch.
type IResumen_vectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetEx1 returns the ex1 rule contexts.
	GetEx1() IExpressionContext

	// GetEx2 returns the ex2 rule contexts.
	GetEx2() IExpressionContext

	// SetEx1 sets the ex1 rule contexts.
	SetEx1(IExpressionContext)

	// SetEx2 sets the ex2 rule contexts.
	SetEx2(IExpressionContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsResumen_vectContext differentiates from other interfaces.
	IsResumen_vectContext()
}

type Resumen_vectContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	p      interfaces.Expresion
	ex1    IExpressionContext
	ex2    IExpressionContext
}

func NewEmptyResumen_vectContext() *Resumen_vectContext {
	var p = new(Resumen_vectContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_resumen_vect
	return p
}

func (*Resumen_vectContext) IsResumen_vectContext() {}

func NewResumen_vectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Resumen_vectContext {
	var p = new(Resumen_vectContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_resumen_vect

	return p
}

func (s *Resumen_vectContext) GetParser() antlr.Parser { return s.parser }

func (s *Resumen_vectContext) GetEx1() IExpressionContext { return s.ex1 }

func (s *Resumen_vectContext) GetEx2() IExpressionContext { return s.ex2 }

func (s *Resumen_vectContext) SetEx1(v IExpressionContext) { s.ex1 = v }

func (s *Resumen_vectContext) SetEx2(v IExpressionContext) { s.ex2 = v }

func (s *Resumen_vectContext) GetP() interfaces.Expresion { return s.p }

func (s *Resumen_vectContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Resumen_vectContext) TK_VECT() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_VECT, 0)
}

func (s *Resumen_vectContext) TK_CI() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_CI, 0)
}

func (s *Resumen_vectContext) TK_PYC() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PYC, 0)
}

func (s *Resumen_vectContext) TK_CD() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_CD, 0)
}

func (s *Resumen_vectContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Resumen_vectContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Resumen_vectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Resumen_vectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Resumen_vectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterResumen_vect(s)
	}
}

func (s *Resumen_vectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitResumen_vect(s)
	}
}

func (p *db_rustparser) Resumen_vect() (localctx IResumen_vectContext) {
	localctx = NewResumen_vectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, db_rustparserRULE_resumen_vect)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(860)
		p.Match(db_rustparserTK_VECT)
	}
	{
		p.SetState(861)
		p.Match(db_rustparserTK_CI)
	}
	{
		p.SetState(862)

		var _x = p.Expression()

		localctx.(*Resumen_vectContext).ex1 = _x
	}
	{
		p.SetState(863)
		p.Match(db_rustparserTK_PYC)
	}
	{
		p.SetState(864)

		var _x = p.Expression()

		localctx.(*Resumen_vectContext).ex2 = _x
	}
	{
		p.SetState(865)
		p.Match(db_rustparserTK_CD)
	}

	localctx.(*Resumen_vectContext).p = iniciandovect.Nvalvect(localctx.(*Resumen_vectContext).GetEx1().GetP(), localctx.(*Resumen_vectContext).GetEx2().GetP())

	return localctx
}

// IArreglos_inicioContext is an interface to support dynamic dispatch.
type IArreglos_inicioContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_inicializando_arreglo returns the _inicializando_arreglo rule contexts.
	Get_inicializando_arreglo() IInicializando_arregloContext

	// Get_resumen_arre returns the _resumen_arre rule contexts.
	Get_resumen_arre() IResumen_arreContext

	// Set_inicializando_arreglo sets the _inicializando_arreglo rule contexts.
	Set_inicializando_arreglo(IInicializando_arregloContext)

	// Set_resumen_arre sets the _resumen_arre rule contexts.
	Set_resumen_arre(IResumen_arreContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsArreglos_inicioContext differentiates from other interfaces.
	IsArreglos_inicioContext()
}

type Arreglos_inicioContext struct {
	*antlr.BaseParserRuleContext
	parser                 antlr.Parser
	p                      interfaces.Expresion
	_inicializando_arreglo IInicializando_arregloContext
	_resumen_arre          IResumen_arreContext
}

func NewEmptyArreglos_inicioContext() *Arreglos_inicioContext {
	var p = new(Arreglos_inicioContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_arreglos_inicio
	return p
}

func (*Arreglos_inicioContext) IsArreglos_inicioContext() {}

func NewArreglos_inicioContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Arreglos_inicioContext {
	var p = new(Arreglos_inicioContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_arreglos_inicio

	return p
}

func (s *Arreglos_inicioContext) GetParser() antlr.Parser { return s.parser }

func (s *Arreglos_inicioContext) Get_inicializando_arreglo() IInicializando_arregloContext {
	return s._inicializando_arreglo
}

func (s *Arreglos_inicioContext) Get_resumen_arre() IResumen_arreContext { return s._resumen_arre }

func (s *Arreglos_inicioContext) Set_inicializando_arreglo(v IInicializando_arregloContext) {
	s._inicializando_arreglo = v
}

func (s *Arreglos_inicioContext) Set_resumen_arre(v IResumen_arreContext) { s._resumen_arre = v }

func (s *Arreglos_inicioContext) GetP() interfaces.Expresion { return s.p }

func (s *Arreglos_inicioContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Arreglos_inicioContext) Inicializando_arreglo() IInicializando_arregloContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInicializando_arregloContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInicializando_arregloContext)
}

func (s *Arreglos_inicioContext) Resumen_arre() IResumen_arreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IResumen_arreContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IResumen_arreContext)
}

func (s *Arreglos_inicioContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Arreglos_inicioContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Arreglos_inicioContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterArreglos_inicio(s)
	}
}

func (s *Arreglos_inicioContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitArreglos_inicio(s)
	}
}

func (p *db_rustparser) Arreglos_inicio() (localctx IArreglos_inicioContext) {
	localctx = NewArreglos_inicioContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, db_rustparserRULE_arreglos_inicio)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(874)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 34, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(868)

			var _x = p.Inicializando_arreglo()

			localctx.(*Arreglos_inicioContext)._inicializando_arreglo = _x
		}
		localctx.(*Arreglos_inicioContext).p = localctx.(*Arreglos_inicioContext).Get_inicializando_arreglo().GetP()

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(871)

			var _x = p.Resumen_arre()

			localctx.(*Arreglos_inicioContext)._resumen_arre = _x
		}
		localctx.(*Arreglos_inicioContext).p = localctx.(*Arreglos_inicioContext).Get_resumen_arre().GetP()

	}

	return localctx
}

// IInicializando_arregloContext is an interface to support dynamic dispatch.
type IInicializando_arregloContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_list_expres returns the _list_expres rule contexts.
	Get_list_expres() IList_expresContext

	// Set_list_expres sets the _list_expres rule contexts.
	Set_list_expres(IList_expresContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsInicializando_arregloContext differentiates from other interfaces.
	IsInicializando_arregloContext()
}

type Inicializando_arregloContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	p            interfaces.Expresion
	_list_expres IList_expresContext
}

func NewEmptyInicializando_arregloContext() *Inicializando_arregloContext {
	var p = new(Inicializando_arregloContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_inicializando_arreglo
	return p
}

func (*Inicializando_arregloContext) IsInicializando_arregloContext() {}

func NewInicializando_arregloContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Inicializando_arregloContext {
	var p = new(Inicializando_arregloContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_inicializando_arreglo

	return p
}

func (s *Inicializando_arregloContext) GetParser() antlr.Parser { return s.parser }

func (s *Inicializando_arregloContext) Get_list_expres() IList_expresContext { return s._list_expres }

func (s *Inicializando_arregloContext) Set_list_expres(v IList_expresContext) { s._list_expres = v }

func (s *Inicializando_arregloContext) GetP() interfaces.Expresion { return s.p }

func (s *Inicializando_arregloContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Inicializando_arregloContext) TK_CI() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_CI, 0)
}

func (s *Inicializando_arregloContext) List_expres() IList_expresContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_expresContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_expresContext)
}

func (s *Inicializando_arregloContext) TK_CD() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_CD, 0)
}

func (s *Inicializando_arregloContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Inicializando_arregloContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Inicializando_arregloContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterInicializando_arreglo(s)
	}
}

func (s *Inicializando_arregloContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitInicializando_arreglo(s)
	}
}

func (p *db_rustparser) Inicializando_arreglo() (localctx IInicializando_arregloContext) {
	localctx = NewInicializando_arregloContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, db_rustparserRULE_inicializando_arreglo)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(876)
		p.Match(db_rustparserTK_CI)
	}
	{
		p.SetState(877)

		var _x = p.list_expres(0)

		localctx.(*Inicializando_arregloContext)._list_expres = _x
	}
	{
		p.SetState(878)
		p.Match(db_rustparserTK_CD)
	}
	localctx.(*Inicializando_arregloContext).p = iniciandoarre.Nvalor_arreglo(localctx.(*Inicializando_arregloContext).Get_list_expres().GetLis_expres())

	return localctx
}

// IResumen_arreContext is an interface to support dynamic dispatch.
type IResumen_arreContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetEx1 returns the ex1 rule contexts.
	GetEx1() IExpressionContext

	// GetEx2 returns the ex2 rule contexts.
	GetEx2() IExpressionContext

	// SetEx1 sets the ex1 rule contexts.
	SetEx1(IExpressionContext)

	// SetEx2 sets the ex2 rule contexts.
	SetEx2(IExpressionContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsResumen_arreContext differentiates from other interfaces.
	IsResumen_arreContext()
}

type Resumen_arreContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	p      interfaces.Expresion
	ex1    IExpressionContext
	ex2    IExpressionContext
}

func NewEmptyResumen_arreContext() *Resumen_arreContext {
	var p = new(Resumen_arreContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_resumen_arre
	return p
}

func (*Resumen_arreContext) IsResumen_arreContext() {}

func NewResumen_arreContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Resumen_arreContext {
	var p = new(Resumen_arreContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_resumen_arre

	return p
}

func (s *Resumen_arreContext) GetParser() antlr.Parser { return s.parser }

func (s *Resumen_arreContext) GetEx1() IExpressionContext { return s.ex1 }

func (s *Resumen_arreContext) GetEx2() IExpressionContext { return s.ex2 }

func (s *Resumen_arreContext) SetEx1(v IExpressionContext) { s.ex1 = v }

func (s *Resumen_arreContext) SetEx2(v IExpressionContext) { s.ex2 = v }

func (s *Resumen_arreContext) GetP() interfaces.Expresion { return s.p }

func (s *Resumen_arreContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Resumen_arreContext) TK_CI() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_CI, 0)
}

func (s *Resumen_arreContext) TK_PYC() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PYC, 0)
}

func (s *Resumen_arreContext) TK_CD() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_CD, 0)
}

func (s *Resumen_arreContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Resumen_arreContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Resumen_arreContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Resumen_arreContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Resumen_arreContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterResumen_arre(s)
	}
}

func (s *Resumen_arreContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitResumen_arre(s)
	}
}

func (p *db_rustparser) Resumen_arre() (localctx IResumen_arreContext) {
	localctx = NewResumen_arreContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, db_rustparserRULE_resumen_arre)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(881)
		p.Match(db_rustparserTK_CI)
	}
	{
		p.SetState(882)

		var _x = p.Expression()

		localctx.(*Resumen_arreContext).ex1 = _x
	}
	{
		p.SetState(883)
		p.Match(db_rustparserTK_PYC)
	}
	{
		p.SetState(884)

		var _x = p.Expression()

		localctx.(*Resumen_arreContext).ex2 = _x
	}
	{
		p.SetState(885)
		p.Match(db_rustparserTK_CD)
	}

	localctx.(*Resumen_arreContext).p = iniciandoarre.Nresumenarre(localctx.(*Resumen_arreContext).GetEx1().GetP(), localctx.(*Resumen_arreContext).GetEx2().GetP())

	return localctx
}

// IAccesso_arregloContext is an interface to support dynamic dispatch.
type IAccesso_arregloContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_TK_IDENTIFICADOR returns the _TK_IDENTIFICADOR token.
	Get_TK_IDENTIFICADOR() antlr.Token

	// Set_TK_IDENTIFICADOR sets the _TK_IDENTIFICADOR token.
	Set_TK_IDENTIFICADOR(antlr.Token)

	// Get_lista_acceso returns the _lista_acceso rule contexts.
	Get_lista_acceso() ILista_accesoContext

	// Set_lista_acceso sets the _lista_acceso rule contexts.
	Set_lista_acceso(ILista_accesoContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsAccesso_arregloContext differentiates from other interfaces.
	IsAccesso_arregloContext()
}

type Accesso_arregloContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	p                 interfaces.Expresion
	_TK_IDENTIFICADOR antlr.Token
	_lista_acceso     ILista_accesoContext
}

func NewEmptyAccesso_arregloContext() *Accesso_arregloContext {
	var p = new(Accesso_arregloContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_accesso_arreglo
	return p
}

func (*Accesso_arregloContext) IsAccesso_arregloContext() {}

func NewAccesso_arregloContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Accesso_arregloContext {
	var p = new(Accesso_arregloContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_accesso_arreglo

	return p
}

func (s *Accesso_arregloContext) GetParser() antlr.Parser { return s.parser }

func (s *Accesso_arregloContext) Get_TK_IDENTIFICADOR() antlr.Token { return s._TK_IDENTIFICADOR }

func (s *Accesso_arregloContext) Set_TK_IDENTIFICADOR(v antlr.Token) { s._TK_IDENTIFICADOR = v }

func (s *Accesso_arregloContext) Get_lista_acceso() ILista_accesoContext { return s._lista_acceso }

func (s *Accesso_arregloContext) Set_lista_acceso(v ILista_accesoContext) { s._lista_acceso = v }

func (s *Accesso_arregloContext) GetP() interfaces.Expresion { return s.p }

func (s *Accesso_arregloContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Accesso_arregloContext) TK_IDENTIFICADOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_IDENTIFICADOR, 0)
}

func (s *Accesso_arregloContext) Lista_acceso() ILista_accesoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILista_accesoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILista_accesoContext)
}

func (s *Accesso_arregloContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Accesso_arregloContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Accesso_arregloContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterAccesso_arreglo(s)
	}
}

func (s *Accesso_arregloContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitAccesso_arreglo(s)
	}
}

func (p *db_rustparser) Accesso_arreglo() (localctx IAccesso_arregloContext) {
	localctx = NewAccesso_arregloContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, db_rustparserRULE_accesso_arreglo)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(888)

		var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

		localctx.(*Accesso_arregloContext)._TK_IDENTIFICADOR = _m
	}
	{
		p.SetState(889)

		var _x = p.lista_acceso(0)

		localctx.(*Accesso_arregloContext)._lista_acceso = _x
	}

	localctx.(*Accesso_arregloContext).p = accesoarre.Naccessarre((func() string {
		if localctx.(*Accesso_arregloContext).Get_TK_IDENTIFICADOR() == nil {
			return ""
		} else {
			return localctx.(*Accesso_arregloContext).Get_TK_IDENTIFICADOR().GetText()
		}
	}()), localctx.(*Accesso_arregloContext).Get_lista_acceso().GetLacceso(), (func() int {
		if localctx.(*Accesso_arregloContext).Get_TK_IDENTIFICADOR() == nil {
			return 0
		} else {
			return localctx.(*Accesso_arregloContext).Get_TK_IDENTIFICADOR().GetLine()
		}
	}()), localctx.(*Accesso_arregloContext).Get_TK_IDENTIFICADOR().GetColumn())

	return localctx
}

// ILista_accesoContext is an interface to support dynamic dispatch.
type ILista_accesoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLacc returns the lacc rule contexts.
	GetLacc() ILista_accesoContext

	// Get_access returns the _access rule contexts.
	Get_access() IAccessContext

	// SetLacc sets the lacc rule contexts.
	SetLacc(ILista_accesoContext)

	// Set_access sets the _access rule contexts.
	Set_access(IAccessContext)

	// GetLacceso returns the lacceso attribute.
	GetLacceso() *arrayList.List

	// SetLacceso sets the lacceso attribute.
	SetLacceso(*arrayList.List)

	// IsLista_accesoContext differentiates from other interfaces.
	IsLista_accesoContext()
}

type Lista_accesoContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	lacceso *arrayList.List
	lacc    ILista_accesoContext
	_access IAccessContext
}

func NewEmptyLista_accesoContext() *Lista_accesoContext {
	var p = new(Lista_accesoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_lista_acceso
	return p
}

func (*Lista_accesoContext) IsLista_accesoContext() {}

func NewLista_accesoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Lista_accesoContext {
	var p = new(Lista_accesoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_lista_acceso

	return p
}

func (s *Lista_accesoContext) GetParser() antlr.Parser { return s.parser }

func (s *Lista_accesoContext) GetLacc() ILista_accesoContext { return s.lacc }

func (s *Lista_accesoContext) Get_access() IAccessContext { return s._access }

func (s *Lista_accesoContext) SetLacc(v ILista_accesoContext) { s.lacc = v }

func (s *Lista_accesoContext) Set_access(v IAccessContext) { s._access = v }

func (s *Lista_accesoContext) GetLacceso() *arrayList.List { return s.lacceso }

func (s *Lista_accesoContext) SetLacceso(v *arrayList.List) { s.lacceso = v }

func (s *Lista_accesoContext) Access() IAccessContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAccessContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAccessContext)
}

func (s *Lista_accesoContext) Lista_acceso() ILista_accesoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILista_accesoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILista_accesoContext)
}

func (s *Lista_accesoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Lista_accesoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Lista_accesoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterLista_acceso(s)
	}
}

func (s *Lista_accesoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitLista_acceso(s)
	}
}

func (p *db_rustparser) Lista_acceso() (localctx ILista_accesoContext) {
	return p.lista_acceso(0)
}

func (p *db_rustparser) lista_acceso(_p int) (localctx ILista_accesoContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewLista_accesoContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ILista_accesoContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 106
	p.EnterRecursionRule(localctx, 106, db_rustparserRULE_lista_acceso, _p)

	localctx.(*Lista_accesoContext).lacceso = arrayList.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(893)

		var _x = p.Access()

		localctx.(*Lista_accesoContext)._access = _x
	}

	localctx.(*Lista_accesoContext).lacceso.Add(localctx.(*Lista_accesoContext).Get_access().GetP())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(902)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLista_accesoContext(p, _parentctx, _parentState)
			localctx.(*Lista_accesoContext).lacc = _prevctx
			p.PushNewRecursionContext(localctx, _startState, db_rustparserRULE_lista_acceso)
			p.SetState(896)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(897)

				var _x = p.Access()

				localctx.(*Lista_accesoContext)._access = _x
			}

			localctx.(*Lista_accesoContext).GetLacc().GetLacceso().Add(localctx.(*Lista_accesoContext).Get_access().GetP())
			localctx.(*Lista_accesoContext).lacceso = localctx.(*Lista_accesoContext).GetLacc().GetLacceso()

		}
		p.SetState(904)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext())
	}

	return localctx
}

// IAccessContext is an interface to support dynamic dispatch.
type IAccessContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsAccessContext differentiates from other interfaces.
	IsAccessContext()
}

type AccessContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	p           interfaces.Expresion
	_expression IExpressionContext
}

func NewEmptyAccessContext() *AccessContext {
	var p = new(AccessContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_access
	return p
}

func (*AccessContext) IsAccessContext() {}

func NewAccessContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AccessContext {
	var p = new(AccessContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_access

	return p
}

func (s *AccessContext) GetParser() antlr.Parser { return s.parser }

func (s *AccessContext) Get_expression() IExpressionContext { return s._expression }

func (s *AccessContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *AccessContext) GetP() interfaces.Expresion { return s.p }

func (s *AccessContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *AccessContext) TK_CI() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_CI, 0)
}

func (s *AccessContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AccessContext) TK_CD() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_CD, 0)
}

func (s *AccessContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AccessContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AccessContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterAccess(s)
	}
}

func (s *AccessContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitAccess(s)
	}
}

func (p *db_rustparser) Access() (localctx IAccessContext) {
	localctx = NewAccessContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, db_rustparserRULE_access)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(905)
		p.Match(db_rustparserTK_CI)
	}
	{
		p.SetState(906)

		var _x = p.Expression()

		localctx.(*AccessContext)._expression = _x
	}
	{
		p.SetState(907)
		p.Match(db_rustparserTK_CD)
	}
	localctx.(*AccessContext).p = localctx.(*AccessContext).Get_expression().GetP()

	return localctx
}

// IAcceso_vectorContext is an interface to support dynamic dispatch.
type IAcceso_vectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_TK_IDENTIFICADOR returns the _TK_IDENTIFICADOR token.
	Get_TK_IDENTIFICADOR() antlr.Token

	// Set_TK_IDENTIFICADOR sets the _TK_IDENTIFICADOR token.
	Set_TK_IDENTIFICADOR(antlr.Token)

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsAcceso_vectorContext differentiates from other interfaces.
	IsAcceso_vectorContext()
}

type Acceso_vectorContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	p                 interfaces.Expresion
	_TK_IDENTIFICADOR antlr.Token
	_expression       IExpressionContext
}

func NewEmptyAcceso_vectorContext() *Acceso_vectorContext {
	var p = new(Acceso_vectorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_acceso_vector
	return p
}

func (*Acceso_vectorContext) IsAcceso_vectorContext() {}

func NewAcceso_vectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Acceso_vectorContext {
	var p = new(Acceso_vectorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_acceso_vector

	return p
}

func (s *Acceso_vectorContext) GetParser() antlr.Parser { return s.parser }

func (s *Acceso_vectorContext) Get_TK_IDENTIFICADOR() antlr.Token { return s._TK_IDENTIFICADOR }

func (s *Acceso_vectorContext) Set_TK_IDENTIFICADOR(v antlr.Token) { s._TK_IDENTIFICADOR = v }

func (s *Acceso_vectorContext) Get_expression() IExpressionContext { return s._expression }

func (s *Acceso_vectorContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *Acceso_vectorContext) GetP() interfaces.Expresion { return s.p }

func (s *Acceso_vectorContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Acceso_vectorContext) TK_IDENTIFICADOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_IDENTIFICADOR, 0)
}

func (s *Acceso_vectorContext) TK_MENOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_MENOR, 0)
}

func (s *Acceso_vectorContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Acceso_vectorContext) TK_MAYOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_MAYOR, 0)
}

func (s *Acceso_vectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Acceso_vectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Acceso_vectorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterAcceso_vector(s)
	}
}

func (s *Acceso_vectorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitAcceso_vector(s)
	}
}

func (p *db_rustparser) Acceso_vector() (localctx IAcceso_vectorContext) {
	localctx = NewAcceso_vectorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, db_rustparserRULE_acceso_vector)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(910)

		var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

		localctx.(*Acceso_vectorContext)._TK_IDENTIFICADOR = _m
	}
	{
		p.SetState(911)
		p.Match(db_rustparserTK_MENOR)
	}
	{
		p.SetState(912)

		var _x = p.Expression()

		localctx.(*Acceso_vectorContext)._expression = _x
	}
	{
		p.SetState(913)
		p.Match(db_rustparserTK_MAYOR)
	}

	localctx.(*Acceso_vectorContext).p = accesovect.Naccessvect((func() string {
		if localctx.(*Acceso_vectorContext).Get_TK_IDENTIFICADOR() == nil {
			return ""
		} else {
			return localctx.(*Acceso_vectorContext).Get_TK_IDENTIFICADOR().GetText()
		}
	}()), localctx.(*Acceso_vectorContext).Get_expression().GetP(), (func() int {
		if localctx.(*Acceso_vectorContext).Get_TK_IDENTIFICADOR() == nil {
			return 0
		} else {
			return localctx.(*Acceso_vectorContext).Get_TK_IDENTIFICADOR().GetLine()
		}
	}()), localctx.(*Acceso_vectorContext).Get_TK_IDENTIFICADOR().GetColumn())

	return localctx
}

// IIngreso_structContext is an interface to support dynamic dispatch.
type IIngreso_structContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_TK_IDENTIFICADOR returns the _TK_IDENTIFICADOR token.
	Get_TK_IDENTIFICADOR() antlr.Token

	// GetNoms returns the noms token.
	GetNoms() antlr.Token

	// Set_TK_IDENTIFICADOR sets the _TK_IDENTIFICADOR token.
	Set_TK_IDENTIFICADOR(antlr.Token)

	// SetNoms sets the noms token.
	SetNoms(antlr.Token)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsIngreso_structContext differentiates from other interfaces.
	IsIngreso_structContext()
}

type Ingreso_structContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	p                 interfaces.Expresion
	_TK_IDENTIFICADOR antlr.Token
	noms              antlr.Token
}

func NewEmptyIngreso_structContext() *Ingreso_structContext {
	var p = new(Ingreso_structContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_ingreso_struct
	return p
}

func (*Ingreso_structContext) IsIngreso_structContext() {}

func NewIngreso_structContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ingreso_structContext {
	var p = new(Ingreso_structContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_ingreso_struct

	return p
}

func (s *Ingreso_structContext) GetParser() antlr.Parser { return s.parser }

func (s *Ingreso_structContext) Get_TK_IDENTIFICADOR() antlr.Token { return s._TK_IDENTIFICADOR }

func (s *Ingreso_structContext) GetNoms() antlr.Token { return s.noms }

func (s *Ingreso_structContext) Set_TK_IDENTIFICADOR(v antlr.Token) { s._TK_IDENTIFICADOR = v }

func (s *Ingreso_structContext) SetNoms(v antlr.Token) { s.noms = v }

func (s *Ingreso_structContext) GetP() interfaces.Expresion { return s.p }

func (s *Ingreso_structContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Ingreso_structContext) AllTK_IDENTIFICADOR() []antlr.TerminalNode {
	return s.GetTokens(db_rustparserTK_IDENTIFICADOR)
}

func (s *Ingreso_structContext) TK_IDENTIFICADOR(i int) antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_IDENTIFICADOR, i)
}

func (s *Ingreso_structContext) TK_PUNTO() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PUNTO, 0)
}

func (s *Ingreso_structContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ingreso_structContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ingreso_structContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterIngreso_struct(s)
	}
}

func (s *Ingreso_structContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitIngreso_struct(s)
	}
}

func (p *db_rustparser) Ingreso_struct() (localctx IIngreso_structContext) {
	localctx = NewIngreso_structContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, db_rustparserRULE_ingreso_struct)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(916)

		var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

		localctx.(*Ingreso_structContext)._TK_IDENTIFICADOR = _m
	}
	{
		p.SetState(917)
		p.Match(db_rustparserTK_PUNTO)
	}
	{
		p.SetState(918)

		var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

		localctx.(*Ingreso_structContext).noms = _m
	}

	localctx.(*Ingreso_structContext).p = accesostruct.NaccesoStruct((func() string {
		if localctx.(*Ingreso_structContext).Get_TK_IDENTIFICADOR() == nil {
			return ""
		} else {
			return localctx.(*Ingreso_structContext).Get_TK_IDENTIFICADOR().GetText()
		}
	}()), (func() string {
		if localctx.(*Ingreso_structContext).GetNoms() == nil {
			return ""
		} else {
			return localctx.(*Ingreso_structContext).GetNoms().GetText()
		}
	}()), (func() int {
		if localctx.(*Ingreso_structContext).Get_TK_IDENTIFICADOR() == nil {
			return 0
		} else {
			return localctx.(*Ingreso_structContext).Get_TK_IDENTIFICADOR().GetLine()
		}
	}()), localctx.(*Ingreso_structContext).Get_TK_IDENTIFICADOR().GetColumn())

	return localctx
}

// INativas_vectorContext is an interface to support dynamic dispatch.
type INativas_vectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_TK_IDENTIFICADOR returns the _TK_IDENTIFICADOR token.
	Get_TK_IDENTIFICADOR() antlr.Token

	// Set_TK_IDENTIFICADOR sets the _TK_IDENTIFICADOR token.
	Set_TK_IDENTIFICADOR(antlr.Token)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsNativas_vectorContext differentiates from other interfaces.
	IsNativas_vectorContext()
}

type Nativas_vectorContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	p                 interfaces.Expresion
	_TK_IDENTIFICADOR antlr.Token
}

func NewEmptyNativas_vectorContext() *Nativas_vectorContext {
	var p = new(Nativas_vectorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_nativas_vector
	return p
}

func (*Nativas_vectorContext) IsNativas_vectorContext() {}

func NewNativas_vectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Nativas_vectorContext {
	var p = new(Nativas_vectorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_nativas_vector

	return p
}

func (s *Nativas_vectorContext) GetParser() antlr.Parser { return s.parser }

func (s *Nativas_vectorContext) Get_TK_IDENTIFICADOR() antlr.Token { return s._TK_IDENTIFICADOR }

func (s *Nativas_vectorContext) Set_TK_IDENTIFICADOR(v antlr.Token) { s._TK_IDENTIFICADOR = v }

func (s *Nativas_vectorContext) GetP() interfaces.Expresion { return s.p }

func (s *Nativas_vectorContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Nativas_vectorContext) TK_IDENTIFICADOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_IDENTIFICADOR, 0)
}

func (s *Nativas_vectorContext) TK_PUNTO() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PUNTO, 0)
}

func (s *Nativas_vectorContext) TK_LEN() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_LEN, 0)
}

func (s *Nativas_vectorContext) TK_CAPACITY() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_CAPACITY, 0)
}

func (s *Nativas_vectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Nativas_vectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Nativas_vectorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterNativas_vector(s)
	}
}

func (s *Nativas_vectorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitNativas_vector(s)
	}
}

func (p *db_rustparser) Nativas_vector() (localctx INativas_vectorContext) {
	localctx = NewNativas_vectorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, db_rustparserRULE_nativas_vector)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(929)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(921)

			var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

			localctx.(*Nativas_vectorContext)._TK_IDENTIFICADOR = _m
		}
		{
			p.SetState(922)
			p.Match(db_rustparserTK_PUNTO)
		}
		{
			p.SetState(923)
			p.Match(db_rustparserTK_LEN)
		}

		localctx.(*Nativas_vectorContext).p = nativasvect.Nlenvect((func() string {
			if localctx.(*Nativas_vectorContext).Get_TK_IDENTIFICADOR() == nil {
				return ""
			} else {
				return localctx.(*Nativas_vectorContext).Get_TK_IDENTIFICADOR().GetText()
			}
		}()), (func() int {
			if localctx.(*Nativas_vectorContext).Get_TK_IDENTIFICADOR() == nil {
				return 0
			} else {
				return localctx.(*Nativas_vectorContext).Get_TK_IDENTIFICADOR().GetLine()
			}
		}()), localctx.(*Nativas_vectorContext).Get_TK_IDENTIFICADOR().GetColumn())

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(925)

			var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

			localctx.(*Nativas_vectorContext)._TK_IDENTIFICADOR = _m
		}
		{
			p.SetState(926)
			p.Match(db_rustparserTK_PUNTO)
		}
		{
			p.SetState(927)
			p.Match(db_rustparserTK_CAPACITY)
		}

		localctx.(*Nativas_vectorContext).p = nativasvect.Ncapvect((func() string {
			if localctx.(*Nativas_vectorContext).Get_TK_IDENTIFICADOR() == nil {
				return ""
			} else {
				return localctx.(*Nativas_vectorContext).Get_TK_IDENTIFICADOR().GetText()
			}
		}()), (func() int {
			if localctx.(*Nativas_vectorContext).Get_TK_IDENTIFICADOR() == nil {
				return 0
			} else {
				return localctx.(*Nativas_vectorContext).Get_TK_IDENTIFICADOR().GetLine()
			}
		}()), localctx.(*Nativas_vectorContext).Get_TK_IDENTIFICADOR().GetColumn())

	}

	return localctx
}

// IFun_nativasContext is an interface to support dynamic dispatch.
type IFun_nativasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_TK_PUNTO returns the _TK_PUNTO token.
	Get_TK_PUNTO() antlr.Token

	// Set_TK_PUNTO sets the _TK_PUNTO token.
	Set_TK_PUNTO(antlr.Token)

	// GetVal returns the val rule contexts.
	GetVal() IFun_nativasContext

	// Get_expre_logica returns the _expre_logica rule contexts.
	Get_expre_logica() IExpre_logicaContext

	// SetVal sets the val rule contexts.
	SetVal(IFun_nativasContext)

	// Set_expre_logica sets the _expre_logica rule contexts.
	Set_expre_logica(IExpre_logicaContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsFun_nativasContext differentiates from other interfaces.
	IsFun_nativasContext()
}

type Fun_nativasContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	p             interfaces.Expresion
	val           IFun_nativasContext
	_expre_logica IExpre_logicaContext
	_TK_PUNTO     antlr.Token
}

func NewEmptyFun_nativasContext() *Fun_nativasContext {
	var p = new(Fun_nativasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_fun_nativas
	return p
}

func (*Fun_nativasContext) IsFun_nativasContext() {}

func NewFun_nativasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Fun_nativasContext {
	var p = new(Fun_nativasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_fun_nativas

	return p
}

func (s *Fun_nativasContext) GetParser() antlr.Parser { return s.parser }

func (s *Fun_nativasContext) Get_TK_PUNTO() antlr.Token { return s._TK_PUNTO }

func (s *Fun_nativasContext) Set_TK_PUNTO(v antlr.Token) { s._TK_PUNTO = v }

func (s *Fun_nativasContext) GetVal() IFun_nativasContext { return s.val }

func (s *Fun_nativasContext) Get_expre_logica() IExpre_logicaContext { return s._expre_logica }

func (s *Fun_nativasContext) SetVal(v IFun_nativasContext) { s.val = v }

func (s *Fun_nativasContext) Set_expre_logica(v IExpre_logicaContext) { s._expre_logica = v }

func (s *Fun_nativasContext) GetP() interfaces.Expresion { return s.p }

func (s *Fun_nativasContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Fun_nativasContext) Expre_logica() IExpre_logicaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpre_logicaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpre_logicaContext)
}

func (s *Fun_nativasContext) TK_PUNTO() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PUNTO, 0)
}

func (s *Fun_nativasContext) TK_ABS() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_ABS, 0)
}

func (s *Fun_nativasContext) Fun_nativas() IFun_nativasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFun_nativasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFun_nativasContext)
}

func (s *Fun_nativasContext) TK_SQRT() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_SQRT, 0)
}

func (s *Fun_nativasContext) TK_TOSTRING() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_TOSTRING, 0)
}

func (s *Fun_nativasContext) TK_TOOWNED() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_TOOWNED, 0)
}

func (s *Fun_nativasContext) TK_CLONE() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_CLONE, 0)
}

func (s *Fun_nativasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Fun_nativasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Fun_nativasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterFun_nativas(s)
	}
}

func (s *Fun_nativasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitFun_nativas(s)
	}
}

func (p *db_rustparser) Fun_nativas() (localctx IFun_nativasContext) {
	return p.fun_nativas(0)
}

func (p *db_rustparser) fun_nativas(_p int) (localctx IFun_nativasContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewFun_nativasContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IFun_nativasContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 116
	p.EnterRecursionRule(localctx, 116, db_rustparserRULE_fun_nativas, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(932)

		var _x = p.expre_logica(0)

		localctx.(*Fun_nativasContext)._expre_logica = _x
	}
	localctx.(*Fun_nativasContext).p = localctx.(*Fun_nativasContext).Get_expre_logica().GetP()

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(957)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(955)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext()) {
			case 1:
				localctx = NewFun_nativasContext(p, _parentctx, _parentState)
				localctx.(*Fun_nativasContext).val = _prevctx
				p.PushNewRecursionContext(localctx, _startState, db_rustparserRULE_fun_nativas)
				p.SetState(935)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(936)

					var _m = p.Match(db_rustparserTK_PUNTO)

					localctx.(*Fun_nativasContext)._TK_PUNTO = _m
				}
				{
					p.SetState(937)
					p.Match(db_rustparserTK_ABS)
				}

				localctx.(*Fun_nativasContext).p = nativas.Nabsoluto(localctx.(*Fun_nativasContext).GetVal().GetP(), (func() int {
					if localctx.(*Fun_nativasContext).Get_TK_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*Fun_nativasContext).Get_TK_PUNTO().GetLine()
					}
				}()), localctx.(*Fun_nativasContext).Get_TK_PUNTO().GetColumn())

			case 2:
				localctx = NewFun_nativasContext(p, _parentctx, _parentState)
				localctx.(*Fun_nativasContext).val = _prevctx
				p.PushNewRecursionContext(localctx, _startState, db_rustparserRULE_fun_nativas)
				p.SetState(939)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(940)

					var _m = p.Match(db_rustparserTK_PUNTO)

					localctx.(*Fun_nativasContext)._TK_PUNTO = _m
				}
				{
					p.SetState(941)
					p.Match(db_rustparserTK_SQRT)
				}

				localctx.(*Fun_nativasContext).p = nativas.Nraiz(localctx.(*Fun_nativasContext).GetVal().GetP(), (func() int {
					if localctx.(*Fun_nativasContext).Get_TK_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*Fun_nativasContext).Get_TK_PUNTO().GetLine()
					}
				}()), localctx.(*Fun_nativasContext).Get_TK_PUNTO().GetColumn())

			case 3:
				localctx = NewFun_nativasContext(p, _parentctx, _parentState)
				localctx.(*Fun_nativasContext).val = _prevctx
				p.PushNewRecursionContext(localctx, _startState, db_rustparserRULE_fun_nativas)
				p.SetState(943)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(944)

					var _m = p.Match(db_rustparserTK_PUNTO)

					localctx.(*Fun_nativasContext)._TK_PUNTO = _m
				}
				{
					p.SetState(945)
					p.Match(db_rustparserTK_TOSTRING)
				}

				localctx.(*Fun_nativasContext).p = nativas.Ntostring(localctx.(*Fun_nativasContext).GetVal().GetP(), (func() int {
					if localctx.(*Fun_nativasContext).Get_TK_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*Fun_nativasContext).Get_TK_PUNTO().GetLine()
					}
				}()), localctx.(*Fun_nativasContext).Get_TK_PUNTO().GetColumn())

			case 4:
				localctx = NewFun_nativasContext(p, _parentctx, _parentState)
				localctx.(*Fun_nativasContext).val = _prevctx
				p.PushNewRecursionContext(localctx, _startState, db_rustparserRULE_fun_nativas)
				p.SetState(947)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(948)

					var _m = p.Match(db_rustparserTK_PUNTO)

					localctx.(*Fun_nativasContext)._TK_PUNTO = _m
				}
				{
					p.SetState(949)
					p.Match(db_rustparserTK_TOOWNED)
				}

				localctx.(*Fun_nativasContext).p = nativas.Ntoowned(localctx.(*Fun_nativasContext).GetVal().GetP(), (func() int {
					if localctx.(*Fun_nativasContext).Get_TK_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*Fun_nativasContext).Get_TK_PUNTO().GetLine()
					}
				}()), localctx.(*Fun_nativasContext).Get_TK_PUNTO().GetColumn())

			case 5:
				localctx = NewFun_nativasContext(p, _parentctx, _parentState)
				localctx.(*Fun_nativasContext).val = _prevctx
				p.PushNewRecursionContext(localctx, _startState, db_rustparserRULE_fun_nativas)
				p.SetState(951)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(952)

					var _m = p.Match(db_rustparserTK_PUNTO)

					localctx.(*Fun_nativasContext)._TK_PUNTO = _m
				}
				{
					p.SetState(953)
					p.Match(db_rustparserTK_CLONE)
				}

				localctx.(*Fun_nativasContext).p = nativas.Nclone(localctx.(*Fun_nativasContext).GetVal().GetP(), (func() int {
					if localctx.(*Fun_nativasContext).Get_TK_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*Fun_nativasContext).Get_TK_PUNTO().GetLine()
					}
				}()), localctx.(*Fun_nativasContext).Get_TK_PUNTO().GetColumn())

			}

		}
		p.SetState(959)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext())
	}

	return localctx
}

// IExpre_logicaContext is an interface to support dynamic dispatch.
type IExpre_logicaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// GetOpIz returns the opIz rule contexts.
	GetOpIz() IExpre_logicaContext

	// GetOpI returns the opI rule contexts.
	GetOpI() IExpressionContext

	// Get_expre_relacional returns the _expre_relacional rule contexts.
	Get_expre_relacional() IExpre_relacionalContext

	// GetOpDe returns the opDe rule contexts.
	GetOpDe() IExpre_logicaContext

	// SetOpIz sets the opIz rule contexts.
	SetOpIz(IExpre_logicaContext)

	// SetOpI sets the opI rule contexts.
	SetOpI(IExpressionContext)

	// Set_expre_relacional sets the _expre_relacional rule contexts.
	Set_expre_relacional(IExpre_relacionalContext)

	// SetOpDe sets the opDe rule contexts.
	SetOpDe(IExpre_logicaContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsExpre_logicaContext differentiates from other interfaces.
	IsExpre_logicaContext()
}

type Expre_logicaContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	p                 interfaces.Expresion
	opIz              IExpre_logicaContext
	op                antlr.Token
	opI               IExpressionContext
	_expre_relacional IExpre_relacionalContext
	opDe              IExpre_logicaContext
}

func NewEmptyExpre_logicaContext() *Expre_logicaContext {
	var p = new(Expre_logicaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_expre_logica
	return p
}

func (*Expre_logicaContext) IsExpre_logicaContext() {}

func NewExpre_logicaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expre_logicaContext {
	var p = new(Expre_logicaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_expre_logica

	return p
}

func (s *Expre_logicaContext) GetParser() antlr.Parser { return s.parser }

func (s *Expre_logicaContext) GetOp() antlr.Token { return s.op }

func (s *Expre_logicaContext) SetOp(v antlr.Token) { s.op = v }

func (s *Expre_logicaContext) GetOpIz() IExpre_logicaContext { return s.opIz }

func (s *Expre_logicaContext) GetOpI() IExpressionContext { return s.opI }

func (s *Expre_logicaContext) Get_expre_relacional() IExpre_relacionalContext {
	return s._expre_relacional
}

func (s *Expre_logicaContext) GetOpDe() IExpre_logicaContext { return s.opDe }

func (s *Expre_logicaContext) SetOpIz(v IExpre_logicaContext) { s.opIz = v }

func (s *Expre_logicaContext) SetOpI(v IExpressionContext) { s.opI = v }

func (s *Expre_logicaContext) Set_expre_relacional(v IExpre_relacionalContext) {
	s._expre_relacional = v
}

func (s *Expre_logicaContext) SetOpDe(v IExpre_logicaContext) { s.opDe = v }

func (s *Expre_logicaContext) GetP() interfaces.Expresion { return s.p }

func (s *Expre_logicaContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Expre_logicaContext) TK_NOT() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_NOT, 0)
}

func (s *Expre_logicaContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Expre_logicaContext) Expre_relacional() IExpre_relacionalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpre_relacionalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpre_relacionalContext)
}

func (s *Expre_logicaContext) AllExpre_logica() []IExpre_logicaContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpre_logicaContext)(nil)).Elem())
	var tst = make([]IExpre_logicaContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpre_logicaContext)
		}
	}

	return tst
}

func (s *Expre_logicaContext) Expre_logica(i int) IExpre_logicaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpre_logicaContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpre_logicaContext)
}

func (s *Expre_logicaContext) TK_AND() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_AND, 0)
}

func (s *Expre_logicaContext) TK_OR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_OR, 0)
}

func (s *Expre_logicaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expre_logicaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expre_logicaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterExpre_logica(s)
	}
}

func (s *Expre_logicaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitExpre_logica(s)
	}
}

func (p *db_rustparser) Expre_logica() (localctx IExpre_logicaContext) {
	return p.expre_logica(0)
}

func (p *db_rustparser) expre_logica(_p int) (localctx IExpre_logicaContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpre_logicaContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpre_logicaContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 118
	p.EnterRecursionRule(localctx, 118, db_rustparserRULE_expre_logica, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(968)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case db_rustparserTK_NOT:
		{
			p.SetState(961)

			var _m = p.Match(db_rustparserTK_NOT)

			localctx.(*Expre_logicaContext).op = _m
		}
		{
			p.SetState(962)

			var _x = p.Expression()

			localctx.(*Expre_logicaContext).opI = _x
		}

		localctx.(*Expre_logicaContext).p = logica.Nopnot(localctx.(*Expre_logicaContext).GetOpI().GetP(), (func() int {
			if localctx.(*Expre_logicaContext).GetOp() == nil {
				return 0
			} else {
				return localctx.(*Expre_logicaContext).GetOp().GetLine()
			}
		}()), localctx.(*Expre_logicaContext).op.GetColumn())

	case db_rustparserTK_TIPOINT, db_rustparserTK_TIPOFLOAT, db_rustparserTK_TRUE, db_rustparserTK_FALSE, db_rustparserTK_FLOAT, db_rustparserTK_ENTERO, db_rustparserTK_CADENA, db_rustparserTK_CARACTER, db_rustparserTK_IDENTIFICADOR, db_rustparserTK_RESTA:
		{
			p.SetState(965)

			var _x = p.expre_relacional(0)

			localctx.(*Expre_logicaContext)._expre_relacional = _x
		}
		localctx.(*Expre_logicaContext).p = localctx.(*Expre_logicaContext).Get_expre_relacional().GetP()

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(977)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 40, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewExpre_logicaContext(p, _parentctx, _parentState)
			localctx.(*Expre_logicaContext).opIz = _prevctx
			p.PushNewRecursionContext(localctx, _startState, db_rustparserRULE_expre_logica)
			p.SetState(970)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(971)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*Expre_logicaContext).op = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == db_rustparserTK_OR || _la == db_rustparserTK_AND) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*Expre_logicaContext).op = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(972)

				var _x = p.expre_logica(3)

				localctx.(*Expre_logicaContext).opDe = _x
			}

			if (func() string {
				if localctx.(*Expre_logicaContext).GetOp() == nil {
					return ""
				} else {
					return localctx.(*Expre_logicaContext).GetOp().GetText()
				}
			}()) == "&&" {
				localctx.(*Expre_logicaContext).p = logica.Nopand(localctx.(*Expre_logicaContext).GetOpIz().GetP(), localctx.(*Expre_logicaContext).GetOpDe().GetP(), (func() int {
					if localctx.(*Expre_logicaContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*Expre_logicaContext).GetOp().GetLine()
					}
				}()), localctx.(*Expre_logicaContext).op.GetColumn())
			} else if (func() string {
				if localctx.(*Expre_logicaContext).GetOp() == nil {
					return ""
				} else {
					return localctx.(*Expre_logicaContext).GetOp().GetText()
				}
			}()) == "||" {
				localctx.(*Expre_logicaContext).p = logica.Noor(localctx.(*Expre_logicaContext).GetOpIz().GetP(), localctx.(*Expre_logicaContext).GetOpDe().GetP(), (func() int {
					if localctx.(*Expre_logicaContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*Expre_logicaContext).GetOp().GetLine()
					}
				}()), localctx.(*Expre_logicaContext).op.GetColumn())
			}

		}
		p.SetState(979)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 40, p.GetParserRuleContext())
	}

	return localctx
}

// IExpre_relacionalContext is an interface to support dynamic dispatch.
type IExpre_relacionalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// GetOpIz returns the opIz rule contexts.
	GetOpIz() IExpre_relacionalContext

	// Get_expre_aritmetica returns the _expre_aritmetica rule contexts.
	Get_expre_aritmetica() IExpre_aritmeticaContext

	// GetOpDe returns the opDe rule contexts.
	GetOpDe() IExpre_relacionalContext

	// SetOpIz sets the opIz rule contexts.
	SetOpIz(IExpre_relacionalContext)

	// Set_expre_aritmetica sets the _expre_aritmetica rule contexts.
	Set_expre_aritmetica(IExpre_aritmeticaContext)

	// SetOpDe sets the opDe rule contexts.
	SetOpDe(IExpre_relacionalContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsExpre_relacionalContext differentiates from other interfaces.
	IsExpre_relacionalContext()
}

type Expre_relacionalContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	p                 interfaces.Expresion
	opIz              IExpre_relacionalContext
	_expre_aritmetica IExpre_aritmeticaContext
	op                antlr.Token
	opDe              IExpre_relacionalContext
}

func NewEmptyExpre_relacionalContext() *Expre_relacionalContext {
	var p = new(Expre_relacionalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_expre_relacional
	return p
}

func (*Expre_relacionalContext) IsExpre_relacionalContext() {}

func NewExpre_relacionalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expre_relacionalContext {
	var p = new(Expre_relacionalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_expre_relacional

	return p
}

func (s *Expre_relacionalContext) GetParser() antlr.Parser { return s.parser }

func (s *Expre_relacionalContext) GetOp() antlr.Token { return s.op }

func (s *Expre_relacionalContext) SetOp(v antlr.Token) { s.op = v }

func (s *Expre_relacionalContext) GetOpIz() IExpre_relacionalContext { return s.opIz }

func (s *Expre_relacionalContext) Get_expre_aritmetica() IExpre_aritmeticaContext {
	return s._expre_aritmetica
}

func (s *Expre_relacionalContext) GetOpDe() IExpre_relacionalContext { return s.opDe }

func (s *Expre_relacionalContext) SetOpIz(v IExpre_relacionalContext) { s.opIz = v }

func (s *Expre_relacionalContext) Set_expre_aritmetica(v IExpre_aritmeticaContext) {
	s._expre_aritmetica = v
}

func (s *Expre_relacionalContext) SetOpDe(v IExpre_relacionalContext) { s.opDe = v }

func (s *Expre_relacionalContext) GetP() interfaces.Expresion { return s.p }

func (s *Expre_relacionalContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Expre_relacionalContext) Expre_aritmetica() IExpre_aritmeticaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpre_aritmeticaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpre_aritmeticaContext)
}

func (s *Expre_relacionalContext) AllExpre_relacional() []IExpre_relacionalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpre_relacionalContext)(nil)).Elem())
	var tst = make([]IExpre_relacionalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpre_relacionalContext)
		}
	}

	return tst
}

func (s *Expre_relacionalContext) Expre_relacional(i int) IExpre_relacionalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpre_relacionalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpre_relacionalContext)
}

func (s *Expre_relacionalContext) TK_MAYORIGUAL() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_MAYORIGUAL, 0)
}

func (s *Expre_relacionalContext) TK_MENORIGUAL() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_MENORIGUAL, 0)
}

func (s *Expre_relacionalContext) TK_IGUALDAD() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_IGUALDAD, 0)
}

func (s *Expre_relacionalContext) TK_DESIGUALDAD() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_DESIGUALDAD, 0)
}

func (s *Expre_relacionalContext) TK_MAYOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_MAYOR, 0)
}

func (s *Expre_relacionalContext) TK_MENOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_MENOR, 0)
}

func (s *Expre_relacionalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expre_relacionalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expre_relacionalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterExpre_relacional(s)
	}
}

func (s *Expre_relacionalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitExpre_relacional(s)
	}
}

func (p *db_rustparser) Expre_relacional() (localctx IExpre_relacionalContext) {
	return p.expre_relacional(0)
}

func (p *db_rustparser) expre_relacional(_p int) (localctx IExpre_relacionalContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpre_relacionalContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpre_relacionalContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 120
	p.EnterRecursionRule(localctx, 120, db_rustparserRULE_expre_relacional, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(981)

		var _x = p.expre_aritmetica(0)

		localctx.(*Expre_relacionalContext)._expre_aritmetica = _x
	}
	localctx.(*Expre_relacionalContext).p = localctx.(*Expre_relacionalContext).Get_expre_aritmetica().GetP()

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(991)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 41, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewExpre_relacionalContext(p, _parentctx, _parentState)
			localctx.(*Expre_relacionalContext).opIz = _prevctx
			p.PushNewRecursionContext(localctx, _startState, db_rustparserRULE_expre_relacional)
			p.SetState(984)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(985)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*Expre_relacionalContext).op = _lt

				_la = p.GetTokenStream().LA(1)

				if !(((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(db_rustparserTK_MENORIGUAL-56))|(1<<(db_rustparserTK_MAYORIGUAL-56))|(1<<(db_rustparserTK_IGUALDAD-56))|(1<<(db_rustparserTK_DESIGUALDAD-56))|(1<<(db_rustparserTK_MENOR-56))|(1<<(db_rustparserTK_MAYOR-56)))) != 0) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*Expre_relacionalContext).op = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(986)

				var _x = p.expre_relacional(3)

				localctx.(*Expre_relacionalContext).opDe = _x
			}

			if (func() string {
				if localctx.(*Expre_relacionalContext).GetOp() == nil {
					return ""
				} else {
					return localctx.(*Expre_relacionalContext).GetOp().GetText()
				}
			}()) == "<" {
				localctx.(*Expre_relacionalContext).p = relacional.Nopmenor(localctx.(*Expre_relacionalContext).GetOpIz().GetP(), localctx.(*Expre_relacionalContext).GetOpDe().GetP(), (func() int {
					if localctx.(*Expre_relacionalContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*Expre_relacionalContext).GetOp().GetLine()
					}
				}()), localctx.(*Expre_relacionalContext).op.GetColumn())
			} else if (func() string {
				if localctx.(*Expre_relacionalContext).GetOp() == nil {
					return ""
				} else {
					return localctx.(*Expre_relacionalContext).GetOp().GetText()
				}
			}()) == "<=" {
				localctx.(*Expre_relacionalContext).p = relacional.Nopmenorigual(localctx.(*Expre_relacionalContext).GetOpIz().GetP(), localctx.(*Expre_relacionalContext).GetOpDe().GetP(), (func() int {
					if localctx.(*Expre_relacionalContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*Expre_relacionalContext).GetOp().GetLine()
					}
				}()), localctx.(*Expre_relacionalContext).op.GetColumn())
			} else if (func() string {
				if localctx.(*Expre_relacionalContext).GetOp() == nil {
					return ""
				} else {
					return localctx.(*Expre_relacionalContext).GetOp().GetText()
				}
			}()) == ">" {
				localctx.(*Expre_relacionalContext).p = relacional.Nopmayor(localctx.(*Expre_relacionalContext).GetOpIz().GetP(), localctx.(*Expre_relacionalContext).GetOpDe().GetP(), (func() int {
					if localctx.(*Expre_relacionalContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*Expre_relacionalContext).GetOp().GetLine()
					}
				}()), localctx.(*Expre_relacionalContext).op.GetColumn())
			} else if (func() string {
				if localctx.(*Expre_relacionalContext).GetOp() == nil {
					return ""
				} else {
					return localctx.(*Expre_relacionalContext).GetOp().GetText()
				}
			}()) == ">=" {
				localctx.(*Expre_relacionalContext).p = relacional.Nopmayorigaul(localctx.(*Expre_relacionalContext).GetOpIz().GetP(), localctx.(*Expre_relacionalContext).GetOpDe().GetP(), (func() int {
					if localctx.(*Expre_relacionalContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*Expre_relacionalContext).GetOp().GetLine()
					}
				}()), localctx.(*Expre_relacionalContext).op.GetColumn())
			} else if (func() string {
				if localctx.(*Expre_relacionalContext).GetOp() == nil {
					return ""
				} else {
					return localctx.(*Expre_relacionalContext).GetOp().GetText()
				}
			}()) == "==" {
				localctx.(*Expre_relacionalContext).p = relacional.Nopigualdad(localctx.(*Expre_relacionalContext).GetOpIz().GetP(), localctx.(*Expre_relacionalContext).GetOpDe().GetP(), (func() int {
					if localctx.(*Expre_relacionalContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*Expre_relacionalContext).GetOp().GetLine()
					}
				}()), localctx.(*Expre_relacionalContext).op.GetColumn())
			} else if (func() string {
				if localctx.(*Expre_relacionalContext).GetOp() == nil {
					return ""
				} else {
					return localctx.(*Expre_relacionalContext).GetOp().GetText()
				}
			}()) == "!=" {
				localctx.(*Expre_relacionalContext).p = relacional.Nopdesigualdad(localctx.(*Expre_relacionalContext).GetOpIz().GetP(), localctx.(*Expre_relacionalContext).GetOpDe().GetP(), (func() int {
					if localctx.(*Expre_relacionalContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*Expre_relacionalContext).GetOp().GetLine()
					}
				}()), localctx.(*Expre_relacionalContext).op.GetColumn())
			}

		}
		p.SetState(993)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 41, p.GetParserRuleContext())
	}

	return localctx
}

// IExpre_aritmeticaContext is an interface to support dynamic dispatch.
type IExpre_aritmeticaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOpera returns the opera token.
	GetOpera() antlr.Token

	// GetTipito returns the tipito token.
	GetTipito() antlr.Token

	// Get_TK_POW returns the _TK_POW token.
	Get_TK_POW() antlr.Token

	// Get_TK_POWF returns the _TK_POWF token.
	Get_TK_POWF() antlr.Token

	// SetOpera sets the opera token.
	SetOpera(antlr.Token)

	// SetTipito sets the tipito token.
	SetTipito(antlr.Token)

	// Set_TK_POW sets the _TK_POW token.
	Set_TK_POW(antlr.Token)

	// Set_TK_POWF sets the _TK_POWF token.
	Set_TK_POWF(antlr.Token)

	// GetOpIz returns the opIz rule contexts.
	GetOpIz() IExpre_aritmeticaContext

	// GetOpUn returns the opUn rule contexts.
	GetOpUn() IExpre_aritmeticaContext

	// GetOpDe returns the opDe rule contexts.
	GetOpDe() IExpre_aritmeticaContext

	// Get_valores returns the _valores rule contexts.
	Get_valores() IValoresContext

	// SetOpIz sets the opIz rule contexts.
	SetOpIz(IExpre_aritmeticaContext)

	// SetOpUn sets the opUn rule contexts.
	SetOpUn(IExpre_aritmeticaContext)

	// SetOpDe sets the opDe rule contexts.
	SetOpDe(IExpre_aritmeticaContext)

	// Set_valores sets the _valores rule contexts.
	Set_valores(IValoresContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsExpre_aritmeticaContext differentiates from other interfaces.
	IsExpre_aritmeticaContext()
}

type Expre_aritmeticaContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	p        interfaces.Expresion
	opIz     IExpre_aritmeticaContext
	opera    antlr.Token
	opUn     IExpre_aritmeticaContext
	tipito   antlr.Token
	_TK_POW  antlr.Token
	opDe     IExpre_aritmeticaContext
	_TK_POWF antlr.Token
	_valores IValoresContext
}

func NewEmptyExpre_aritmeticaContext() *Expre_aritmeticaContext {
	var p = new(Expre_aritmeticaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_expre_aritmetica
	return p
}

func (*Expre_aritmeticaContext) IsExpre_aritmeticaContext() {}

func NewExpre_aritmeticaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expre_aritmeticaContext {
	var p = new(Expre_aritmeticaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_expre_aritmetica

	return p
}

func (s *Expre_aritmeticaContext) GetParser() antlr.Parser { return s.parser }

func (s *Expre_aritmeticaContext) GetOpera() antlr.Token { return s.opera }

func (s *Expre_aritmeticaContext) GetTipito() antlr.Token { return s.tipito }

func (s *Expre_aritmeticaContext) Get_TK_POW() antlr.Token { return s._TK_POW }

func (s *Expre_aritmeticaContext) Get_TK_POWF() antlr.Token { return s._TK_POWF }

func (s *Expre_aritmeticaContext) SetOpera(v antlr.Token) { s.opera = v }

func (s *Expre_aritmeticaContext) SetTipito(v antlr.Token) { s.tipito = v }

func (s *Expre_aritmeticaContext) Set_TK_POW(v antlr.Token) { s._TK_POW = v }

func (s *Expre_aritmeticaContext) Set_TK_POWF(v antlr.Token) { s._TK_POWF = v }

func (s *Expre_aritmeticaContext) GetOpIz() IExpre_aritmeticaContext { return s.opIz }

func (s *Expre_aritmeticaContext) GetOpUn() IExpre_aritmeticaContext { return s.opUn }

func (s *Expre_aritmeticaContext) GetOpDe() IExpre_aritmeticaContext { return s.opDe }

func (s *Expre_aritmeticaContext) Get_valores() IValoresContext { return s._valores }

func (s *Expre_aritmeticaContext) SetOpIz(v IExpre_aritmeticaContext) { s.opIz = v }

func (s *Expre_aritmeticaContext) SetOpUn(v IExpre_aritmeticaContext) { s.opUn = v }

func (s *Expre_aritmeticaContext) SetOpDe(v IExpre_aritmeticaContext) { s.opDe = v }

func (s *Expre_aritmeticaContext) Set_valores(v IValoresContext) { s._valores = v }

func (s *Expre_aritmeticaContext) GetP() interfaces.Expresion { return s.p }

func (s *Expre_aritmeticaContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Expre_aritmeticaContext) TK_RESTA() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_RESTA, 0)
}

func (s *Expre_aritmeticaContext) AllExpre_aritmetica() []IExpre_aritmeticaContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpre_aritmeticaContext)(nil)).Elem())
	var tst = make([]IExpre_aritmeticaContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpre_aritmeticaContext)
		}
	}

	return tst
}

func (s *Expre_aritmeticaContext) Expre_aritmetica(i int) IExpre_aritmeticaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpre_aritmeticaContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpre_aritmeticaContext)
}

func (s *Expre_aritmeticaContext) TK_POW() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_POW, 0)
}

func (s *Expre_aritmeticaContext) TK_PI() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PI, 0)
}

func (s *Expre_aritmeticaContext) TK_COMA() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_COMA, 0)
}

func (s *Expre_aritmeticaContext) TK_PD() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_PD, 0)
}

func (s *Expre_aritmeticaContext) TK_TIPOINT() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_TIPOINT, 0)
}

func (s *Expre_aritmeticaContext) TK_POWF() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_POWF, 0)
}

func (s *Expre_aritmeticaContext) TK_TIPOFLOAT() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_TIPOFLOAT, 0)
}

func (s *Expre_aritmeticaContext) Valores() IValoresContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValoresContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValoresContext)
}

func (s *Expre_aritmeticaContext) TK_MULTI() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_MULTI, 0)
}

func (s *Expre_aritmeticaContext) TK_DIVI() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_DIVI, 0)
}

func (s *Expre_aritmeticaContext) TK_MODULO() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_MODULO, 0)
}

func (s *Expre_aritmeticaContext) TK_SUMA() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_SUMA, 0)
}

func (s *Expre_aritmeticaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expre_aritmeticaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expre_aritmeticaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterExpre_aritmetica(s)
	}
}

func (s *Expre_aritmeticaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitExpre_aritmetica(s)
	}
}

func (p *db_rustparser) Expre_aritmetica() (localctx IExpre_aritmeticaContext) {
	return p.expre_aritmetica(0)
}

func (p *db_rustparser) expre_aritmetica(_p int) (localctx IExpre_aritmeticaContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpre_aritmeticaContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpre_aritmeticaContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 122
	p.EnterRecursionRule(localctx, 122, db_rustparserRULE_expre_aritmetica, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1020)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case db_rustparserTK_RESTA:
		{
			p.SetState(995)

			var _m = p.Match(db_rustparserTK_RESTA)

			localctx.(*Expre_aritmeticaContext).opera = _m
		}
		{
			p.SetState(996)

			var _x = p.expre_aritmetica(6)

			localctx.(*Expre_aritmeticaContext).opUn = _x
		}

		localctx.(*Expre_aritmeticaContext).p = aritmetica.Nopnegativo(localctx.(*Expre_aritmeticaContext).GetOpUn().GetP(), (func() int {
			if localctx.(*Expre_aritmeticaContext).GetOpera() == nil {
				return 0
			} else {
				return localctx.(*Expre_aritmeticaContext).GetOpera().GetLine()
			}
		}()), localctx.(*Expre_aritmeticaContext).opera.GetColumn())

	case db_rustparserTK_TIPOINT:
		{
			p.SetState(999)

			var _m = p.Match(db_rustparserTK_TIPOINT)

			localctx.(*Expre_aritmeticaContext).tipito = _m
		}
		{
			p.SetState(1000)

			var _m = p.Match(db_rustparserTK_POW)

			localctx.(*Expre_aritmeticaContext)._TK_POW = _m
		}
		{
			p.SetState(1001)
			p.Match(db_rustparserTK_PI)
		}
		{
			p.SetState(1002)

			var _x = p.expre_aritmetica(0)

			localctx.(*Expre_aritmeticaContext).opIz = _x
		}
		{
			p.SetState(1003)
			p.Match(db_rustparserTK_COMA)
		}
		{
			p.SetState(1004)

			var _x = p.expre_aritmetica(0)

			localctx.(*Expre_aritmeticaContext).opDe = _x
		}
		{
			p.SetState(1005)
			p.Match(db_rustparserTK_PD)
		}

		localctx.(*Expre_aritmeticaContext).p = aritmetica.Npotencia((func() string {
			if localctx.(*Expre_aritmeticaContext).GetTipito() == nil {
				return ""
			} else {
				return localctx.(*Expre_aritmeticaContext).GetTipito().GetText()
			}
		}()), localctx.(*Expre_aritmeticaContext).GetOpIz().GetP(), localctx.(*Expre_aritmeticaContext).GetOpDe().GetP(), (func() int {
			if localctx.(*Expre_aritmeticaContext).Get_TK_POW() == nil {
				return 0
			} else {
				return localctx.(*Expre_aritmeticaContext).Get_TK_POW().GetLine()
			}
		}()), localctx.(*Expre_aritmeticaContext).Get_TK_POW().GetColumn())

	case db_rustparserTK_TIPOFLOAT:
		{
			p.SetState(1008)

			var _m = p.Match(db_rustparserTK_TIPOFLOAT)

			localctx.(*Expre_aritmeticaContext).tipito = _m
		}
		{
			p.SetState(1009)

			var _m = p.Match(db_rustparserTK_POWF)

			localctx.(*Expre_aritmeticaContext)._TK_POWF = _m
		}
		{
			p.SetState(1010)
			p.Match(db_rustparserTK_PI)
		}
		{
			p.SetState(1011)

			var _x = p.expre_aritmetica(0)

			localctx.(*Expre_aritmeticaContext).opIz = _x
		}
		{
			p.SetState(1012)
			p.Match(db_rustparserTK_COMA)
		}
		{
			p.SetState(1013)

			var _x = p.expre_aritmetica(0)

			localctx.(*Expre_aritmeticaContext).opDe = _x
		}
		{
			p.SetState(1014)
			p.Match(db_rustparserTK_PD)
		}

		localctx.(*Expre_aritmeticaContext).p = aritmetica.Npotencia((func() string {
			if localctx.(*Expre_aritmeticaContext).GetTipito() == nil {
				return ""
			} else {
				return localctx.(*Expre_aritmeticaContext).GetTipito().GetText()
			}
		}()), localctx.(*Expre_aritmeticaContext).GetOpIz().GetP(), localctx.(*Expre_aritmeticaContext).GetOpDe().GetP(), (func() int {
			if localctx.(*Expre_aritmeticaContext).Get_TK_POWF() == nil {
				return 0
			} else {
				return localctx.(*Expre_aritmeticaContext).Get_TK_POWF().GetLine()
			}
		}()), localctx.(*Expre_aritmeticaContext).Get_TK_POWF().GetColumn())

	case db_rustparserTK_TRUE, db_rustparserTK_FALSE, db_rustparserTK_FLOAT, db_rustparserTK_ENTERO, db_rustparserTK_CADENA, db_rustparserTK_CARACTER, db_rustparserTK_IDENTIFICADOR:
		{
			p.SetState(1017)

			var _x = p.Valores()

			localctx.(*Expre_aritmeticaContext)._valores = _x
		}
		localctx.(*Expre_aritmeticaContext).p = localctx.(*Expre_aritmeticaContext).Get_valores().GetP()

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1034)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1032)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 43, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExpre_aritmeticaContext(p, _parentctx, _parentState)
				localctx.(*Expre_aritmeticaContext).opIz = _prevctx
				p.PushNewRecursionContext(localctx, _startState, db_rustparserRULE_expre_aritmetica)
				p.SetState(1022)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(1023)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*Expre_aritmeticaContext).opera = _lt

					_la = p.GetTokenStream().LA(1)

					if !(((_la-53)&-(0x1f+1)) == 0 && ((1<<uint((_la-53)))&((1<<(db_rustparserTK_MULTI-53))|(1<<(db_rustparserTK_DIVI-53))|(1<<(db_rustparserTK_MODULO-53)))) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*Expre_aritmeticaContext).opera = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1024)

					var _x = p.expre_aritmetica(4)

					localctx.(*Expre_aritmeticaContext).opDe = _x
				}

				if (func() string {
					if localctx.(*Expre_aritmeticaContext).GetOpera() == nil {
						return ""
					} else {
						return localctx.(*Expre_aritmeticaContext).GetOpera().GetText()
					}
				}()) == "*" {
					localctx.(*Expre_aritmeticaContext).p = aritmetica.Nopmultiplicacion(localctx.(*Expre_aritmeticaContext).GetOpIz().GetP(), localctx.(*Expre_aritmeticaContext).GetOpDe().GetP(), (func() int {
						if localctx.(*Expre_aritmeticaContext).GetOpera() == nil {
							return 0
						} else {
							return localctx.(*Expre_aritmeticaContext).GetOpera().GetLine()
						}
					}()), localctx.(*Expre_aritmeticaContext).opera.GetColumn())
				} else if (func() string {
					if localctx.(*Expre_aritmeticaContext).GetOpera() == nil {
						return ""
					} else {
						return localctx.(*Expre_aritmeticaContext).GetOpera().GetText()
					}
				}()) == "/" {
					localctx.(*Expre_aritmeticaContext).p = aritmetica.Nopdivision(localctx.(*Expre_aritmeticaContext).GetOpIz().GetP(), localctx.(*Expre_aritmeticaContext).GetOpDe().GetP(), (func() int {
						if localctx.(*Expre_aritmeticaContext).GetOpera() == nil {
							return 0
						} else {
							return localctx.(*Expre_aritmeticaContext).GetOpera().GetLine()
						}
					}()), localctx.(*Expre_aritmeticaContext).opera.GetColumn())
				} else if (func() string {
					if localctx.(*Expre_aritmeticaContext).GetOpera() == nil {
						return ""
					} else {
						return localctx.(*Expre_aritmeticaContext).GetOpera().GetText()
					}
				}()) == "%" {
					localctx.(*Expre_aritmeticaContext).p = aritmetica.Nopmodulo(localctx.(*Expre_aritmeticaContext).GetOpIz().GetP(), localctx.(*Expre_aritmeticaContext).GetOpDe().GetP(), (func() int {
						if localctx.(*Expre_aritmeticaContext).GetOpera() == nil {
							return 0
						} else {
							return localctx.(*Expre_aritmeticaContext).GetOpera().GetLine()
						}
					}()), localctx.(*Expre_aritmeticaContext).opera.GetColumn())
				}

			case 2:
				localctx = NewExpre_aritmeticaContext(p, _parentctx, _parentState)
				localctx.(*Expre_aritmeticaContext).opIz = _prevctx
				p.PushNewRecursionContext(localctx, _startState, db_rustparserRULE_expre_aritmetica)
				p.SetState(1027)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(1028)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*Expre_aritmeticaContext).opera = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == db_rustparserTK_SUMA || _la == db_rustparserTK_RESTA) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*Expre_aritmeticaContext).opera = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1029)

					var _x = p.expre_aritmetica(3)

					localctx.(*Expre_aritmeticaContext).opDe = _x
				}

				if (func() string {
					if localctx.(*Expre_aritmeticaContext).GetOpera() == nil {
						return ""
					} else {
						return localctx.(*Expre_aritmeticaContext).GetOpera().GetText()
					}
				}()) == "+" {
					localctx.(*Expre_aritmeticaContext).p = aritmetica.Nopsuma(localctx.(*Expre_aritmeticaContext).GetOpIz().GetP(), localctx.(*Expre_aritmeticaContext).GetOpDe().GetP(), (func() int {
						if localctx.(*Expre_aritmeticaContext).GetOpera() == nil {
							return 0
						} else {
							return localctx.(*Expre_aritmeticaContext).GetOpera().GetLine()
						}
					}()), localctx.(*Expre_aritmeticaContext).opera.GetColumn())
				} else {
					localctx.(*Expre_aritmeticaContext).p = aritmetica.Nopresta(localctx.(*Expre_aritmeticaContext).GetOpIz().GetP(), localctx.(*Expre_aritmeticaContext).GetOpDe().GetP(), (func() int {
						if localctx.(*Expre_aritmeticaContext).GetOpera() == nil {
							return 0
						} else {
							return localctx.(*Expre_aritmeticaContext).GetOpera().GetLine()
						}
					}()), localctx.(*Expre_aritmeticaContext).opera.GetColumn())
				}

			}

		}
		p.SetState(1036)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext())
	}

	return localctx
}

// IValoresContext is an interface to support dynamic dispatch.
type IValoresContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_datos returns the _datos rule contexts.
	Get_datos() IDatosContext

	// Get_casteo_datos returns the _casteo_datos rule contexts.
	Get_casteo_datos() ICasteo_datosContext

	// Set_datos sets the _datos rule contexts.
	Set_datos(IDatosContext)

	// Set_casteo_datos sets the _casteo_datos rule contexts.
	Set_casteo_datos(ICasteo_datosContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsValoresContext differentiates from other interfaces.
	IsValoresContext()
}

type ValoresContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	p             interfaces.Expresion
	_datos        IDatosContext
	_casteo_datos ICasteo_datosContext
}

func NewEmptyValoresContext() *ValoresContext {
	var p = new(ValoresContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_valores
	return p
}

func (*ValoresContext) IsValoresContext() {}

func NewValoresContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ValoresContext {
	var p = new(ValoresContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_valores

	return p
}

func (s *ValoresContext) GetParser() antlr.Parser { return s.parser }

func (s *ValoresContext) Get_datos() IDatosContext { return s._datos }

func (s *ValoresContext) Get_casteo_datos() ICasteo_datosContext { return s._casteo_datos }

func (s *ValoresContext) Set_datos(v IDatosContext) { s._datos = v }

func (s *ValoresContext) Set_casteo_datos(v ICasteo_datosContext) { s._casteo_datos = v }

func (s *ValoresContext) GetP() interfaces.Expresion { return s.p }

func (s *ValoresContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *ValoresContext) Datos() IDatosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatosContext)
}

func (s *ValoresContext) Casteo_datos() ICasteo_datosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICasteo_datosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICasteo_datosContext)
}

func (s *ValoresContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValoresContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ValoresContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterValores(s)
	}
}

func (s *ValoresContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitValores(s)
	}
}

func (p *db_rustparser) Valores() (localctx IValoresContext) {
	localctx = NewValoresContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, db_rustparserRULE_valores)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1043)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 45, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1037)

			var _x = p.Datos()

			localctx.(*ValoresContext)._datos = _x
		}
		localctx.(*ValoresContext).p = localctx.(*ValoresContext).Get_datos().GetP()

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1040)

			var _x = p.Casteo_datos()

			localctx.(*ValoresContext)._casteo_datos = _x
		}
		localctx.(*ValoresContext).p = localctx.(*ValoresContext).Get_casteo_datos().GetP()

	}

	return localctx
}

// ICasteo_datosContext is an interface to support dynamic dispatch.
type ICasteo_datosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_TK_ENTERO returns the _TK_ENTERO token.
	Get_TK_ENTERO() antlr.Token

	// Get_TK_FLOAT returns the _TK_FLOAT token.
	Get_TK_FLOAT() antlr.Token

	// Get_TK_CADENA returns the _TK_CADENA token.
	Get_TK_CADENA() antlr.Token

	// Get_TK_CARACTER returns the _TK_CARACTER token.
	Get_TK_CARACTER() antlr.Token

	// Set_TK_ENTERO sets the _TK_ENTERO token.
	Set_TK_ENTERO(antlr.Token)

	// Set_TK_FLOAT sets the _TK_FLOAT token.
	Set_TK_FLOAT(antlr.Token)

	// Set_TK_CADENA sets the _TK_CADENA token.
	Set_TK_CADENA(antlr.Token)

	// Set_TK_CARACTER sets the _TK_CARACTER token.
	Set_TK_CARACTER(antlr.Token)

	// Get_tipos returns the _tipos rule contexts.
	Get_tipos() ITiposContext

	// Set_tipos sets the _tipos rule contexts.
	Set_tipos(ITiposContext)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsCasteo_datosContext differentiates from other interfaces.
	IsCasteo_datosContext()
}

type Casteo_datosContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	p            interfaces.Expresion
	_TK_ENTERO   antlr.Token
	_tipos       ITiposContext
	_TK_FLOAT    antlr.Token
	_TK_CADENA   antlr.Token
	_TK_CARACTER antlr.Token
}

func NewEmptyCasteo_datosContext() *Casteo_datosContext {
	var p = new(Casteo_datosContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_casteo_datos
	return p
}

func (*Casteo_datosContext) IsCasteo_datosContext() {}

func NewCasteo_datosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Casteo_datosContext {
	var p = new(Casteo_datosContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_casteo_datos

	return p
}

func (s *Casteo_datosContext) GetParser() antlr.Parser { return s.parser }

func (s *Casteo_datosContext) Get_TK_ENTERO() antlr.Token { return s._TK_ENTERO }

func (s *Casteo_datosContext) Get_TK_FLOAT() antlr.Token { return s._TK_FLOAT }

func (s *Casteo_datosContext) Get_TK_CADENA() antlr.Token { return s._TK_CADENA }

func (s *Casteo_datosContext) Get_TK_CARACTER() antlr.Token { return s._TK_CARACTER }

func (s *Casteo_datosContext) Set_TK_ENTERO(v antlr.Token) { s._TK_ENTERO = v }

func (s *Casteo_datosContext) Set_TK_FLOAT(v antlr.Token) { s._TK_FLOAT = v }

func (s *Casteo_datosContext) Set_TK_CADENA(v antlr.Token) { s._TK_CADENA = v }

func (s *Casteo_datosContext) Set_TK_CARACTER(v antlr.Token) { s._TK_CARACTER = v }

func (s *Casteo_datosContext) Get_tipos() ITiposContext { return s._tipos }

func (s *Casteo_datosContext) Set_tipos(v ITiposContext) { s._tipos = v }

func (s *Casteo_datosContext) GetP() interfaces.Expresion { return s.p }

func (s *Casteo_datosContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *Casteo_datosContext) TK_ENTERO() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_ENTERO, 0)
}

func (s *Casteo_datosContext) TK_AS() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_AS, 0)
}

func (s *Casteo_datosContext) Tipos() ITiposContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITiposContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITiposContext)
}

func (s *Casteo_datosContext) TK_FLOAT() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_FLOAT, 0)
}

func (s *Casteo_datosContext) TK_CADENA() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_CADENA, 0)
}

func (s *Casteo_datosContext) TK_CARACTER() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_CARACTER, 0)
}

func (s *Casteo_datosContext) TK_TRUE() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_TRUE, 0)
}

func (s *Casteo_datosContext) TK_FALSE() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_FALSE, 0)
}

func (s *Casteo_datosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Casteo_datosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Casteo_datosContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterCasteo_datos(s)
	}
}

func (s *Casteo_datosContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitCasteo_datos(s)
	}
}

func (p *db_rustparser) Casteo_datos() (localctx ICasteo_datosContext) {
	localctx = NewCasteo_datosContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, db_rustparserRULE_casteo_datos)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1075)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case db_rustparserTK_ENTERO:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1045)

			var _m = p.Match(db_rustparserTK_ENTERO)

			localctx.(*Casteo_datosContext)._TK_ENTERO = _m
		}
		{
			p.SetState(1046)
			p.Match(db_rustparserTK_AS)
		}
		{
			p.SetState(1047)

			var _x = p.Tipos()

			localctx.(*Casteo_datosContext)._tipos = _x
		}

		num, err := strconv.Atoi((func() string {
			if localctx.(*Casteo_datosContext).Get_TK_ENTERO() == nil {
				return ""
			} else {
				return localctx.(*Casteo_datosContext).Get_TK_ENTERO().GetText()
			}
		}()))
		if err != nil {
			fmt.Println(err)
		}
		val := primitivo.Nuevo_Dato_Primitivo(num, simbolos.INTEGER)
		localctx.(*Casteo_datosContext).p = casteos.Ncasteentero(val, localctx.(*Casteo_datosContext).Get_tipos().GetTip())

	case db_rustparserTK_FLOAT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1050)

			var _m = p.Match(db_rustparserTK_FLOAT)

			localctx.(*Casteo_datosContext)._TK_FLOAT = _m
		}
		{
			p.SetState(1051)
			p.Match(db_rustparserTK_AS)
		}
		{
			p.SetState(1052)

			var _x = p.Tipos()

			localctx.(*Casteo_datosContext)._tipos = _x
		}

		num, err := strconv.ParseFloat((func() string {
			if localctx.(*Casteo_datosContext).Get_TK_FLOAT() == nil {
				return ""
			} else {
				return localctx.(*Casteo_datosContext).Get_TK_FLOAT().GetText()
			}
		}()), 64)
		if err != nil {
			fmt.Println(err)
		}
		val := primitivo.Nuevo_Dato_Primitivo(num, simbolos.FLOAT)
		localctx.(*Casteo_datosContext).p = casteos.Ncastefloat(val, localctx.(*Casteo_datosContext).Get_tipos().GetTip())

	case db_rustparserTK_CADENA:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1055)

			var _m = p.Match(db_rustparserTK_CADENA)

			localctx.(*Casteo_datosContext)._TK_CADENA = _m
		}
		{
			p.SetState(1056)
			p.Match(db_rustparserTK_AS)
		}
		{
			p.SetState(1057)

			var _x = p.Tipos()

			localctx.(*Casteo_datosContext)._tipos = _x
		}

		str := (func() string {
			if localctx.(*Casteo_datosContext).Get_TK_CADENA() == nil {
				return ""
			} else {
				return localctx.(*Casteo_datosContext).Get_TK_CADENA().GetText()
			}
		}())[1 : len((func() string {
			if localctx.(*Casteo_datosContext).Get_TK_CADENA() == nil {
				return ""
			} else {
				return localctx.(*Casteo_datosContext).Get_TK_CADENA().GetText()
			}
		}()))-1]
		val := primitivo.Nuevo_Dato_Primitivo(str, simbolos.YTEXTO)
		localctx.(*Casteo_datosContext).p = casteos.Ncastetexto(val, localctx.(*Casteo_datosContext).Get_tipos().GetTip())

	case db_rustparserTK_CARACTER:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1060)

			var _m = p.Match(db_rustparserTK_CARACTER)

			localctx.(*Casteo_datosContext)._TK_CARACTER = _m
		}
		{
			p.SetState(1061)
			p.Match(db_rustparserTK_AS)
		}
		{
			p.SetState(1062)

			var _x = p.Tipos()

			localctx.(*Casteo_datosContext)._tipos = _x
		}

		str := (func() string {
			if localctx.(*Casteo_datosContext).Get_TK_CARACTER() == nil {
				return ""
			} else {
				return localctx.(*Casteo_datosContext).Get_TK_CARACTER().GetText()
			}
		}())[1 : len((func() string {
			if localctx.(*Casteo_datosContext).Get_TK_CARACTER() == nil {
				return ""
			} else {
				return localctx.(*Casteo_datosContext).Get_TK_CARACTER().GetText()
			}
		}()))-1]
		r := []rune(str)
		val := primitivo.Nuevo_Dato_Primitivo(r[0], simbolos.CHAR)
		localctx.(*Casteo_datosContext).p = casteos.Ncastechar(val, localctx.(*Casteo_datosContext).Get_tipos().GetTip())

	case db_rustparserTK_TRUE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1065)
			p.Match(db_rustparserTK_TRUE)
		}
		{
			p.SetState(1066)
			p.Match(db_rustparserTK_AS)
		}
		{
			p.SetState(1067)

			var _x = p.Tipos()

			localctx.(*Casteo_datosContext)._tipos = _x
		}

		val := primitivo.Nuevo_Dato_Primitivo(true, simbolos.BOOLEAN)
		localctx.(*Casteo_datosContext).p = casteos.Ncastebool(val, localctx.(*Casteo_datosContext).Get_tipos().GetTip())

	case db_rustparserTK_FALSE:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1070)
			p.Match(db_rustparserTK_FALSE)
		}
		{
			p.SetState(1071)
			p.Match(db_rustparserTK_AS)
		}
		{
			p.SetState(1072)

			var _x = p.Tipos()

			localctx.(*Casteo_datosContext)._tipos = _x
		}

		val := primitivo.Nuevo_Dato_Primitivo(false, simbolos.BOOLEAN)
		localctx.(*Casteo_datosContext).p = casteos.Ncastebool(val, localctx.(*Casteo_datosContext).Get_tipos().GetTip())

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDatosContext is an interface to support dynamic dispatch.
type IDatosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_TK_ENTERO returns the _TK_ENTERO token.
	Get_TK_ENTERO() antlr.Token

	// Get_TK_FLOAT returns the _TK_FLOAT token.
	Get_TK_FLOAT() antlr.Token

	// Get_TK_CADENA returns the _TK_CADENA token.
	Get_TK_CADENA() antlr.Token

	// Get_TK_IDENTIFICADOR returns the _TK_IDENTIFICADOR token.
	Get_TK_IDENTIFICADOR() antlr.Token

	// Get_TK_CARACTER returns the _TK_CARACTER token.
	Get_TK_CARACTER() antlr.Token

	// Set_TK_ENTERO sets the _TK_ENTERO token.
	Set_TK_ENTERO(antlr.Token)

	// Set_TK_FLOAT sets the _TK_FLOAT token.
	Set_TK_FLOAT(antlr.Token)

	// Set_TK_CADENA sets the _TK_CADENA token.
	Set_TK_CADENA(antlr.Token)

	// Set_TK_IDENTIFICADOR sets the _TK_IDENTIFICADOR token.
	Set_TK_IDENTIFICADOR(antlr.Token)

	// Set_TK_CARACTER sets the _TK_CARACTER token.
	Set_TK_CARACTER(antlr.Token)

	// GetP returns the p attribute.
	GetP() interfaces.Expresion

	// SetP sets the p attribute.
	SetP(interfaces.Expresion)

	// IsDatosContext differentiates from other interfaces.
	IsDatosContext()
}

type DatosContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	p                 interfaces.Expresion
	_TK_ENTERO        antlr.Token
	_TK_FLOAT         antlr.Token
	_TK_CADENA        antlr.Token
	_TK_IDENTIFICADOR antlr.Token
	_TK_CARACTER      antlr.Token
}

func NewEmptyDatosContext() *DatosContext {
	var p = new(DatosContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = db_rustparserRULE_datos
	return p
}

func (*DatosContext) IsDatosContext() {}

func NewDatosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DatosContext {
	var p = new(DatosContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = db_rustparserRULE_datos

	return p
}

func (s *DatosContext) GetParser() antlr.Parser { return s.parser }

func (s *DatosContext) Get_TK_ENTERO() antlr.Token { return s._TK_ENTERO }

func (s *DatosContext) Get_TK_FLOAT() antlr.Token { return s._TK_FLOAT }

func (s *DatosContext) Get_TK_CADENA() antlr.Token { return s._TK_CADENA }

func (s *DatosContext) Get_TK_IDENTIFICADOR() antlr.Token { return s._TK_IDENTIFICADOR }

func (s *DatosContext) Get_TK_CARACTER() antlr.Token { return s._TK_CARACTER }

func (s *DatosContext) Set_TK_ENTERO(v antlr.Token) { s._TK_ENTERO = v }

func (s *DatosContext) Set_TK_FLOAT(v antlr.Token) { s._TK_FLOAT = v }

func (s *DatosContext) Set_TK_CADENA(v antlr.Token) { s._TK_CADENA = v }

func (s *DatosContext) Set_TK_IDENTIFICADOR(v antlr.Token) { s._TK_IDENTIFICADOR = v }

func (s *DatosContext) Set_TK_CARACTER(v antlr.Token) { s._TK_CARACTER = v }

func (s *DatosContext) GetP() interfaces.Expresion { return s.p }

func (s *DatosContext) SetP(v interfaces.Expresion) { s.p = v }

func (s *DatosContext) TK_ENTERO() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_ENTERO, 0)
}

func (s *DatosContext) TK_FLOAT() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_FLOAT, 0)
}

func (s *DatosContext) TK_CADENA() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_CADENA, 0)
}

func (s *DatosContext) TK_IDENTIFICADOR() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_IDENTIFICADOR, 0)
}

func (s *DatosContext) TK_CARACTER() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_CARACTER, 0)
}

func (s *DatosContext) TK_TRUE() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_TRUE, 0)
}

func (s *DatosContext) TK_FALSE() antlr.TerminalNode {
	return s.GetToken(db_rustparserTK_FALSE, 0)
}

func (s *DatosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DatosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DatosContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.EnterDatos(s)
	}
}

func (s *DatosContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(db_rustparserListener); ok {
		listenerT.ExitDatos(s)
	}
}

func (p *db_rustparser) Datos() (localctx IDatosContext) {
	localctx = NewDatosContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, db_rustparserRULE_datos)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1091)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case db_rustparserTK_ENTERO:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1077)

			var _m = p.Match(db_rustparserTK_ENTERO)

			localctx.(*DatosContext)._TK_ENTERO = _m
		}

		num, err := strconv.Atoi((func() string {
			if localctx.(*DatosContext).Get_TK_ENTERO() == nil {
				return ""
			} else {
				return localctx.(*DatosContext).Get_TK_ENTERO().GetText()
			}
		}()))
		if err != nil {
			fmt.Println(err)
		}
		localctx.(*DatosContext).p = primitivo.Nuevo_Dato_Primitivo(num, simbolos.INTEGER)

	case db_rustparserTK_FLOAT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1079)

			var _m = p.Match(db_rustparserTK_FLOAT)

			localctx.(*DatosContext)._TK_FLOAT = _m
		}

		num, err := strconv.ParseFloat((func() string {
			if localctx.(*DatosContext).Get_TK_FLOAT() == nil {
				return ""
			} else {
				return localctx.(*DatosContext).Get_TK_FLOAT().GetText()
			}
		}()), 64)
		if err != nil {
			fmt.Println(err)
		}
		localctx.(*DatosContext).p = primitivo.Nuevo_Dato_Primitivo(num, simbolos.FLOAT)

	case db_rustparserTK_CADENA:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1081)

			var _m = p.Match(db_rustparserTK_CADENA)

			localctx.(*DatosContext)._TK_CADENA = _m
		}

		str := (func() string {
			if localctx.(*DatosContext).Get_TK_CADENA() == nil {
				return ""
			} else {
				return localctx.(*DatosContext).Get_TK_CADENA().GetText()
			}
		}())[1 : len((func() string {
			if localctx.(*DatosContext).Get_TK_CADENA() == nil {
				return ""
			} else {
				return localctx.(*DatosContext).Get_TK_CADENA().GetText()
			}
		}()))-1]
		localctx.(*DatosContext).p = primitivo.Nuevo_Dato_Primitivo(str, simbolos.YTEXTO)

	case db_rustparserTK_IDENTIFICADOR:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1083)

			var _m = p.Match(db_rustparserTK_IDENTIFICADOR)

			localctx.(*DatosContext)._TK_IDENTIFICADOR = _m
		}

		str := (func() string {
			if localctx.(*DatosContext).Get_TK_IDENTIFICADOR() == nil {
				return ""
			} else {
				return localctx.(*DatosContext).Get_TK_IDENTIFICADOR().GetText()
			}
		}())[0:len((func() string {
			if localctx.(*DatosContext).Get_TK_IDENTIFICADOR() == nil {
				return ""
			} else {
				return localctx.(*DatosContext).Get_TK_IDENTIFICADOR().GetText()
			}
		}()))]
		localctx.(*DatosContext).p = variables.NVariable(str, (func() int {
			if localctx.(*DatosContext).Get_TK_IDENTIFICADOR() == nil {
				return 0
			} else {
				return localctx.(*DatosContext).Get_TK_IDENTIFICADOR().GetLine()
			}
		}()), localctx.(*DatosContext).Get_TK_IDENTIFICADOR().GetColumn())

	case db_rustparserTK_CARACTER:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1085)

			var _m = p.Match(db_rustparserTK_CARACTER)

			localctx.(*DatosContext)._TK_CARACTER = _m
		}

		str := (func() string {
			if localctx.(*DatosContext).Get_TK_CARACTER() == nil {
				return ""
			} else {
				return localctx.(*DatosContext).Get_TK_CARACTER().GetText()
			}
		}())[1 : len((func() string {
			if localctx.(*DatosContext).Get_TK_CARACTER() == nil {
				return ""
			} else {
				return localctx.(*DatosContext).Get_TK_CARACTER().GetText()
			}
		}()))-1]
		r := []rune(str)
		localctx.(*DatosContext).p = primitivo.Nuevo_Dato_Primitivo(r[0], simbolos.CHAR)

	case db_rustparserTK_TRUE:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1087)
			p.Match(db_rustparserTK_TRUE)
		}

		localctx.(*DatosContext).p = primitivo.Nuevo_Dato_Primitivo(true, simbolos.BOOLEAN)

	case db_rustparserTK_FALSE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1089)
			p.Match(db_rustparserTK_FALSE)
		}

		localctx.(*DatosContext).p = primitivo.Nuevo_Dato_Primitivo(false, simbolos.BOOLEAN)

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

func (p *db_rustparser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 4:
		var t *L_modulosContext = nil
		if localctx != nil {
			t = localctx.(*L_modulosContext)
		}
		return p.L_modulos_Sempred(t, predIndex)

	case 7:
		var t *L_structsContext = nil
		if localctx != nil {
			t = localctx.(*L_structsContext)
		}
		return p.L_structs_Sempred(t, predIndex)

	case 11:
		var t *ParametrosContext = nil
		if localctx != nil {
			t = localctx.(*ParametrosContext)
		}
		return p.Parametros_Sempred(t, predIndex)

	case 18:
		var t *L_matchesContext = nil
		if localctx != nil {
			t = localctx.(*L_matchesContext)
		}
		return p.L_matches_Sempred(t, predIndex)

	case 20:
		var t *L_mat_conContext = nil
		if localctx != nil {
			t = localctx.(*L_mat_conContext)
		}
		return p.L_mat_con_Sempred(t, predIndex)

	case 32:
		var t *L_asigstructContext = nil
		if localctx != nil {
			t = localctx.(*L_asigstructContext)
		}
		return p.L_asigstruct_Sempred(t, predIndex)

	case 42:
		var t *L_bloqueContext = nil
		if localctx != nil {
			t = localctx.(*L_bloqueContext)
		}
		return p.L_bloque_Sempred(t, predIndex)

	case 45:
		var t *List_expresContext = nil
		if localctx != nil {
			t = localctx.(*List_expresContext)
		}
		return p.List_expres_Sempred(t, predIndex)

	case 53:
		var t *Lista_accesoContext = nil
		if localctx != nil {
			t = localctx.(*Lista_accesoContext)
		}
		return p.Lista_acceso_Sempred(t, predIndex)

	case 58:
		var t *Fun_nativasContext = nil
		if localctx != nil {
			t = localctx.(*Fun_nativasContext)
		}
		return p.Fun_nativas_Sempred(t, predIndex)

	case 59:
		var t *Expre_logicaContext = nil
		if localctx != nil {
			t = localctx.(*Expre_logicaContext)
		}
		return p.Expre_logica_Sempred(t, predIndex)

	case 60:
		var t *Expre_relacionalContext = nil
		if localctx != nil {
			t = localctx.(*Expre_relacionalContext)
		}
		return p.Expre_relacional_Sempred(t, predIndex)

	case 61:
		var t *Expre_aritmeticaContext = nil
		if localctx != nil {
			t = localctx.(*Expre_aritmeticaContext)
		}
		return p.Expre_aritmetica_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *db_rustparser) L_modulos_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *db_rustparser) L_structs_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *db_rustparser) Parametros_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 2:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *db_rustparser) L_matches_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 3:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *db_rustparser) L_mat_con_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 4:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *db_rustparser) L_asigstruct_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 5:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *db_rustparser) L_bloque_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 6:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *db_rustparser) List_expres_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 7:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *db_rustparser) Lista_acceso_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 8:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *db_rustparser) Fun_nativas_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 9:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *db_rustparser) Expre_logica_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 14:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *db_rustparser) Expre_relacional_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 15:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *db_rustparser) Expre_aritmetica_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 16:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 17:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
